
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00002e5e  00002ef2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  008000ae  008000ae  00002f40  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002f70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00002fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e00  00000000  00000000  00003254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cdf  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f67  00000000  00000000  00005d33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000858  00000000  00000000  00007c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000835  00000000  00000000  000084f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fe8  00000000  00000000  00008d29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  00009d11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3d       	cpi	r26, 0xD1	; 209
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 74 14 	call	0x28e8	; 0x28e8 <main>
      8a:	0c 94 2d 17 	jmp	0x2e5a	; 0x2e5a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Init>:
/* Temp Variables */
static u16 currentTemp = 0;
static u16 setTemp = 0;

void Init(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	2e 97       	sbiw	r28, 0x0e	; 14
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
	LCD_vInit();
      a6:	0e 94 2a 09 	call	0x1254	; 0x1254 <LCD_vInit>
	keypad_vInit();
      aa:	0e 94 09 08 	call	0x1012	; 0x1012 <keypad_vInit>
	SPI_masterInit();
      ae:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_masterInit>
	TC72_Init();
      b2:	0e 94 d6 13 	call	0x27ac	; 0x27ac <TC72_Init>
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	a6 e1       	ldi	r26, 0x16	; 22
      bc:	b3 e4       	ldi	r27, 0x43	; 67
      be:	89 83       	std	Y+1, r24	; 0x01
      c0:	9a 83       	std	Y+2, r25	; 0x02
      c2:	ab 83       	std	Y+3, r26	; 0x03
      c4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
      c6:	20 e0       	ldi	r18, 0x00	; 0
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	4a e7       	ldi	r20, 0x7A	; 122
      cc:	55 e4       	ldi	r21, 0x45	; 69
      ce:	69 81       	ldd	r22, Y+1	; 0x01
      d0:	7a 81       	ldd	r23, Y+2	; 0x02
      d2:	8b 81       	ldd	r24, Y+3	; 0x03
      d4:	9c 81       	ldd	r25, Y+4	; 0x04
      d6:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
      da:	dc 01       	movw	r26, r24
      dc:	cb 01       	movw	r24, r22
      de:	8d 83       	std	Y+5, r24	; 0x05
      e0:	9e 83       	std	Y+6, r25	; 0x06
      e2:	af 83       	std	Y+7, r26	; 0x07
      e4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
      e6:	20 e0       	ldi	r18, 0x00	; 0
      e8:	30 e0       	ldi	r19, 0x00	; 0
      ea:	40 e8       	ldi	r20, 0x80	; 128
      ec:	5f e3       	ldi	r21, 0x3F	; 63
      ee:	6d 81       	ldd	r22, Y+5	; 0x05
      f0:	7e 81       	ldd	r23, Y+6	; 0x06
      f2:	8f 81       	ldd	r24, Y+7	; 0x07
      f4:	98 85       	ldd	r25, Y+8	; 0x08
      f6:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__cmpsf2>
      fa:	88 23       	and	r24, r24
      fc:	2c f4       	brge	.+10     	; 0x108 <Init+0x76>
		__ticks = 1;
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	9a 87       	std	Y+10, r25	; 0x0a
     104:	89 87       	std	Y+9, r24	; 0x09
     106:	3f c0       	rjmp	.+126    	; 0x186 <Init+0xf4>
	else if (__tmp > 65535)
     108:	20 e0       	ldi	r18, 0x00	; 0
     10a:	3f ef       	ldi	r19, 0xFF	; 255
     10c:	4f e7       	ldi	r20, 0x7F	; 127
     10e:	57 e4       	ldi	r21, 0x47	; 71
     110:	6d 81       	ldd	r22, Y+5	; 0x05
     112:	7e 81       	ldd	r23, Y+6	; 0x06
     114:	8f 81       	ldd	r24, Y+7	; 0x07
     116:	98 85       	ldd	r25, Y+8	; 0x08
     118:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__gesf2>
     11c:	18 16       	cp	r1, r24
     11e:	4c f5       	brge	.+82     	; 0x172 <Init+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     120:	20 e0       	ldi	r18, 0x00	; 0
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	40 e2       	ldi	r20, 0x20	; 32
     126:	51 e4       	ldi	r21, 0x41	; 65
     128:	69 81       	ldd	r22, Y+1	; 0x01
     12a:	7a 81       	ldd	r23, Y+2	; 0x02
     12c:	8b 81       	ldd	r24, Y+3	; 0x03
     12e:	9c 81       	ldd	r25, Y+4	; 0x04
     130:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
     134:	dc 01       	movw	r26, r24
     136:	cb 01       	movw	r24, r22
     138:	bc 01       	movw	r22, r24
     13a:	cd 01       	movw	r24, r26
     13c:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
     140:	dc 01       	movw	r26, r24
     142:	cb 01       	movw	r24, r22
     144:	9a 87       	std	Y+10, r25	; 0x0a
     146:	89 87       	std	Y+9, r24	; 0x09
     148:	0f c0       	rjmp	.+30     	; 0x168 <Init+0xd6>
     14a:	80 e9       	ldi	r24, 0x90	; 144
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	9c 87       	std	Y+12, r25	; 0x0c
     150:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     152:	8b 85       	ldd	r24, Y+11	; 0x0b
     154:	9c 85       	ldd	r25, Y+12	; 0x0c
     156:	01 97       	sbiw	r24, 0x01	; 1
     158:	f1 f7       	brne	.-4      	; 0x156 <Init+0xc4>
     15a:	9c 87       	std	Y+12, r25	; 0x0c
     15c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     15e:	89 85       	ldd	r24, Y+9	; 0x09
     160:	9a 85       	ldd	r25, Y+10	; 0x0a
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	9a 87       	std	Y+10, r25	; 0x0a
     166:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     168:	89 85       	ldd	r24, Y+9	; 0x09
     16a:	9a 85       	ldd	r25, Y+10	; 0x0a
     16c:	89 2b       	or	r24, r25
     16e:	69 f7       	brne	.-38     	; 0x14a <Init+0xb8>
	_delay_ms(150);
}
     170:	14 c0       	rjmp	.+40     	; 0x19a <Init+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     172:	6d 81       	ldd	r22, Y+5	; 0x05
     174:	7e 81       	ldd	r23, Y+6	; 0x06
     176:	8f 81       	ldd	r24, Y+7	; 0x07
     178:	98 85       	ldd	r25, Y+8	; 0x08
     17a:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
     17e:	dc 01       	movw	r26, r24
     180:	cb 01       	movw	r24, r22
     182:	9a 87       	std	Y+10, r25	; 0x0a
     184:	89 87       	std	Y+9, r24	; 0x09
     186:	89 85       	ldd	r24, Y+9	; 0x09
     188:	9a 85       	ldd	r25, Y+10	; 0x0a
     18a:	9e 87       	std	Y+14, r25	; 0x0e
     18c:	8d 87       	std	Y+13, r24	; 0x0d
     18e:	8d 85       	ldd	r24, Y+13	; 0x0d
     190:	9e 85       	ldd	r25, Y+14	; 0x0e
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <Init+0x100>
     196:	9e 87       	std	Y+14, r25	; 0x0e
     198:	8d 87       	std	Y+13, r24	; 0x0d
     19a:	00 00       	nop
     19c:	2e 96       	adiw	r28, 0x0e	; 14
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	f8 94       	cli
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	cd bf       	out	0x3d, r28	; 61
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	08 95       	ret

000001ae <Welcome_Screen>:

void Welcome_Screen(void)
{
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
     1b6:	aa 97       	sbiw	r28, 0x2a	; 42
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	cd bf       	out	0x3d, r28	; 61
	for (shift = 1; shift < 16; ++shift)
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__data_end>
     1c8:	85 c0       	rjmp	.+266    	; 0x2d4 <Welcome_Screen+0x126>
	{
		LCD_clearscreen();
     1ca:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <LCD_clearscreen>
		LCD_movecursor(1, shift);
     1ce:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
     1d2:	68 2f       	mov	r22, r24
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_movecursor>
		LCD_vSend_string("WELCOME");
     1da:	80 e6       	ldi	r24, 0x60	; 96
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_vSend_string>
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	a4 eb       	ldi	r26, 0xB4	; 180
     1e8:	b2 e4       	ldi	r27, 0x42	; 66
     1ea:	89 87       	std	Y+9, r24	; 0x09
     1ec:	9a 87       	std	Y+10, r25	; 0x0a
     1ee:	ab 87       	std	Y+11, r26	; 0x0b
     1f0:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1f2:	20 e0       	ldi	r18, 0x00	; 0
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	4a e7       	ldi	r20, 0x7A	; 122
     1f8:	55 e4       	ldi	r21, 0x45	; 69
     1fa:	69 85       	ldd	r22, Y+9	; 0x09
     1fc:	7a 85       	ldd	r23, Y+10	; 0x0a
     1fe:	8b 85       	ldd	r24, Y+11	; 0x0b
     200:	9c 85       	ldd	r25, Y+12	; 0x0c
     202:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
     206:	dc 01       	movw	r26, r24
     208:	cb 01       	movw	r24, r22
     20a:	8d 87       	std	Y+13, r24	; 0x0d
     20c:	9e 87       	std	Y+14, r25	; 0x0e
     20e:	af 87       	std	Y+15, r26	; 0x0f
     210:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	40 e8       	ldi	r20, 0x80	; 128
     218:	5f e3       	ldi	r21, 0x3F	; 63
     21a:	6d 85       	ldd	r22, Y+13	; 0x0d
     21c:	7e 85       	ldd	r23, Y+14	; 0x0e
     21e:	8f 85       	ldd	r24, Y+15	; 0x0f
     220:	98 89       	ldd	r25, Y+16	; 0x10
     222:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__cmpsf2>
     226:	88 23       	and	r24, r24
     228:	2c f4       	brge	.+10     	; 0x234 <Welcome_Screen+0x86>
		__ticks = 1;
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	9a 8b       	std	Y+18, r25	; 0x12
     230:	89 8b       	std	Y+17, r24	; 0x11
     232:	3f c0       	rjmp	.+126    	; 0x2b2 <Welcome_Screen+0x104>
	else if (__tmp > 65535)
     234:	20 e0       	ldi	r18, 0x00	; 0
     236:	3f ef       	ldi	r19, 0xFF	; 255
     238:	4f e7       	ldi	r20, 0x7F	; 127
     23a:	57 e4       	ldi	r21, 0x47	; 71
     23c:	6d 85       	ldd	r22, Y+13	; 0x0d
     23e:	7e 85       	ldd	r23, Y+14	; 0x0e
     240:	8f 85       	ldd	r24, Y+15	; 0x0f
     242:	98 89       	ldd	r25, Y+16	; 0x10
     244:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__gesf2>
     248:	18 16       	cp	r1, r24
     24a:	4c f5       	brge	.+82     	; 0x29e <Welcome_Screen+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e2       	ldi	r20, 0x20	; 32
     252:	51 e4       	ldi	r21, 0x41	; 65
     254:	69 85       	ldd	r22, Y+9	; 0x09
     256:	7a 85       	ldd	r23, Y+10	; 0x0a
     258:	8b 85       	ldd	r24, Y+11	; 0x0b
     25a:	9c 85       	ldd	r25, Y+12	; 0x0c
     25c:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
     260:	dc 01       	movw	r26, r24
     262:	cb 01       	movw	r24, r22
     264:	bc 01       	movw	r22, r24
     266:	cd 01       	movw	r24, r26
     268:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
     26c:	dc 01       	movw	r26, r24
     26e:	cb 01       	movw	r24, r22
     270:	9a 8b       	std	Y+18, r25	; 0x12
     272:	89 8b       	std	Y+17, r24	; 0x11
     274:	0f c0       	rjmp	.+30     	; 0x294 <Welcome_Screen+0xe6>
     276:	80 e9       	ldi	r24, 0x90	; 144
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	9c 8b       	std	Y+20, r25	; 0x14
     27c:	8b 8b       	std	Y+19, r24	; 0x13
     27e:	8b 89       	ldd	r24, Y+19	; 0x13
     280:	9c 89       	ldd	r25, Y+20	; 0x14
     282:	01 97       	sbiw	r24, 0x01	; 1
     284:	f1 f7       	brne	.-4      	; 0x282 <Welcome_Screen+0xd4>
     286:	9c 8b       	std	Y+20, r25	; 0x14
     288:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     28a:	89 89       	ldd	r24, Y+17	; 0x11
     28c:	9a 89       	ldd	r25, Y+18	; 0x12
     28e:	01 97       	sbiw	r24, 0x01	; 1
     290:	9a 8b       	std	Y+18, r25	; 0x12
     292:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     294:	89 89       	ldd	r24, Y+17	; 0x11
     296:	9a 89       	ldd	r25, Y+18	; 0x12
     298:	89 2b       	or	r24, r25
     29a:	69 f7       	brne	.-38     	; 0x276 <Welcome_Screen+0xc8>
     29c:	14 c0       	rjmp	.+40     	; 0x2c6 <Welcome_Screen+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     29e:	6d 85       	ldd	r22, Y+13	; 0x0d
     2a0:	7e 85       	ldd	r23, Y+14	; 0x0e
     2a2:	8f 85       	ldd	r24, Y+15	; 0x0f
     2a4:	98 89       	ldd	r25, Y+16	; 0x10
     2a6:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
     2aa:	dc 01       	movw	r26, r24
     2ac:	cb 01       	movw	r24, r22
     2ae:	9a 8b       	std	Y+18, r25	; 0x12
     2b0:	89 8b       	std	Y+17, r24	; 0x11
     2b2:	89 89       	ldd	r24, Y+17	; 0x11
     2b4:	9a 89       	ldd	r25, Y+18	; 0x12
     2b6:	9e 8b       	std	Y+22, r25	; 0x16
     2b8:	8d 8b       	std	Y+21, r24	; 0x15
     2ba:	8d 89       	ldd	r24, Y+21	; 0x15
     2bc:	9e 89       	ldd	r25, Y+22	; 0x16
     2be:	01 97       	sbiw	r24, 0x01	; 1
     2c0:	f1 f7       	brne	.-4      	; 0x2be <Welcome_Screen+0x110>
     2c2:	9e 8b       	std	Y+22, r25	; 0x16
     2c4:	8d 8b       	std	Y+21, r24	; 0x15
		_delay_ms(90);
		LCD_clearscreen();
     2c6:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <LCD_clearscreen>
	_delay_ms(150);
}

void Welcome_Screen(void)
{
	for (shift = 1; shift < 16; ++shift)
     2ca:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
     2ce:	8f 5f       	subi	r24, 0xFF	; 255
     2d0:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__data_end>
     2d4:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
     2d8:	80 31       	cpi	r24, 0x10	; 16
     2da:	08 f4       	brcc	.+2      	; 0x2de <Welcome_Screen+0x130>
     2dc:	76 cf       	rjmp	.-276    	; 0x1ca <Welcome_Screen+0x1c>
		LCD_vSend_string("WELCOME");
		_delay_ms(90);
		LCD_clearscreen();
	}

	for (shift = 16; shift > 0; --shift)
     2de:	80 e1       	ldi	r24, 0x10	; 16
     2e0:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__data_end>
     2e4:	85 c0       	rjmp	.+266    	; 0x3f0 <Welcome_Screen+0x242>
	{
		LCD_clearscreen();
     2e6:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <LCD_clearscreen>
		LCD_movecursor(1, shift);
     2ea:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
     2ee:	68 2f       	mov	r22, r24
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_movecursor>
		LCD_vSend_string("WELCOME");
     2f6:	80 e6       	ldi	r24, 0x60	; 96
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_vSend_string>
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	a4 eb       	ldi	r26, 0xB4	; 180
     304:	b2 e4       	ldi	r27, 0x42	; 66
     306:	89 83       	std	Y+1, r24	; 0x01
     308:	9a 83       	std	Y+2, r25	; 0x02
     30a:	ab 83       	std	Y+3, r26	; 0x03
     30c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	4a e7       	ldi	r20, 0x7A	; 122
     314:	55 e4       	ldi	r21, 0x45	; 69
     316:	69 81       	ldd	r22, Y+1	; 0x01
     318:	7a 81       	ldd	r23, Y+2	; 0x02
     31a:	8b 81       	ldd	r24, Y+3	; 0x03
     31c:	9c 81       	ldd	r25, Y+4	; 0x04
     31e:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
     322:	dc 01       	movw	r26, r24
     324:	cb 01       	movw	r24, r22
     326:	8f 8b       	std	Y+23, r24	; 0x17
     328:	98 8f       	std	Y+24, r25	; 0x18
     32a:	a9 8f       	std	Y+25, r26	; 0x19
     32c:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e8       	ldi	r20, 0x80	; 128
     334:	5f e3       	ldi	r21, 0x3F	; 63
     336:	6f 89       	ldd	r22, Y+23	; 0x17
     338:	78 8d       	ldd	r23, Y+24	; 0x18
     33a:	89 8d       	ldd	r24, Y+25	; 0x19
     33c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     33e:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__cmpsf2>
     342:	88 23       	and	r24, r24
     344:	2c f4       	brge	.+10     	; 0x350 <Welcome_Screen+0x1a2>
		__ticks = 1;
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	9c 8f       	std	Y+28, r25	; 0x1c
     34c:	8b 8f       	std	Y+27, r24	; 0x1b
     34e:	3f c0       	rjmp	.+126    	; 0x3ce <Welcome_Screen+0x220>
	else if (__tmp > 65535)
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	3f ef       	ldi	r19, 0xFF	; 255
     354:	4f e7       	ldi	r20, 0x7F	; 127
     356:	57 e4       	ldi	r21, 0x47	; 71
     358:	6f 89       	ldd	r22, Y+23	; 0x17
     35a:	78 8d       	ldd	r23, Y+24	; 0x18
     35c:	89 8d       	ldd	r24, Y+25	; 0x19
     35e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     360:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__gesf2>
     364:	18 16       	cp	r1, r24
     366:	4c f5       	brge	.+82     	; 0x3ba <Welcome_Screen+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	40 e2       	ldi	r20, 0x20	; 32
     36e:	51 e4       	ldi	r21, 0x41	; 65
     370:	69 81       	ldd	r22, Y+1	; 0x01
     372:	7a 81       	ldd	r23, Y+2	; 0x02
     374:	8b 81       	ldd	r24, Y+3	; 0x03
     376:	9c 81       	ldd	r25, Y+4	; 0x04
     378:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
     37c:	dc 01       	movw	r26, r24
     37e:	cb 01       	movw	r24, r22
     380:	bc 01       	movw	r22, r24
     382:	cd 01       	movw	r24, r26
     384:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	9c 8f       	std	Y+28, r25	; 0x1c
     38e:	8b 8f       	std	Y+27, r24	; 0x1b
     390:	0f c0       	rjmp	.+30     	; 0x3b0 <Welcome_Screen+0x202>
     392:	80 e9       	ldi	r24, 0x90	; 144
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	9e 8f       	std	Y+30, r25	; 0x1e
     398:	8d 8f       	std	Y+29, r24	; 0x1d
     39a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     39c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	f1 f7       	brne	.-4      	; 0x39e <Welcome_Screen+0x1f0>
     3a2:	9e 8f       	std	Y+30, r25	; 0x1e
     3a4:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	9c 8f       	std	Y+28, r25	; 0x1c
     3ae:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3b4:	89 2b       	or	r24, r25
     3b6:	69 f7       	brne	.-38     	; 0x392 <Welcome_Screen+0x1e4>
     3b8:	14 c0       	rjmp	.+40     	; 0x3e2 <Welcome_Screen+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3ba:	6f 89       	ldd	r22, Y+23	; 0x17
     3bc:	78 8d       	ldd	r23, Y+24	; 0x18
     3be:	89 8d       	ldd	r24, Y+25	; 0x19
     3c0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     3c2:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
     3c6:	dc 01       	movw	r26, r24
     3c8:	cb 01       	movw	r24, r22
     3ca:	9c 8f       	std	Y+28, r25	; 0x1c
     3cc:	8b 8f       	std	Y+27, r24	; 0x1b
     3ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3d2:	98 a3       	std	Y+32, r25	; 0x20
     3d4:	8f 8f       	std	Y+31, r24	; 0x1f
     3d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3d8:	98 a1       	ldd	r25, Y+32	; 0x20
     3da:	01 97       	sbiw	r24, 0x01	; 1
     3dc:	f1 f7       	brne	.-4      	; 0x3da <Welcome_Screen+0x22c>
     3de:	98 a3       	std	Y+32, r25	; 0x20
     3e0:	8f 8f       	std	Y+31, r24	; 0x1f
		_delay_ms(90);
		LCD_clearscreen();
     3e2:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <LCD_clearscreen>
		LCD_vSend_string("WELCOME");
		_delay_ms(90);
		LCD_clearscreen();
	}

	for (shift = 16; shift > 0; --shift)
     3e6:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
     3ea:	81 50       	subi	r24, 0x01	; 1
     3ec:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__data_end>
     3f0:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
     3f4:	88 23       	and	r24, r24
     3f6:	09 f0       	breq	.+2      	; 0x3fa <Welcome_Screen+0x24c>
     3f8:	76 cf       	rjmp	.-276    	; 0x2e6 <Welcome_Screen+0x138>
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	a6 e1       	ldi	r26, 0x16	; 22
     400:	b3 e4       	ldi	r27, 0x43	; 67
     402:	8d 83       	std	Y+5, r24	; 0x05
     404:	9e 83       	std	Y+6, r25	; 0x06
     406:	af 83       	std	Y+7, r26	; 0x07
     408:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	4a e7       	ldi	r20, 0x7A	; 122
     410:	55 e4       	ldi	r21, 0x45	; 69
     412:	6d 81       	ldd	r22, Y+5	; 0x05
     414:	7e 81       	ldd	r23, Y+6	; 0x06
     416:	8f 81       	ldd	r24, Y+7	; 0x07
     418:	98 85       	ldd	r25, Y+8	; 0x08
     41a:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
     41e:	dc 01       	movw	r26, r24
     420:	cb 01       	movw	r24, r22
     422:	89 a3       	std	Y+33, r24	; 0x21
     424:	9a a3       	std	Y+34, r25	; 0x22
     426:	ab a3       	std	Y+35, r26	; 0x23
     428:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	40 e8       	ldi	r20, 0x80	; 128
     430:	5f e3       	ldi	r21, 0x3F	; 63
     432:	69 a1       	ldd	r22, Y+33	; 0x21
     434:	7a a1       	ldd	r23, Y+34	; 0x22
     436:	8b a1       	ldd	r24, Y+35	; 0x23
     438:	9c a1       	ldd	r25, Y+36	; 0x24
     43a:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__cmpsf2>
     43e:	88 23       	and	r24, r24
     440:	2c f4       	brge	.+10     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
		__ticks = 1;
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	9e a3       	std	Y+38, r25	; 0x26
     448:	8d a3       	std	Y+37, r24	; 0x25
     44a:	3f c0       	rjmp	.+126    	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
	else if (__tmp > 65535)
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	3f ef       	ldi	r19, 0xFF	; 255
     450:	4f e7       	ldi	r20, 0x7F	; 127
     452:	57 e4       	ldi	r21, 0x47	; 71
     454:	69 a1       	ldd	r22, Y+33	; 0x21
     456:	7a a1       	ldd	r23, Y+34	; 0x22
     458:	8b a1       	ldd	r24, Y+35	; 0x23
     45a:	9c a1       	ldd	r25, Y+36	; 0x24
     45c:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__gesf2>
     460:	18 16       	cp	r1, r24
     462:	4c f5       	brge	.+82     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	40 e2       	ldi	r20, 0x20	; 32
     46a:	51 e4       	ldi	r21, 0x41	; 65
     46c:	6d 81       	ldd	r22, Y+5	; 0x05
     46e:	7e 81       	ldd	r23, Y+6	; 0x06
     470:	8f 81       	ldd	r24, Y+7	; 0x07
     472:	98 85       	ldd	r25, Y+8	; 0x08
     474:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
     478:	dc 01       	movw	r26, r24
     47a:	cb 01       	movw	r24, r22
     47c:	bc 01       	movw	r22, r24
     47e:	cd 01       	movw	r24, r26
     480:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
     484:	dc 01       	movw	r26, r24
     486:	cb 01       	movw	r24, r22
     488:	9e a3       	std	Y+38, r25	; 0x26
     48a:	8d a3       	std	Y+37, r24	; 0x25
     48c:	0f c0       	rjmp	.+30     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     48e:	80 e9       	ldi	r24, 0x90	; 144
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	98 a7       	std	Y+40, r25	; 0x28
     494:	8f a3       	std	Y+39, r24	; 0x27
     496:	8f a1       	ldd	r24, Y+39	; 0x27
     498:	98 a5       	ldd	r25, Y+40	; 0x28
     49a:	01 97       	sbiw	r24, 0x01	; 1
     49c:	f1 f7       	brne	.-4      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
     49e:	98 a7       	std	Y+40, r25	; 0x28
     4a0:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a2:	8d a1       	ldd	r24, Y+37	; 0x25
     4a4:	9e a1       	ldd	r25, Y+38	; 0x26
     4a6:	01 97       	sbiw	r24, 0x01	; 1
     4a8:	9e a3       	std	Y+38, r25	; 0x26
     4aa:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ac:	8d a1       	ldd	r24, Y+37	; 0x25
     4ae:	9e a1       	ldd	r25, Y+38	; 0x26
     4b0:	89 2b       	or	r24, r25
     4b2:	69 f7       	brne	.-38     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
     4b4:	14 c0       	rjmp	.+40     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4b6:	69 a1       	ldd	r22, Y+33	; 0x21
     4b8:	7a a1       	ldd	r23, Y+34	; 0x22
     4ba:	8b a1       	ldd	r24, Y+35	; 0x23
     4bc:	9c a1       	ldd	r25, Y+36	; 0x24
     4be:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
     4c2:	dc 01       	movw	r26, r24
     4c4:	cb 01       	movw	r24, r22
     4c6:	9e a3       	std	Y+38, r25	; 0x26
     4c8:	8d a3       	std	Y+37, r24	; 0x25
     4ca:	8d a1       	ldd	r24, Y+37	; 0x25
     4cc:	9e a1       	ldd	r25, Y+38	; 0x26
     4ce:	9a a7       	std	Y+42, r25	; 0x2a
     4d0:	89 a7       	std	Y+41, r24	; 0x29
     4d2:	89 a5       	ldd	r24, Y+41	; 0x29
     4d4:	9a a5       	ldd	r25, Y+42	; 0x2a
     4d6:	01 97       	sbiw	r24, 0x01	; 1
     4d8:	f1 f7       	brne	.-4      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
     4da:	9a a7       	std	Y+42, r25	; 0x2a
     4dc:	89 a7       	std	Y+41, r24	; 0x29
		_delay_ms(90);
		LCD_clearscreen();
	}
	
	_delay_ms(150);
	LCD_clearscreen();
     4de:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <LCD_clearscreen>
}
     4e2:	00 00       	nop
     4e4:	aa 96       	adiw	r28, 0x2a	; 42
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <IDLE_Screen>:

void IDLE_Screen(void)
{
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	2e 97       	sbiw	r28, 0x0e	; 14
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	de bf       	out	0x3e, r29	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	cd bf       	out	0x3d, r28	; 61
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	a0 e7       	ldi	r26, 0x70	; 112
     510:	b1 e4       	ldi	r27, 0x41	; 65
     512:	89 83       	std	Y+1, r24	; 0x01
     514:	9a 83       	std	Y+2, r25	; 0x02
     516:	ab 83       	std	Y+3, r26	; 0x03
     518:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	4a e7       	ldi	r20, 0x7A	; 122
     520:	55 e4       	ldi	r21, 0x45	; 69
     522:	69 81       	ldd	r22, Y+1	; 0x01
     524:	7a 81       	ldd	r23, Y+2	; 0x02
     526:	8b 81       	ldd	r24, Y+3	; 0x03
     528:	9c 81       	ldd	r25, Y+4	; 0x04
     52a:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
     52e:	dc 01       	movw	r26, r24
     530:	cb 01       	movw	r24, r22
     532:	8d 83       	std	Y+5, r24	; 0x05
     534:	9e 83       	std	Y+6, r25	; 0x06
     536:	af 83       	std	Y+7, r26	; 0x07
     538:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	40 e8       	ldi	r20, 0x80	; 128
     540:	5f e3       	ldi	r21, 0x3F	; 63
     542:	6d 81       	ldd	r22, Y+5	; 0x05
     544:	7e 81       	ldd	r23, Y+6	; 0x06
     546:	8f 81       	ldd	r24, Y+7	; 0x07
     548:	98 85       	ldd	r25, Y+8	; 0x08
     54a:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__cmpsf2>
     54e:	88 23       	and	r24, r24
     550:	2c f4       	brge	.+10     	; 0x55c <IDLE_Screen+0x66>
		__ticks = 1;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	9a 87       	std	Y+10, r25	; 0x0a
     558:	89 87       	std	Y+9, r24	; 0x09
     55a:	3f c0       	rjmp	.+126    	; 0x5da <IDLE_Screen+0xe4>
	else if (__tmp > 65535)
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	3f ef       	ldi	r19, 0xFF	; 255
     560:	4f e7       	ldi	r20, 0x7F	; 127
     562:	57 e4       	ldi	r21, 0x47	; 71
     564:	6d 81       	ldd	r22, Y+5	; 0x05
     566:	7e 81       	ldd	r23, Y+6	; 0x06
     568:	8f 81       	ldd	r24, Y+7	; 0x07
     56a:	98 85       	ldd	r25, Y+8	; 0x08
     56c:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__gesf2>
     570:	18 16       	cp	r1, r24
     572:	4c f5       	brge	.+82     	; 0x5c6 <IDLE_Screen+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	40 e2       	ldi	r20, 0x20	; 32
     57a:	51 e4       	ldi	r21, 0x41	; 65
     57c:	69 81       	ldd	r22, Y+1	; 0x01
     57e:	7a 81       	ldd	r23, Y+2	; 0x02
     580:	8b 81       	ldd	r24, Y+3	; 0x03
     582:	9c 81       	ldd	r25, Y+4	; 0x04
     584:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
     588:	dc 01       	movw	r26, r24
     58a:	cb 01       	movw	r24, r22
     58c:	bc 01       	movw	r22, r24
     58e:	cd 01       	movw	r24, r26
     590:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
     594:	dc 01       	movw	r26, r24
     596:	cb 01       	movw	r24, r22
     598:	9a 87       	std	Y+10, r25	; 0x0a
     59a:	89 87       	std	Y+9, r24	; 0x09
     59c:	0f c0       	rjmp	.+30     	; 0x5bc <IDLE_Screen+0xc6>
     59e:	80 e9       	ldi	r24, 0x90	; 144
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	9c 87       	std	Y+12, r25	; 0x0c
     5a4:	8b 87       	std	Y+11, r24	; 0x0b
     5a6:	8b 85       	ldd	r24, Y+11	; 0x0b
     5a8:	9c 85       	ldd	r25, Y+12	; 0x0c
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <IDLE_Screen+0xb4>
     5ae:	9c 87       	std	Y+12, r25	; 0x0c
     5b0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5b2:	89 85       	ldd	r24, Y+9	; 0x09
     5b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b6:	01 97       	sbiw	r24, 0x01	; 1
     5b8:	9a 87       	std	Y+10, r25	; 0x0a
     5ba:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5bc:	89 85       	ldd	r24, Y+9	; 0x09
     5be:	9a 85       	ldd	r25, Y+10	; 0x0a
     5c0:	89 2b       	or	r24, r25
     5c2:	69 f7       	brne	.-38     	; 0x59e <IDLE_Screen+0xa8>
     5c4:	14 c0       	rjmp	.+40     	; 0x5ee <IDLE_Screen+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5c6:	6d 81       	ldd	r22, Y+5	; 0x05
     5c8:	7e 81       	ldd	r23, Y+6	; 0x06
     5ca:	8f 81       	ldd	r24, Y+7	; 0x07
     5cc:	98 85       	ldd	r25, Y+8	; 0x08
     5ce:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
     5d2:	dc 01       	movw	r26, r24
     5d4:	cb 01       	movw	r24, r22
     5d6:	9a 87       	std	Y+10, r25	; 0x0a
     5d8:	89 87       	std	Y+9, r24	; 0x09
     5da:	89 85       	ldd	r24, Y+9	; 0x09
     5dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5de:	9e 87       	std	Y+14, r25	; 0x0e
     5e0:	8d 87       	std	Y+13, r24	; 0x0d
     5e2:	8d 85       	ldd	r24, Y+13	; 0x0d
     5e4:	9e 85       	ldd	r25, Y+14	; 0x0e
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <IDLE_Screen+0xf0>
     5ea:	9e 87       	std	Y+14, r25	; 0x0e
     5ec:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(15);
	LCD_movecursor(1, 1);
     5ee:	61 e0       	ldi	r22, 0x01	; 1
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_movecursor>
	LCD_vSend_string("SET:25");
     5f6:	88 e6       	ldi	r24, 0x68	; 104
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_vSend_string>
	LCD_movecursor(1, 11);
     5fe:	6b e0       	ldi	r22, 0x0B	; 11
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_movecursor>
	LCD_vSend_string("CRT:");
     606:	8f e6       	ldi	r24, 0x6F	; 111
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_vSend_string>
	LCD_movecursor(2, 1);
     60e:	61 e0       	ldi	r22, 0x01	; 1
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_movecursor>
	LCD_vSend_string("STATE:STANDBY");
     616:	84 e7       	ldi	r24, 0x74	; 116
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_vSend_string>
}
     61e:	00 00       	nop
     620:	2e 96       	adiw	r28, 0x0e	; 14
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <UsrGetVal>:

void UsrGetVal(void)
{
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
	static u8 val = 0;
	static const u8 col = 5;
	static u8 counter = 0;
	
	LCD_movecursor(1, (counter + col));
     63a:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <counter.2401>
     63e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <col.2400>
     642:	89 0f       	add	r24, r25
     644:	68 2f       	mov	r22, r24
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_movecursor>
	
	while (val != '*' && val != '#')
     64c:	32 c0       	rjmp	.+100    	; 0x6b2 <UsrGetVal+0x80>
	{
		//val != '*' && val != '#'
		val = getKey();
     64e:	0e 94 97 08 	call	0x112e	; 0x112e <getKey>
     652:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <val.2399>
		
		if (val != '*' && val != '#')
     656:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <val.2399>
     65a:	8a 32       	cpi	r24, 0x2A	; 42
     65c:	e9 f0       	breq	.+58     	; 0x698 <UsrGetVal+0x66>
     65e:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <val.2399>
     662:	83 32       	cpi	r24, 0x23	; 35
     664:	c9 f0       	breq	.+50     	; 0x698 <UsrGetVal+0x66>
		{
			LCD_vSend_char(val);
     666:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <val.2399>
     66a:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <LCD_vSend_char>
			temp[counter] = val;
     66e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <counter.2401>
     672:	88 2f       	mov	r24, r24
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	20 91 cf 00 	lds	r18, 0x00CF	; 0x8000cf <val.2399>
     67a:	8d 54       	subi	r24, 0x4D	; 77
     67c:	9f 4f       	sbci	r25, 0xFF	; 255
     67e:	fc 01       	movw	r30, r24
     680:	20 83       	st	Z, r18
			counter = counter + 1;
     682:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <counter.2401>
     686:	8f 5f       	subi	r24, 0xFF	; 255
     688:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <counter.2401>
			counter = counter % 2;
     68c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <counter.2401>
     690:	81 70       	andi	r24, 0x01	; 1
     692:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <counter.2401>
     696:	0d c0       	rjmp	.+26     	; 0x6b2 <UsrGetVal+0x80>
		}
		else
		{
			SetTemp = atoi(temp);
     698:	83 eb       	ldi	r24, 0xB3	; 179
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <atoi>
     6a0:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <SetTemp+0x1>
     6a4:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <SetTemp>
			hash_pressed = 1;
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <hash_pressed>
			break;
     6ae:	00 00       	nop
		}
	}
}
     6b0:	08 c0       	rjmp	.+16     	; 0x6c2 <UsrGetVal+0x90>
	static const u8 col = 5;
	static u8 counter = 0;
	
	LCD_movecursor(1, (counter + col));
	
	while (val != '*' && val != '#')
     6b2:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <val.2399>
     6b6:	8a 32       	cpi	r24, 0x2A	; 42
     6b8:	21 f0       	breq	.+8      	; 0x6c2 <UsrGetVal+0x90>
     6ba:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <val.2399>
     6be:	83 32       	cpi	r24, 0x23	; 35
     6c0:	31 f6       	brne	.-116    	; 0x64e <UsrGetVal+0x1c>
			SetTemp = atoi(temp);
			hash_pressed = 1;
			break;
		}
	}
}
     6c2:	00 00       	nop
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <tc72_read>:

c8 tc72_read(void)
{
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	2f 97       	sbiw	r28, 0x0f	; 15
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	cd bf       	out	0x3d, r28	; 61
    c8 MSB = 0;
     6de:	19 82       	std	Y+1, r1	; 0x01
	/* MSB */
	SPI_PORT |= (1 << SS);
     6e0:	88 e3       	ldi	r24, 0x38	; 56
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	28 e3       	ldi	r18, 0x38	; 56
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	f9 01       	movw	r30, r18
     6ea:	20 81       	ld	r18, Z
     6ec:	20 61       	ori	r18, 0x10	; 16
     6ee:	fc 01       	movw	r30, r24
     6f0:	20 83       	st	Z, r18
	SPI_masterTransmit(0x02);            /* Read will be from MSB temperature register */
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	0e 94 ad 13 	call	0x275a	; 0x275a <SPI_masterTransmit>
	SPI_masterTransmit(0x00);
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	0e 94 ad 13 	call	0x275a	; 0x275a <SPI_masterTransmit>
	SPI_PORT &= ~(1 << SS);
     6fe:	88 e3       	ldi	r24, 0x38	; 56
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	28 e3       	ldi	r18, 0x38	; 56
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	f9 01       	movw	r30, r18
     708:	20 81       	ld	r18, Z
     70a:	2f 7e       	andi	r18, 0xEF	; 239
     70c:	fc 01       	movw	r30, r24
     70e:	20 83       	st	Z, r18
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	a0 e8       	ldi	r26, 0x80	; 128
     716:	bf e3       	ldi	r27, 0x3F	; 63
     718:	8a 83       	std	Y+2, r24	; 0x02
     71a:	9b 83       	std	Y+3, r25	; 0x03
     71c:	ac 83       	std	Y+4, r26	; 0x04
     71e:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	4a e7       	ldi	r20, 0x7A	; 122
     726:	55 e4       	ldi	r21, 0x45	; 69
     728:	6a 81       	ldd	r22, Y+2	; 0x02
     72a:	7b 81       	ldd	r23, Y+3	; 0x03
     72c:	8c 81       	ldd	r24, Y+4	; 0x04
     72e:	9d 81       	ldd	r25, Y+5	; 0x05
     730:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
     734:	dc 01       	movw	r26, r24
     736:	cb 01       	movw	r24, r22
     738:	8e 83       	std	Y+6, r24	; 0x06
     73a:	9f 83       	std	Y+7, r25	; 0x07
     73c:	a8 87       	std	Y+8, r26	; 0x08
     73e:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	40 e8       	ldi	r20, 0x80	; 128
     746:	5f e3       	ldi	r21, 0x3F	; 63
     748:	6e 81       	ldd	r22, Y+6	; 0x06
     74a:	7f 81       	ldd	r23, Y+7	; 0x07
     74c:	88 85       	ldd	r24, Y+8	; 0x08
     74e:	99 85       	ldd	r25, Y+9	; 0x09
     750:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__cmpsf2>
     754:	88 23       	and	r24, r24
     756:	2c f4       	brge	.+10     	; 0x762 <tc72_read+0x98>
		__ticks = 1;
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	9b 87       	std	Y+11, r25	; 0x0b
     75e:	8a 87       	std	Y+10, r24	; 0x0a
     760:	3f c0       	rjmp	.+126    	; 0x7e0 <tc72_read+0x116>
	else if (__tmp > 65535)
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	3f ef       	ldi	r19, 0xFF	; 255
     766:	4f e7       	ldi	r20, 0x7F	; 127
     768:	57 e4       	ldi	r21, 0x47	; 71
     76a:	6e 81       	ldd	r22, Y+6	; 0x06
     76c:	7f 81       	ldd	r23, Y+7	; 0x07
     76e:	88 85       	ldd	r24, Y+8	; 0x08
     770:	99 85       	ldd	r25, Y+9	; 0x09
     772:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__gesf2>
     776:	18 16       	cp	r1, r24
     778:	4c f5       	brge	.+82     	; 0x7cc <tc72_read+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	40 e2       	ldi	r20, 0x20	; 32
     780:	51 e4       	ldi	r21, 0x41	; 65
     782:	6a 81       	ldd	r22, Y+2	; 0x02
     784:	7b 81       	ldd	r23, Y+3	; 0x03
     786:	8c 81       	ldd	r24, Y+4	; 0x04
     788:	9d 81       	ldd	r25, Y+5	; 0x05
     78a:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
     78e:	dc 01       	movw	r26, r24
     790:	cb 01       	movw	r24, r22
     792:	bc 01       	movw	r22, r24
     794:	cd 01       	movw	r24, r26
     796:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
     79a:	dc 01       	movw	r26, r24
     79c:	cb 01       	movw	r24, r22
     79e:	9b 87       	std	Y+11, r25	; 0x0b
     7a0:	8a 87       	std	Y+10, r24	; 0x0a
     7a2:	0f c0       	rjmp	.+30     	; 0x7c2 <tc72_read+0xf8>
     7a4:	80 e9       	ldi	r24, 0x90	; 144
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	9d 87       	std	Y+13, r25	; 0x0d
     7aa:	8c 87       	std	Y+12, r24	; 0x0c
     7ac:	8c 85       	ldd	r24, Y+12	; 0x0c
     7ae:	9d 85       	ldd	r25, Y+13	; 0x0d
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <tc72_read+0xe6>
     7b4:	9d 87       	std	Y+13, r25	; 0x0d
     7b6:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7b8:	8a 85       	ldd	r24, Y+10	; 0x0a
     7ba:	9b 85       	ldd	r25, Y+11	; 0x0b
     7bc:	01 97       	sbiw	r24, 0x01	; 1
     7be:	9b 87       	std	Y+11, r25	; 0x0b
     7c0:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7c2:	8a 85       	ldd	r24, Y+10	; 0x0a
     7c4:	9b 85       	ldd	r25, Y+11	; 0x0b
     7c6:	89 2b       	or	r24, r25
     7c8:	69 f7       	brne	.-38     	; 0x7a4 <tc72_read+0xda>
     7ca:	14 c0       	rjmp	.+40     	; 0x7f4 <tc72_read+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7cc:	6e 81       	ldd	r22, Y+6	; 0x06
     7ce:	7f 81       	ldd	r23, Y+7	; 0x07
     7d0:	88 85       	ldd	r24, Y+8	; 0x08
     7d2:	99 85       	ldd	r25, Y+9	; 0x09
     7d4:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
     7d8:	dc 01       	movw	r26, r24
     7da:	cb 01       	movw	r24, r22
     7dc:	9b 87       	std	Y+11, r25	; 0x0b
     7de:	8a 87       	std	Y+10, r24	; 0x0a
     7e0:	8a 85       	ldd	r24, Y+10	; 0x0a
     7e2:	9b 85       	ldd	r25, Y+11	; 0x0b
     7e4:	9f 87       	std	Y+15, r25	; 0x0f
     7e6:	8e 87       	std	Y+14, r24	; 0x0e
     7e8:	8e 85       	ldd	r24, Y+14	; 0x0e
     7ea:	9f 85       	ldd	r25, Y+15	; 0x0f
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <tc72_read+0x122>
     7f0:	9f 87       	std	Y+15, r25	; 0x0f
     7f2:	8e 87       	std	Y+14, r24	; 0x0e

	_delay_ms(1);
	MSB = SPI_masterReceive();
     7f4:	0e 94 c4 13 	call	0x2788	; 0x2788 <SPI_masterReceive>
     7f8:	89 83       	std	Y+1, r24	; 0x01
		
	return MSB;
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     7fc:	2f 96       	adiw	r28, 0x0f	; 15
     7fe:	0f b6       	in	r0, 0x3f	; 63
     800:	f8 94       	cli
     802:	de bf       	out	0x3e, r29	; 62
     804:	0f be       	out	0x3f, r0	; 63
     806:	cd bf       	out	0x3d, r28	; 61
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	08 95       	ret

0000080e <CRT_Temp>:

void CRT_Temp(void)
{
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	00 d0       	rcall	.+0      	; 0x814 <CRT_Temp+0x6>
     814:	00 d0       	rcall	.+0      	; 0x816 <CRT_Temp+0x8>
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
	u8 value = 0;
     81a:	19 82       	std	Y+1, r1	; 0x01

	c8 CurrentTempString[2];
	c8 MSB = tc72_read();
     81c:	0e 94 65 03 	call	0x6ca	; 0x6ca <tc72_read>
     820:	8a 83       	std	Y+2, r24	; 0x02
	itoa(MSB, CurrentTempString, 10);
     822:	8a 81       	ldd	r24, Y+2	; 0x02
     824:	88 2f       	mov	r24, r24
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	9e 01       	movw	r18, r28
     82a:	2d 5f       	subi	r18, 0xFD	; 253
     82c:	3f 4f       	sbci	r19, 0xFF	; 255
     82e:	4a e0       	ldi	r20, 0x0A	; 10
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	b9 01       	movw	r22, r18
     834:	0e 94 e5 16 	call	0x2dca	; 0x2dca <itoa>
		
	LCD_movecursor(1, 15);
     838:	6f e0       	ldi	r22, 0x0F	; 15
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_movecursor>
	LCD_vSend_string(CurrentTempString);
     840:	ce 01       	movw	r24, r28
     842:	03 96       	adiw	r24, 0x03	; 3
     844:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_vSend_string>
	CrtTemp = atoi(CurrentTempString);
     848:	ce 01       	movw	r24, r28
     84a:	03 96       	adiw	r24, 0x03	; 3
     84c:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <atoi>
     850:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <CrtTemp+0x1>
     854:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <CrtTemp>
}
     858:	00 00       	nop
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <getCurrentTemp>:

u16 getCurrentTemp(void)
{
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
	return CrtTemp;
     870:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <CrtTemp>
     874:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <CrtTemp+0x1>
}
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	08 95       	ret

0000087e <getSetTemp>:

u16 getSetTemp(void)
{
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62
	return SetTemp;
     886:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <SetTemp>
     88a:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <SetTemp+0x1>
}
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <GetVt>:

float64_t GetVt(void)
{
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
	Vt = (float64_t) ((getSetTemp() - getCurrentTemp()) / 100.0) * 10.0;
     8a0:	0e 94 3f 04 	call	0x87e	; 0x87e <getSetTemp>
     8a4:	8c 01       	movw	r16, r24
     8a6:	0e 94 34 04 	call	0x868	; 0x868 <getCurrentTemp>
     8aa:	98 01       	movw	r18, r16
     8ac:	28 1b       	sub	r18, r24
     8ae:	39 0b       	sbc	r19, r25
     8b0:	c9 01       	movw	r24, r18
     8b2:	cc 01       	movw	r24, r24
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	bc 01       	movw	r22, r24
     8ba:	cd 01       	movw	r24, r26
     8bc:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__floatunsisf>
     8c0:	dc 01       	movw	r26, r24
     8c2:	cb 01       	movw	r24, r22
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	48 ec       	ldi	r20, 0xC8	; 200
     8ca:	52 e4       	ldi	r21, 0x42	; 66
     8cc:	bc 01       	movw	r22, r24
     8ce:	cd 01       	movw	r24, r26
     8d0:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__divsf3>
     8d4:	dc 01       	movw	r26, r24
     8d6:	cb 01       	movw	r24, r22
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	40 e2       	ldi	r20, 0x20	; 32
     8de:	51 e4       	ldi	r21, 0x41	; 65
     8e0:	bc 01       	movw	r22, r24
     8e2:	cd 01       	movw	r24, r26
     8e4:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
     8e8:	dc 01       	movw	r26, r24
     8ea:	cb 01       	movw	r24, r22
     8ec:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <Vt>
     8f0:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <Vt+0x1>
     8f4:	a0 93 c4 00 	sts	0x00C4, r26	; 0x8000c4 <Vt+0x2>
     8f8:	b0 93 c5 00 	sts	0x00C5, r27	; 0x8000c5 <Vt+0x3>
	return Vt;
     8fc:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <Vt>
     900:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <Vt+0x1>
     904:	a0 91 c4 00 	lds	r26, 0x00C4	; 0x8000c4 <Vt+0x2>
     908:	b0 91 c5 00 	lds	r27, 0x00C5	; 0x8000c5 <Vt+0x3>
}
     90c:	bc 01       	movw	r22, r24
     90e:	cd 01       	movw	r24, r26
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	08 95       	ret

0000091a <getADCVal>:

float64_t getADCVal(void)
{
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	00 d0       	rcall	.+0      	; 0x920 <getADCVal+0x6>
     920:	00 d0       	rcall	.+0      	; 0x922 <getADCVal+0x8>
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
	initADC0();
     926:	0e 94 5d 10 	call	0x20ba	; 0x20ba <initADC0>
	u32 result = adc_read();
     92a:	0e 94 77 10 	call	0x20ee	; 0x20ee <adc_read>
     92e:	dc 01       	movw	r26, r24
     930:	cb 01       	movw	r24, r22
     932:	89 83       	std	Y+1, r24	; 0x01
     934:	9a 83       	std	Y+2, r25	; 0x02
     936:	ab 83       	std	Y+3, r26	; 0x03
     938:	bc 83       	std	Y+4, r27	; 0x04
	Vr = sampleToVolts(result);
     93a:	89 81       	ldd	r24, Y+1	; 0x01
     93c:	9a 81       	ldd	r25, Y+2	; 0x02
     93e:	ab 81       	ldd	r26, Y+3	; 0x03
     940:	bc 81       	ldd	r27, Y+4	; 0x04
     942:	bc 01       	movw	r22, r24
     944:	cd 01       	movw	r24, r26
     946:	0e 94 9c 10 	call	0x2138	; 0x2138 <sampleToVolts>
     94a:	88 2f       	mov	r24, r24
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	a0 e0       	ldi	r26, 0x00	; 0
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	bc 01       	movw	r22, r24
     954:	cd 01       	movw	r24, r26
     956:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__floatunsisf>
     95a:	dc 01       	movw	r26, r24
     95c:	cb 01       	movw	r24, r22
     95e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <Vr>
     962:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <Vr+0x1>
     966:	a0 93 c8 00 	sts	0x00C8, r26	; 0x8000c8 <Vr+0x2>
     96a:	b0 93 c9 00 	sts	0x00C9, r27	; 0x8000c9 <Vr+0x3>
	
	return Vr;
     96e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <Vr>
     972:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <Vr+0x1>
     976:	a0 91 c8 00 	lds	r26, 0x00C8	; 0x8000c8 <Vr+0x2>
     97a:	b0 91 c9 00 	lds	r27, 0x00C9	; 0x8000c9 <Vr+0x3>
}
     97e:	bc 01       	movw	r22, r24
     980:	cd 01       	movw	r24, r26
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <drivePWM>:

void drivePWM(void)
{
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
     998:	28 97       	sbiw	r28, 0x08	; 8
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	f8 94       	cli
     99e:	de bf       	out	0x3e, r29	; 62
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	cd bf       	out	0x3d, r28	; 61
	InitPWM();
     9a4:	0e 94 79 07 	call	0xef2	; 0xef2 <InitPWM>
	float64_t Vt = GetVt();
     9a8:	0e 94 4a 04 	call	0x894	; 0x894 <GetVt>
     9ac:	dc 01       	movw	r26, r24
     9ae:	cb 01       	movw	r24, r22
     9b0:	89 83       	std	Y+1, r24	; 0x01
     9b2:	9a 83       	std	Y+2, r25	; 0x02
     9b4:	ab 83       	std	Y+3, r26	; 0x03
     9b6:	bc 83       	std	Y+4, r27	; 0x04
	float64_t Vr = getADCVal();
     9b8:	0e 94 8d 04 	call	0x91a	; 0x91a <getADCVal>
     9bc:	dc 01       	movw	r26, r24
     9be:	cb 01       	movw	r24, r22
     9c0:	8d 83       	std	Y+5, r24	; 0x05
     9c2:	9e 83       	std	Y+6, r25	; 0x06
     9c4:	af 83       	std	Y+7, r26	; 0x07
     9c6:	b8 87       	std	Y+8, r27	; 0x08
	SetPWMOutput(Vr, Vt);
     9c8:	29 81       	ldd	r18, Y+1	; 0x01
     9ca:	3a 81       	ldd	r19, Y+2	; 0x02
     9cc:	4b 81       	ldd	r20, Y+3	; 0x03
     9ce:	5c 81       	ldd	r21, Y+4	; 0x04
     9d0:	8d 81       	ldd	r24, Y+5	; 0x05
     9d2:	9e 81       	ldd	r25, Y+6	; 0x06
     9d4:	af 81       	ldd	r26, Y+7	; 0x07
     9d6:	b8 85       	ldd	r27, Y+8	; 0x08
     9d8:	bc 01       	movw	r22, r24
     9da:	cd 01       	movw	r24, r26
     9dc:	0e 94 9a 07 	call	0xf34	; 0xf34 <SetPWMOutput>
}
     9e0:	00 00       	nop
     9e2:	28 96       	adiw	r28, 0x08	; 8
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	08 95       	ret

000009f4 <setCountMinutes>:

// FLAG setter
void setCountMinutes(void)
{
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
	countMinutes = 1;
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <countMinutes>
}
     a02:	00 00       	nop
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <setCheckTemp>:
void setCheckTemp(void)
{
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	cd b7       	in	r28, 0x3d	; 61
     a10:	de b7       	in	r29, 0x3e	; 62
	checkTemp = 1;
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <checkTemp>
}
     a18:	00 00       	nop
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	08 95       	ret

00000a20 <setVoltModule>:
void setVoltModule(void)
{
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
	voltModule = 1;
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <voltModule>
}
     a2e:	00 00       	nop
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <setOverHeating>:
void setOverHeating(void)
{
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	cd b7       	in	r28, 0x3d	; 61
     a3c:	de b7       	in	r29, 0x3e	; 62
	overHeating = 1;
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <overHeating>
}
     a44:	00 00       	nop
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	08 95       	ret

00000a4c <setPoteinVal>:
void setPoteinVal(void)
{
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
	poteinVal = 1;
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <poteinVal>
}
     a5a:	00 00       	nop
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <clearCountMinutes>:

// FLAG clear
void clearCountMinutes(void)
{
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
	countMinutes = 0;
     a6a:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <countMinutes>
	minute_counter = 0;
     a6e:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <minute_counter+0x1>
     a72:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <minute_counter>
	minutes_elapsed = 0;
     a76:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <minutes_elapsed>
}
     a7a:	00 00       	nop
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <clearCheckTemp>:
void clearCheckTemp(void)
{
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
	checkTemp = 0;
     a8a:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <checkTemp>
}
     a8e:	00 00       	nop
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	08 95       	ret

00000a96 <clearVoltModule>:
void clearVoltModule(void)
{
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	cd b7       	in	r28, 0x3d	; 61
     a9c:	de b7       	in	r29, 0x3e	; 62
	voltModule = 0;
     a9e:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <voltModule>
}
     aa2:	00 00       	nop
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <clearOverHeating>:
void clearOverHeating(void)
{
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
	overHeating = 0;
     ab2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <overHeating>
}
     ab6:	00 00       	nop
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <clearPoteinVal>:
void clearPoteinVal(void)
{
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
	poteinVal = 0;
     ac6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <poteinVal>
}
     aca:	00 00       	nop
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	08 95       	ret

00000ad2 <__vector_4>:

// ______________________

ISR (TIMER2_COMP_vect)
{
     ad2:	1f 92       	push	r1
     ad4:	0f 92       	push	r0
     ad6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     ada:	0f 92       	push	r0
     adc:	11 24       	eor	r1, r1
     ade:	2f 93       	push	r18
     ae0:	3f 93       	push	r19
     ae2:	4f 93       	push	r20
     ae4:	5f 93       	push	r21
     ae6:	6f 93       	push	r22
     ae8:	7f 93       	push	r23
     aea:	8f 93       	push	r24
     aec:	9f 93       	push	r25
     aee:	af 93       	push	r26
     af0:	bf 93       	push	r27
     af2:	ef 93       	push	r30
     af4:	ff 93       	push	r31
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
	schedule();
     afe:	0e 94 96 05 	call	0xb2c	; 0xb2c <schedule>
}
     b02:	00 00       	nop
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	ff 91       	pop	r31
     b0a:	ef 91       	pop	r30
     b0c:	bf 91       	pop	r27
     b0e:	af 91       	pop	r26
     b10:	9f 91       	pop	r25
     b12:	8f 91       	pop	r24
     b14:	7f 91       	pop	r23
     b16:	6f 91       	pop	r22
     b18:	5f 91       	pop	r21
     b1a:	4f 91       	pop	r20
     b1c:	3f 91       	pop	r19
     b1e:	2f 91       	pop	r18
     b20:	0f 90       	pop	r0
     b22:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     b26:	0f 90       	pop	r0
     b28:	1f 90       	pop	r1
     b2a:	18 95       	reti

00000b2c <schedule>:

void schedule(void)
{
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
	ms_elapsed = ms_elapsed + 1;
     b34:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <ms_elapsed>
     b38:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <ms_elapsed+0x1>
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <ms_elapsed+0x1>
     b42:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <ms_elapsed>
	setState();
     b46:	0e 94 4a 06 	call	0xc94	; 0xc94 <setState>
	//if (!(ms_elapsed % 1))
	//{
		//setState();
	//}

	if (ms_elapsed % 200)
     b4a:	40 91 b8 00 	lds	r20, 0x00B8	; 0x8000b8 <ms_elapsed>
     b4e:	50 91 b9 00 	lds	r21, 0x00B9	; 0x8000b9 <ms_elapsed+0x1>
     b52:	ca 01       	movw	r24, r20
     b54:	96 95       	lsr	r25
     b56:	87 95       	ror	r24
     b58:	96 95       	lsr	r25
     b5a:	87 95       	ror	r24
     b5c:	96 95       	lsr	r25
     b5e:	87 95       	ror	r24
     b60:	9c 01       	movw	r18, r24
     b62:	ab e7       	ldi	r26, 0x7B	; 123
     b64:	b4 e1       	ldi	r27, 0x14	; 20
     b66:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__umulhisi3>
     b6a:	96 95       	lsr	r25
     b6c:	87 95       	ror	r24
     b6e:	68 ec       	ldi	r22, 0xC8	; 200
     b70:	68 9f       	mul	r22, r24
     b72:	90 01       	movw	r18, r0
     b74:	69 9f       	mul	r22, r25
     b76:	30 0d       	add	r19, r0
     b78:	11 24       	eor	r1, r1
     b7a:	ca 01       	movw	r24, r20
     b7c:	82 1b       	sub	r24, r18
     b7e:	93 0b       	sbc	r25, r19
     b80:	89 2b       	or	r24, r25
     b82:	61 f0       	breq	.+24     	; 0xb9c <schedule+0x70>
	{
		if (checkTemp)
     b84:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <checkTemp>
     b88:	88 23       	and	r24, r24
     b8a:	11 f0       	breq	.+4      	; 0xb90 <schedule+0x64>
		{
			CRT_Temp();
     b8c:	0e 94 07 04 	call	0x80e	; 0x80e <CRT_Temp>
		}
		if (voltModule)
     b90:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <voltModule>
     b94:	88 23       	and	r24, r24
     b96:	11 f0       	breq	.+4      	; 0xb9c <schedule+0x70>
		{
			drivePWM();
     b98:	0e 94 c8 04 	call	0x990	; 0x990 <drivePWM>
		}
	}
	
	if (ms_elapsed % 500)
     b9c:	40 91 b8 00 	lds	r20, 0x00B8	; 0x8000b8 <ms_elapsed>
     ba0:	50 91 b9 00 	lds	r21, 0x00B9	; 0x8000b9 <ms_elapsed+0x1>
     ba4:	ca 01       	movw	r24, r20
     ba6:	96 95       	lsr	r25
     ba8:	87 95       	ror	r24
     baa:	96 95       	lsr	r25
     bac:	87 95       	ror	r24
     bae:	9c 01       	movw	r18, r24
     bb0:	a5 ec       	ldi	r26, 0xC5	; 197
     bb2:	b0 e2       	ldi	r27, 0x20	; 32
     bb4:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__umulhisi3>
     bb8:	92 95       	swap	r25
     bba:	82 95       	swap	r24
     bbc:	8f 70       	andi	r24, 0x0F	; 15
     bbe:	89 27       	eor	r24, r25
     bc0:	9f 70       	andi	r25, 0x0F	; 15
     bc2:	89 27       	eor	r24, r25
     bc4:	64 ef       	ldi	r22, 0xF4	; 244
     bc6:	71 e0       	ldi	r23, 0x01	; 1
     bc8:	86 9f       	mul	r24, r22
     bca:	90 01       	movw	r18, r0
     bcc:	87 9f       	mul	r24, r23
     bce:	30 0d       	add	r19, r0
     bd0:	96 9f       	mul	r25, r22
     bd2:	30 0d       	add	r19, r0
     bd4:	11 24       	eor	r1, r1
     bd6:	ca 01       	movw	r24, r20
     bd8:	82 1b       	sub	r24, r18
     bda:	93 0b       	sbc	r25, r19
     bdc:	89 2b       	or	r24, r25
     bde:	31 f0       	breq	.+12     	; 0xbec <schedule+0xc0>
	{
		if (poteinVal)
     be0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <poteinVal>
     be4:	88 23       	and	r24, r24
     be6:	11 f0       	breq	.+4      	; 0xbec <schedule+0xc0>
		{
			getADCVal();
     be8:	0e 94 8d 04 	call	0x91a	; 0x91a <getADCVal>
		{
			/* Do nothing */
		}
	}

	if (minutes_elapsed % 3)
     bec:	20 91 ba 00 	lds	r18, 0x00BA	; 0x8000ba <minutes_elapsed>
     bf0:	8b ea       	ldi	r24, 0xAB	; 171
     bf2:	28 9f       	mul	r18, r24
     bf4:	81 2d       	mov	r24, r1
     bf6:	11 24       	eor	r1, r1
     bf8:	98 2f       	mov	r25, r24
     bfa:	96 95       	lsr	r25
     bfc:	89 2f       	mov	r24, r25
     bfe:	88 0f       	add	r24, r24
     c00:	89 0f       	add	r24, r25
     c02:	92 2f       	mov	r25, r18
     c04:	98 1b       	sub	r25, r24
     c06:	99 23       	and	r25, r25
     c08:	31 f0       	breq	.+12     	; 0xc16 <schedule+0xea>
	{
		if (overHeating)
     c0a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <overHeating>
     c0e:	88 23       	and	r24, r24
     c10:	11 f0       	breq	.+4      	; 0xc16 <schedule+0xea>
		{
			setErrorFlag();
     c12:	0e 94 3f 06 	call	0xc7e	; 0xc7e <setErrorFlag>
		}
	}

	if (countMinutes)
     c16:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <countMinutes>
     c1a:	88 23       	and	r24, r24
     c1c:	49 f0       	breq	.+18     	; 0xc30 <schedule+0x104>
	{
		minute_counter = minute_counter + 1;
     c1e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <minute_counter>
     c22:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <minute_counter+0x1>
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <minute_counter+0x1>
     c2c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <minute_counter>
	}
	if (minute_counter % 60000)
     c30:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <minute_counter>
     c34:	30 91 bc 00 	lds	r19, 0x00BC	; 0x8000bc <minute_counter+0x1>
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	20 36       	cpi	r18, 0x60	; 96
     c3e:	4a ee       	ldi	r20, 0xEA	; 234
     c40:	34 07       	cpc	r19, r20
     c42:	10 f4       	brcc	.+4      	; 0xc48 <schedule+0x11c>
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	60 e6       	ldi	r22, 0x60	; 96
     c4a:	7a ee       	ldi	r23, 0xEA	; 234
     c4c:	86 9f       	mul	r24, r22
     c4e:	a0 01       	movw	r20, r0
     c50:	87 9f       	mul	r24, r23
     c52:	50 0d       	add	r21, r0
     c54:	96 9f       	mul	r25, r22
     c56:	50 0d       	add	r21, r0
     c58:	11 24       	eor	r1, r1
     c5a:	c9 01       	movw	r24, r18
     c5c:	84 1b       	sub	r24, r20
     c5e:	95 0b       	sbc	r25, r21
     c60:	89 2b       	or	r24, r25
     c62:	49 f0       	breq	.+18     	; 0xc76 <schedule+0x14a>
	{
		minute_counter = 0;
     c64:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <minute_counter+0x1>
     c68:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <minute_counter>
		minutes_elapsed = minutes_elapsed + 1;
     c6c:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <minutes_elapsed>
     c70:	8f 5f       	subi	r24, 0xFF	; 255
     c72:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <minutes_elapsed>
	}
}
     c76:	00 00       	nop
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	08 95       	ret

00000c7e <setErrorFlag>:

void setErrorFlag(void)
{
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
	errorFlag = 1;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <errorFlag>
}
     c8c:	00 00       	nop
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	08 95       	ret

00000c94 <setState>:

void setState(void)
{
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
	switch (curState)
     c9c:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <curState>
     ca0:	88 2f       	mov	r24, r24
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	91 05       	cpc	r25, r1
     ca8:	f9 f0       	breq	.+62     	; 0xce8 <setState+0x54>
     caa:	82 30       	cpi	r24, 0x02	; 2
     cac:	91 05       	cpc	r25, r1
     cae:	1c f4       	brge	.+6      	; 0xcb6 <setState+0x22>
     cb0:	89 2b       	or	r24, r25
     cb2:	49 f0       	breq	.+18     	; 0xcc6 <setState+0x32>
			clearPoteinVal();
			break;
		}
		
		default:
			break;
     cb4:	1a c1       	rjmp	.+564    	; 0xeea <setState+0x256>
	errorFlag = 1;
}

void setState(void)
{
	switch (curState)
     cb6:	82 30       	cpi	r24, 0x02	; 2
     cb8:	91 05       	cpc	r25, r1
     cba:	09 f4       	brne	.+2      	; 0xcbe <setState+0x2a>
     cbc:	9d c0       	rjmp	.+314    	; 0xdf8 <setState+0x164>
     cbe:	03 97       	sbiw	r24, 0x03	; 3
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <setState+0x30>
     cc2:	fb c0       	rjmp	.+502    	; 0xeba <setState+0x226>
			clearPoteinVal();
			break;
		}
		
		default:
			break;
     cc4:	12 c1       	rjmp	.+548    	; 0xeea <setState+0x256>
{
	switch (curState)
	{
		case STANDBY:
		{
			IDLE_Screen();
     cc6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <IDLE_Screen>
			UsrGetVal();
     cca:	0e 94 19 03 	call	0x632	; 0x632 <UsrGetVal>
			clearVoltModule();
     cce:	0e 94 4b 05 	call	0xa96	; 0xa96 <clearVoltModule>
			clearCheckTemp();
     cd2:	0e 94 41 05 	call	0xa82	; 0xa82 <clearCheckTemp>
			
			if (hash_pressed == 1)
     cd6:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <hash_pressed>
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	09 f0       	breq	.+2      	; 0xce0 <setState+0x4c>
     cde:	00 c1       	rjmp	.+512    	; 0xee0 <setState+0x24c>
			{
				curState = OPERATION;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <curState>
			}
			
			break;
     ce6:	fc c0       	rjmp	.+504    	; 0xee0 <setState+0x24c>
		}

		case OPERATION:
		{
			LCD_movecursor(2, 1);
     ce8:	61 e0       	ldi	r22, 0x01	; 1
     cea:	82 e0       	ldi	r24, 0x02	; 2
     cec:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_movecursor>
			LCD_vSend_string("STATE:");
     cf0:	82 e8       	ldi	r24, 0x82	; 130
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_vSend_string>
			LCD_vSend_string("OPERATION");
     cf8:	89 e8       	ldi	r24, 0x89	; 137
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_vSend_string>
			setCheckTemp();
     d00:	0e 94 05 05 	call	0xa0a	; 0xa0a <setCheckTemp>
			setVoltModule();
     d04:	0e 94 10 05 	call	0xa20	; 0xa20 <setVoltModule>
			setPoteinVal();
     d08:	0e 94 26 05 	call	0xa4c	; 0xa4c <setPoteinVal>
			CRT_Temp();
     d0c:	0e 94 07 04 	call	0x80e	; 0x80e <CRT_Temp>

			currentTemp = getCurrentTemp();
     d10:	0e 94 34 04 	call	0x868	; 0x868 <getCurrentTemp>
     d14:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <currentTemp+0x1>
     d18:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <currentTemp>
			setTemp = getSetTemp();
     d1c:	0e 94 3f 04 	call	0x87e	; 0x87e <getSetTemp>
     d20:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <setTemp+0x1>
     d24:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <setTemp>
			
			//if (setTemp <= currentTemp)
			//{
				///* Do nothing for now */
			//}
			if ((currentTemp > setTemp) && ((currentTemp - setTemp) <= 5))
     d28:	20 91 ca 00 	lds	r18, 0x00CA	; 0x8000ca <currentTemp>
     d2c:	30 91 cb 00 	lds	r19, 0x00CB	; 0x8000cb <currentTemp+0x1>
     d30:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <setTemp>
     d34:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <setTemp+0x1>
     d38:	82 17       	cp	r24, r18
     d3a:	93 07       	cpc	r25, r19
     d3c:	b0 f4       	brcc	.+44     	; 0xd6a <setState+0xd6>
     d3e:	20 91 ca 00 	lds	r18, 0x00CA	; 0x8000ca <currentTemp>
     d42:	30 91 cb 00 	lds	r19, 0x00CB	; 0x8000cb <currentTemp+0x1>
     d46:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <setTemp>
     d4a:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <setTemp+0x1>
     d4e:	a9 01       	movw	r20, r18
     d50:	48 1b       	sub	r20, r24
     d52:	59 0b       	sbc	r21, r25
     d54:	ca 01       	movw	r24, r20
     d56:	06 97       	sbiw	r24, 0x06	; 6
     d58:	40 f4       	brcc	.+16     	; 0xd6a <setState+0xd6>
			{
				curState = NORMAL;
     d5a:	82 e0       	ldi	r24, 0x02	; 2
     d5c:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <curState>
				clearCountMinutes();
     d60:	0e 94 31 05 	call	0xa62	; 0xa62 <clearCountMinutes>
				clearOverHeating();
     d64:	0e 94 55 05 	call	0xaaa	; 0xaaa <clearOverHeating>
     d68:	3e c0       	rjmp	.+124    	; 0xde6 <setState+0x152>
			}
			else if ((currentTemp < setTemp) && ((setTemp - currentTemp) <= 5))
     d6a:	20 91 ca 00 	lds	r18, 0x00CA	; 0x8000ca <currentTemp>
     d6e:	30 91 cb 00 	lds	r19, 0x00CB	; 0x8000cb <currentTemp+0x1>
     d72:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <setTemp>
     d76:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <setTemp+0x1>
     d7a:	28 17       	cp	r18, r24
     d7c:	39 07       	cpc	r19, r25
     d7e:	b0 f4       	brcc	.+44     	; 0xdac <setState+0x118>
     d80:	20 91 cc 00 	lds	r18, 0x00CC	; 0x8000cc <setTemp>
     d84:	30 91 cd 00 	lds	r19, 0x00CD	; 0x8000cd <setTemp+0x1>
     d88:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <currentTemp>
     d8c:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <currentTemp+0x1>
     d90:	a9 01       	movw	r20, r18
     d92:	48 1b       	sub	r20, r24
     d94:	59 0b       	sbc	r21, r25
     d96:	ca 01       	movw	r24, r20
     d98:	06 97       	sbiw	r24, 0x06	; 6
     d9a:	40 f4       	brcc	.+16     	; 0xdac <setState+0x118>
			{
				curState = NORMAL;
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <curState>
				clearCountMinutes();
     da2:	0e 94 31 05 	call	0xa62	; 0xa62 <clearCountMinutes>
				clearOverHeating();
     da6:	0e 94 55 05 	call	0xaaa	; 0xaaa <clearOverHeating>
     daa:	1d c0       	rjmp	.+58     	; 0xde6 <setState+0x152>
			}
			else if ((setTemp > currentTemp) && ((setTemp - currentTemp) > 5))
     dac:	20 91 cc 00 	lds	r18, 0x00CC	; 0x8000cc <setTemp>
     db0:	30 91 cd 00 	lds	r19, 0x00CD	; 0x8000cd <setTemp+0x1>
     db4:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <currentTemp>
     db8:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <currentTemp+0x1>
     dbc:	82 17       	cp	r24, r18
     dbe:	93 07       	cpc	r25, r19
     dc0:	90 f4       	brcc	.+36     	; 0xde6 <setState+0x152>
     dc2:	20 91 cc 00 	lds	r18, 0x00CC	; 0x8000cc <setTemp>
     dc6:	30 91 cd 00 	lds	r19, 0x00CD	; 0x8000cd <setTemp+0x1>
     dca:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <currentTemp>
     dce:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <currentTemp+0x1>
     dd2:	a9 01       	movw	r20, r18
     dd4:	48 1b       	sub	r20, r24
     dd6:	59 0b       	sbc	r21, r25
     dd8:	ca 01       	movw	r24, r20
     dda:	06 97       	sbiw	r24, 0x06	; 6
     ddc:	20 f0       	brcs	.+8      	; 0xde6 <setState+0x152>
			{
				setCountMinutes();
     dde:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <setCountMinutes>
				setOverHeating();
     de2:	0e 94 1b 05 	call	0xa36	; 0xa36 <setOverHeating>

			//if (hash_pressed == 1)
			//{
				//curState = STANDBY;
			//}
			if (errorFlag == 1)
     de6:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <errorFlag>
     dea:	81 30       	cpi	r24, 0x01	; 1
     dec:	09 f0       	breq	.+2      	; 0xdf0 <setState+0x15c>
     dee:	7a c0       	rjmp	.+244    	; 0xee4 <setState+0x250>
			{
				curState = ERROR;
     df0:	83 e0       	ldi	r24, 0x03	; 3
     df2:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <curState>
			}
			break;
     df6:	76 c0       	rjmp	.+236    	; 0xee4 <setState+0x250>
		}

		case NORMAL:
		{
			LCD_movecursor(2, 1);
     df8:	61 e0       	ldi	r22, 0x01	; 1
     dfa:	82 e0       	ldi	r24, 0x02	; 2
     dfc:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_movecursor>
			LCD_vSend_string("STATE:");
     e00:	82 e8       	ldi	r24, 0x82	; 130
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_vSend_string>
			LCD_vSend_string("NORMAL");
     e08:	83 e9       	ldi	r24, 0x93	; 147
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_vSend_string>
			setCheckTemp();
     e10:	0e 94 05 05 	call	0xa0a	; 0xa0a <setCheckTemp>
			setPoteinVal();
     e14:	0e 94 26 05 	call	0xa4c	; 0xa4c <setPoteinVal>
			clearVoltModule();
     e18:	0e 94 4b 05 	call	0xa96	; 0xa96 <clearVoltModule>
			CRT_Temp();
     e1c:	0e 94 07 04 	call	0x80e	; 0x80e <CRT_Temp>
			
			currentTemp = getCurrentTemp();
     e20:	0e 94 34 04 	call	0x868	; 0x868 <getCurrentTemp>
     e24:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <currentTemp+0x1>
     e28:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <currentTemp>
			setTemp = getSetTemp();
     e2c:	0e 94 3f 04 	call	0x87e	; 0x87e <getSetTemp>
     e30:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <setTemp+0x1>
     e34:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <setTemp>
			
			if ((setTemp > currentTemp) && (setTemp - currentTemp) > 5)
     e38:	20 91 cc 00 	lds	r18, 0x00CC	; 0x8000cc <setTemp>
     e3c:	30 91 cd 00 	lds	r19, 0x00CD	; 0x8000cd <setTemp+0x1>
     e40:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <currentTemp>
     e44:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <currentTemp+0x1>
     e48:	82 17       	cp	r24, r18
     e4a:	93 07       	cpc	r25, r19
     e4c:	90 f4       	brcc	.+36     	; 0xe72 <setState+0x1de>
     e4e:	20 91 cc 00 	lds	r18, 0x00CC	; 0x8000cc <setTemp>
     e52:	30 91 cd 00 	lds	r19, 0x00CD	; 0x8000cd <setTemp+0x1>
     e56:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <currentTemp>
     e5a:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <currentTemp+0x1>
     e5e:	a9 01       	movw	r20, r18
     e60:	48 1b       	sub	r20, r24
     e62:	59 0b       	sbc	r21, r25
     e64:	ca 01       	movw	r24, r20
     e66:	06 97       	sbiw	r24, 0x06	; 6
     e68:	20 f0       	brcs	.+8      	; 0xe72 <setState+0x1de>
			{
				curState = OPERATION;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <curState>
     e70:	1c c0       	rjmp	.+56     	; 0xeaa <setState+0x216>
			}
			else if ((currentTemp > setTemp) && ((currentTemp - setTemp) > 10))
     e72:	20 91 ca 00 	lds	r18, 0x00CA	; 0x8000ca <currentTemp>
     e76:	30 91 cb 00 	lds	r19, 0x00CB	; 0x8000cb <currentTemp+0x1>
     e7a:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <setTemp>
     e7e:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <setTemp+0x1>
     e82:	82 17       	cp	r24, r18
     e84:	93 07       	cpc	r25, r19
     e86:	88 f4       	brcc	.+34     	; 0xeaa <setState+0x216>
     e88:	20 91 ca 00 	lds	r18, 0x00CA	; 0x8000ca <currentTemp>
     e8c:	30 91 cb 00 	lds	r19, 0x00CB	; 0x8000cb <currentTemp+0x1>
     e90:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <setTemp>
     e94:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <setTemp+0x1>
     e98:	a9 01       	movw	r20, r18
     e9a:	48 1b       	sub	r20, r24
     e9c:	59 0b       	sbc	r21, r25
     e9e:	ca 01       	movw	r24, r20
     ea0:	0b 97       	sbiw	r24, 0x0b	; 11
     ea2:	18 f0       	brcs	.+6      	; 0xeaa <setState+0x216>
			{
				curState = ERROR;
     ea4:	83 e0       	ldi	r24, 0x03	; 3
     ea6:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <curState>
			else
			{
				/* Do nothing */
			}
			
			if (errorFlag)
     eaa:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <errorFlag>
     eae:	88 23       	and	r24, r24
     eb0:	d9 f0       	breq	.+54     	; 0xee8 <setState+0x254>
			{
				curState = ERROR;
     eb2:	83 e0       	ldi	r24, 0x03	; 3
     eb4:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <curState>
			}
			break;
     eb8:	17 c0       	rjmp	.+46     	; 0xee8 <setState+0x254>
		}

		case ERROR:
		{
			LCD_movecursor(2, 1);
     eba:	61 e0       	ldi	r22, 0x01	; 1
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_movecursor>
			LCD_vSend_string("STATE:");
     ec2:	82 e8       	ldi	r24, 0x82	; 130
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_vSend_string>
			LCD_vSend_string("ERROR");
     eca:	8a e9       	ldi	r24, 0x9A	; 154
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_vSend_string>
			clearCheckTemp();
     ed2:	0e 94 41 05 	call	0xa82	; 0xa82 <clearCheckTemp>
			clearVoltModule();
     ed6:	0e 94 4b 05 	call	0xa96	; 0xa96 <clearVoltModule>
			clearPoteinVal();
     eda:	0e 94 5f 05 	call	0xabe	; 0xabe <clearPoteinVal>
			break;
     ede:	05 c0       	rjmp	.+10     	; 0xeea <setState+0x256>
			if (hash_pressed == 1)
			{
				curState = OPERATION;
			}
			
			break;
     ee0:	00 00       	nop
     ee2:	03 c0       	rjmp	.+6      	; 0xeea <setState+0x256>
			//}
			if (errorFlag == 1)
			{
				curState = ERROR;
			}
			break;
     ee4:	00 00       	nop
     ee6:	01 c0       	rjmp	.+2      	; 0xeea <setState+0x256>
			
			if (errorFlag)
			{
				curState = ERROR;
			}
			break;
     ee8:	00 00       	nop
		}
		
		default:
			break;
	}
     eea:	00 00       	nop
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	08 95       	ret

00000ef2 <InitPWM>:
#include "pwm.h"

void InitPWM(void)
{
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS00);
     efa:	83 e5       	ldi	r24, 0x53	; 83
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	23 e5       	ldi	r18, 0x53	; 83
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	f9 01       	movw	r30, r18
     f04:	20 81       	ld	r18, Z
     f06:	29 66       	ori	r18, 0x69	; 105
     f08:	fc 01       	movw	r30, r24
     f0a:	20 83       	st	Z, r18
	PWM_DDR |= (1 << PWM_PIN);
     f0c:	87 e3       	ldi	r24, 0x37	; 55
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	27 e3       	ldi	r18, 0x37	; 55
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	f9 01       	movw	r30, r18
     f16:	20 81       	ld	r18, Z
     f18:	28 60       	ori	r18, 0x08	; 8
     f1a:	fc 01       	movw	r30, r24
     f1c:	20 83       	st	Z, r18
	OCR1A = 3000;
     f1e:	8a e4       	ldi	r24, 0x4A	; 74
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	28 eb       	ldi	r18, 0xB8	; 184
     f24:	3b e0       	ldi	r19, 0x0B	; 11
     f26:	fc 01       	movw	r30, r24
     f28:	31 83       	std	Z+1, r19	; 0x01
     f2a:	20 83       	st	Z, r18
	//TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS00);
	//PWM_DDR |= (1 << PWM_PIN);  /*set OC0 pin as output*/
	//OCR1A = 3000;
}
     f2c:	00 00       	nop
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	08 95       	ret

00000f34 <SetPWMOutput>:

void SetPWMOutput(float64_t vr, float64_t vt)
{
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	2c 97       	sbiw	r28, 0x0c	; 12
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	6d 83       	std	Y+5, r22	; 0x05
     f4e:	7e 83       	std	Y+6, r23	; 0x06
     f50:	8f 83       	std	Y+7, r24	; 0x07
     f52:	98 87       	std	Y+8, r25	; 0x08
     f54:	29 87       	std	Y+9, r18	; 0x09
     f56:	3a 87       	std	Y+10, r19	; 0x0a
     f58:	4b 87       	std	Y+11, r20	; 0x0b
     f5a:	5c 87       	std	Y+12, r21	; 0x0c
	float64_t duty = 0;
     f5c:	19 82       	std	Y+1, r1	; 0x01
     f5e:	1a 82       	std	Y+2, r1	; 0x02
     f60:	1b 82       	std	Y+3, r1	; 0x03
     f62:	1c 82       	std	Y+4, r1	; 0x04
	duty = (((vr * 2) / 10) * vt) / 10;
     f64:	8d 81       	ldd	r24, Y+5	; 0x05
     f66:	9e 81       	ldd	r25, Y+6	; 0x06
     f68:	af 81       	ldd	r26, Y+7	; 0x07
     f6a:	b8 85       	ldd	r27, Y+8	; 0x08
     f6c:	9c 01       	movw	r18, r24
     f6e:	ad 01       	movw	r20, r26
     f70:	bc 01       	movw	r22, r24
     f72:	cd 01       	movw	r24, r26
     f74:	0e 94 82 14 	call	0x2904	; 0x2904 <__addsf3>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	40 e2       	ldi	r20, 0x20	; 32
     f82:	51 e4       	ldi	r21, 0x41	; 65
     f84:	bc 01       	movw	r22, r24
     f86:	cd 01       	movw	r24, r26
     f88:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__divsf3>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	29 85       	ldd	r18, Y+9	; 0x09
     f92:	3a 85       	ldd	r19, Y+10	; 0x0a
     f94:	4b 85       	ldd	r20, Y+11	; 0x0b
     f96:	5c 85       	ldd	r21, Y+12	; 0x0c
     f98:	bc 01       	movw	r22, r24
     f9a:	cd 01       	movw	r24, r26
     f9c:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e2       	ldi	r20, 0x20	; 32
     faa:	51 e4       	ldi	r21, 0x41	; 65
     fac:	bc 01       	movw	r22, r24
     fae:	cd 01       	movw	r24, r26
     fb0:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__divsf3>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	9a 83       	std	Y+2, r25	; 0x02
     fbc:	ab 83       	std	Y+3, r26	; 0x03
     fbe:	bc 83       	std	Y+4, r27	; 0x04
	OCR0 = duty;
     fc0:	0c e5       	ldi	r16, 0x5C	; 92
     fc2:	10 e0       	ldi	r17, 0x00	; 0
     fc4:	69 81       	ldd	r22, Y+1	; 0x01
     fc6:	7a 81       	ldd	r23, Y+2	; 0x02
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	9c 81       	ldd	r25, Y+4	; 0x04
     fcc:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	f8 01       	movw	r30, r16
     fd6:	80 83       	st	Z, r24
}
     fd8:	00 00       	nop
     fda:	2c 96       	adiw	r28, 0x0c	; 12
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	08 95       	ret

00000ff0 <WDT_OFF>:
{
	WDTCR = (1 << WDE) | (1 << WDP2) | (1 << WDP1) | (1 << WDP0);
}

void WDT_OFF(void)
{
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
	WDTCR = (1 << WDTOE) | (1 << WDE);
     ff8:	81 e4       	ldi	r24, 0x41	; 65
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	28 e1       	ldi	r18, 0x18	; 24
     ffe:	fc 01       	movw	r30, r24
    1000:	20 83       	st	Z, r18
	WDTCR = 0x00;
    1002:	81 e4       	ldi	r24, 0x41	; 65
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	fc 01       	movw	r30, r24
    1008:	10 82       	st	Z, r1
}
    100a:	00 00       	nop
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	08 95       	ret

00001012 <keypad_vInit>:
	{'7', '8', '9'},
	{'*', '0', '#'}
};

void keypad_vInit(void)
{
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
	DIO_set_port_direction(KEYPAD_PORT, 0x0f);
    101a:	6f e0       	ldi	r22, 0x0F	; 15
    101c:	83 e4       	ldi	r24, 0x43	; 67
    101e:	0e 94 83 12 	call	0x2506	; 0x2506 <DIO_set_port_direction>
	CLR_BIT(SFIOR, PUD);
    1022:	80 e5       	ldi	r24, 0x50	; 80
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	20 e5       	ldi	r18, 0x50	; 80
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	f9 01       	movw	r30, r18
    102c:	20 81       	ld	r18, Z
    102e:	2b 7f       	andi	r18, 0xFB	; 251
    1030:	fc 01       	movw	r30, r24
    1032:	20 83       	st	Z, r18
	DIO_write_port(KEYPAD_PORT, 0xff);
    1034:	6f ef       	ldi	r22, 0xFF	; 255
    1036:	83 e4       	ldi	r24, 0x43	; 67
    1038:	0e 94 bc 12 	call	0x2578	; 0x2578 <DIO_write_port>
}
    103c:	00 00       	nop
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	08 95       	ret

00001044 <Keypad_u8Scan>:

u8 Keypad_u8Scan(void)
{
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	00 d0       	rcall	.+0      	; 0x104a <Keypad_u8Scan+0x6>
    104a:	00 d0       	rcall	.+0      	; 0x104c <Keypad_u8Scan+0x8>
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
	u8 row = 0;
    1050:	19 82       	std	Y+1, r1	; 0x01
	u8 column = 0;
    1052:	1a 82       	std	Y+2, r1	; 0x02
	u8 scan = 0;
    1054:	1c 82       	std	Y+4, r1	; 0x04
	u8 buttonPressed = 0;
    1056:	1b 82       	std	Y+3, r1	; 0x03

	for(row = 0; row < N_Row; ++row)
    1058:	19 82       	std	Y+1, r1	; 0x01
    105a:	5d c0       	rjmp	.+186    	; 0x1116 <Keypad_u8Scan+0xd2>
	{
		KEYPAD_PORTC |= 0x0f;
    105c:	85 e3       	ldi	r24, 0x35	; 53
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	25 e3       	ldi	r18, 0x35	; 53
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	f9 01       	movw	r30, r18
    1066:	20 81       	ld	r18, Z
    1068:	2f 60       	ori	r18, 0x0F	; 15
    106a:	fc 01       	movw	r30, r24
    106c:	20 83       	st	Z, r18
		CLR_BIT(KEYPAD_PORTC, row);
    106e:	85 e3       	ldi	r24, 0x35	; 53
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	25 e3       	ldi	r18, 0x35	; 53
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	f9 01       	movw	r30, r18
    1078:	20 81       	ld	r18, Z
    107a:	62 2f       	mov	r22, r18
    107c:	29 81       	ldd	r18, Y+1	; 0x01
    107e:	42 2f       	mov	r20, r18
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	21 e0       	ldi	r18, 0x01	; 1
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	02 c0       	rjmp	.+4      	; 0x108c <Keypad_u8Scan+0x48>
    1088:	22 0f       	add	r18, r18
    108a:	33 1f       	adc	r19, r19
    108c:	4a 95       	dec	r20
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <Keypad_u8Scan+0x44>
    1090:	20 95       	com	r18
    1092:	26 23       	and	r18, r22
    1094:	fc 01       	movw	r30, r24
    1096:	20 83       	st	Z, r18
		
		for(column = 4; column < (N_Row + N_Col); ++column)
    1098:	84 e0       	ldi	r24, 0x04	; 4
    109a:	8a 83       	std	Y+2, r24	; 0x02
    109c:	36 c0       	rjmp	.+108    	; 0x110a <Keypad_u8Scan+0xc6>
		{
			scan = READ_BIT(KEYPAD_PINs, column);
    109e:	83 e3       	ldi	r24, 0x33	; 51
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	fc 01       	movw	r30, r24
    10a4:	80 81       	ld	r24, Z
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	48 2f       	mov	r20, r24
    10ae:	50 e0       	ldi	r21, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <Keypad_u8Scan+0x76>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	4a 95       	dec	r20
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <Keypad_u8Scan+0x72>
    10be:	82 23       	and	r24, r18
    10c0:	93 23       	and	r25, r19
    10c2:	2a 81       	ldd	r18, Y+2	; 0x02
    10c4:	22 2f       	mov	r18, r18
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <Keypad_u8Scan+0x8a>
    10ca:	95 95       	asr	r25
    10cc:	87 95       	ror	r24
    10ce:	2a 95       	dec	r18
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <Keypad_u8Scan+0x86>
    10d2:	8c 83       	std	Y+4, r24	; 0x04
			if(scan == 0)
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	88 23       	and	r24, r24
    10d8:	a9 f4       	brne	.+42     	; 0x1104 <Keypad_u8Scan+0xc0>
			{
				buttonPressed = kp[row][column - 4];
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	88 2f       	mov	r24, r24
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	ac 01       	movw	r20, r24
    10e8:	44 50       	subi	r20, 0x04	; 4
    10ea:	51 09       	sbc	r21, r1
    10ec:	c9 01       	movw	r24, r18
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	82 0f       	add	r24, r18
    10f4:	93 1f       	adc	r25, r19
    10f6:	84 0f       	add	r24, r20
    10f8:	95 1f       	adc	r25, r21
    10fa:	8f 55       	subi	r24, 0x5F	; 95
    10fc:	9f 4f       	sbci	r25, 0xFF	; 255
    10fe:	fc 01       	movw	r30, r24
    1100:	80 81       	ld	r24, Z
    1102:	8b 83       	std	Y+3, r24	; 0x03
	for(row = 0; row < N_Row; ++row)
	{
		KEYPAD_PORTC |= 0x0f;
		CLR_BIT(KEYPAD_PORTC, row);
		
		for(column = 4; column < (N_Row + N_Col); ++column)
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	8f 5f       	subi	r24, 0xFF	; 255
    1108:	8a 83       	std	Y+2, r24	; 0x02
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	87 30       	cpi	r24, 0x07	; 7
    110e:	38 f2       	brcs	.-114    	; 0x109e <Keypad_u8Scan+0x5a>
	u8 row = 0;
	u8 column = 0;
	u8 scan = 0;
	u8 buttonPressed = 0;

	for(row = 0; row < N_Row; ++row)
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	8f 5f       	subi	r24, 0xFF	; 255
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	84 30       	cpi	r24, 0x04	; 4
    111a:	08 f4       	brcc	.+2      	; 0x111e <Keypad_u8Scan+0xda>
    111c:	9f cf       	rjmp	.-194    	; 0x105c <Keypad_u8Scan+0x18>
				buttonPressed = kp[row][column - 4];
			}
		}
	}
	
	return buttonPressed;
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	08 95       	ret

0000112e <getKey>:

u8 getKey(void)
{
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	2f 97       	sbiw	r28, 0x0f	; 15
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
	u8 key = 0;
    1142:	19 82       	std	Y+1, r1	; 0x01

	/* Wait for key release if pressed on entry */
	while (Keypad_u8Scan() != 0)
    1144:	72 c0       	rjmp	.+228    	; 0x122a <getKey+0xfc>
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	a0 e2       	ldi	r26, 0x20	; 32
    114c:	b1 e4       	ldi	r27, 0x41	; 65
    114e:	8a 83       	std	Y+2, r24	; 0x02
    1150:	9b 83       	std	Y+3, r25	; 0x03
    1152:	ac 83       	std	Y+4, r26	; 0x04
    1154:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	4a e7       	ldi	r20, 0x7A	; 122
    115c:	53 e4       	ldi	r21, 0x43	; 67
    115e:	6a 81       	ldd	r22, Y+2	; 0x02
    1160:	7b 81       	ldd	r23, Y+3	; 0x03
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	9d 81       	ldd	r25, Y+5	; 0x05
    1166:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	8e 83       	std	Y+6, r24	; 0x06
    1170:	9f 83       	std	Y+7, r25	; 0x07
    1172:	a8 87       	std	Y+8, r26	; 0x08
    1174:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e8       	ldi	r20, 0x80	; 128
    117c:	5f e3       	ldi	r21, 0x3F	; 63
    117e:	6e 81       	ldd	r22, Y+6	; 0x06
    1180:	7f 81       	ldd	r23, Y+7	; 0x07
    1182:	88 85       	ldd	r24, Y+8	; 0x08
    1184:	99 85       	ldd	r25, Y+9	; 0x09
    1186:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__cmpsf2>
    118a:	88 23       	and	r24, r24
    118c:	2c f4       	brge	.+10     	; 0x1198 <getKey+0x6a>
		__ticks = 1;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9b 87       	std	Y+11, r25	; 0x0b
    1194:	8a 87       	std	Y+10, r24	; 0x0a
    1196:	3f c0       	rjmp	.+126    	; 0x1216 <getKey+0xe8>
	else if (__tmp > 65535)
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	3f ef       	ldi	r19, 0xFF	; 255
    119c:	4f e7       	ldi	r20, 0x7F	; 127
    119e:	57 e4       	ldi	r21, 0x47	; 71
    11a0:	6e 81       	ldd	r22, Y+6	; 0x06
    11a2:	7f 81       	ldd	r23, Y+7	; 0x07
    11a4:	88 85       	ldd	r24, Y+8	; 0x08
    11a6:	99 85       	ldd	r25, Y+9	; 0x09
    11a8:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__gesf2>
    11ac:	18 16       	cp	r1, r24
    11ae:	4c f5       	brge	.+82     	; 0x1202 <getKey+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	40 e2       	ldi	r20, 0x20	; 32
    11b6:	51 e4       	ldi	r21, 0x41	; 65
    11b8:	6a 81       	ldd	r22, Y+2	; 0x02
    11ba:	7b 81       	ldd	r23, Y+3	; 0x03
    11bc:	8c 81       	ldd	r24, Y+4	; 0x04
    11be:	9d 81       	ldd	r25, Y+5	; 0x05
    11c0:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	bc 01       	movw	r22, r24
    11ca:	cd 01       	movw	r24, r26
    11cc:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	9b 87       	std	Y+11, r25	; 0x0b
    11d6:	8a 87       	std	Y+10, r24	; 0x0a
    11d8:	0f c0       	rjmp	.+30     	; 0x11f8 <getKey+0xca>
    11da:	89 e1       	ldi	r24, 0x19	; 25
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	9d 87       	std	Y+13, r25	; 0x0d
    11e0:	8c 87       	std	Y+12, r24	; 0x0c
    11e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    11e4:	9d 85       	ldd	r25, Y+13	; 0x0d
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <getKey+0xb8>
    11ea:	9d 87       	std	Y+13, r25	; 0x0d
    11ec:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    11f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	9b 87       	std	Y+11, r25	; 0x0b
    11f6:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    11fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    11fc:	89 2b       	or	r24, r25
    11fe:	69 f7       	brne	.-38     	; 0x11da <getKey+0xac>
    1200:	14 c0       	rjmp	.+40     	; 0x122a <getKey+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1202:	6e 81       	ldd	r22, Y+6	; 0x06
    1204:	7f 81       	ldd	r23, Y+7	; 0x07
    1206:	88 85       	ldd	r24, Y+8	; 0x08
    1208:	99 85       	ldd	r25, Y+9	; 0x09
    120a:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	9b 87       	std	Y+11, r25	; 0x0b
    1214:	8a 87       	std	Y+10, r24	; 0x0a
    1216:	8a 85       	ldd	r24, Y+10	; 0x0a
    1218:	9b 85       	ldd	r25, Y+11	; 0x0b
    121a:	9f 87       	std	Y+15, r25	; 0x0f
    121c:	8e 87       	std	Y+14, r24	; 0x0e
    121e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1220:	9f 85       	ldd	r25, Y+15	; 0x0f
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	f1 f7       	brne	.-4      	; 0x1222 <getKey+0xf4>
    1226:	9f 87       	std	Y+15, r25	; 0x0f
    1228:	8e 87       	std	Y+14, r24	; 0x0e
    122a:	0e 94 22 08 	call	0x1044	; 0x1044 <Keypad_u8Scan>
    122e:	88 23       	and	r24, r24
    1230:	09 f0       	breq	.+2      	; 0x1234 <getKey+0x106>
    1232:	89 cf       	rjmp	.-238    	; 0x1146 <getKey+0x18>
	}

	/* Wait for new key press */
	do
	{
		key = Keypad_u8Scan();
    1234:	0e 94 22 08 	call	0x1044	; 0x1044 <Keypad_u8Scan>
    1238:	89 83       	std	Y+1, r24	; 0x01

	} while(key == 0);
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	88 23       	and	r24, r24
    123e:	d1 f3       	breq	.-12     	; 0x1234 <getKey+0x106>

	return key;
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	2f 96       	adiw	r28, 0x0f	; 15
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <LCD_vInit>:
#include "LCD.h"

static u8 counter = 0;

void LCD_vInit(void)
{
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	c4 55       	subi	r28, 0x54	; 84
    1262:	d1 09       	sbc	r29, r1
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	a0 ea       	ldi	r26, 0xA0	; 160
    1274:	b1 e4       	ldi	r27, 0x41	; 65
    1276:	89 83       	std	Y+1, r24	; 0x01
    1278:	9a 83       	std	Y+2, r25	; 0x02
    127a:	ab 83       	std	Y+3, r26	; 0x03
    127c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    127e:	8e 01       	movw	r16, r28
    1280:	05 5b       	subi	r16, 0xB5	; 181
    1282:	1f 4f       	sbci	r17, 0xFF	; 255
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	4a e7       	ldi	r20, 0x7A	; 122
    128a:	53 e4       	ldi	r21, 0x43	; 67
    128c:	69 81       	ldd	r22, Y+1	; 0x01
    128e:	7a 81       	ldd	r23, Y+2	; 0x02
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	f8 01       	movw	r30, r16
    129e:	80 83       	st	Z, r24
    12a0:	91 83       	std	Z+1, r25	; 0x01
    12a2:	a2 83       	std	Z+2, r26	; 0x02
    12a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12a6:	ce 01       	movw	r24, r28
    12a8:	85 5b       	subi	r24, 0xB5	; 181
    12aa:	9f 4f       	sbci	r25, 0xFF	; 255
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	40 e8       	ldi	r20, 0x80	; 128
    12b2:	5f e3       	ldi	r21, 0x3F	; 63
    12b4:	fc 01       	movw	r30, r24
    12b6:	60 81       	ld	r22, Z
    12b8:	71 81       	ldd	r23, Z+1	; 0x01
    12ba:	82 81       	ldd	r24, Z+2	; 0x02
    12bc:	93 81       	ldd	r25, Z+3	; 0x03
    12be:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__cmpsf2>
    12c2:	88 23       	and	r24, r24
    12c4:	4c f4       	brge	.+18     	; 0x12d8 <LCD_vInit+0x84>
		__ticks = 1;
    12c6:	ce 01       	movw	r24, r28
    12c8:	81 5b       	subi	r24, 0xB1	; 177
    12ca:	9f 4f       	sbci	r25, 0xFF	; 255
    12cc:	21 e0       	ldi	r18, 0x01	; 1
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	fc 01       	movw	r30, r24
    12d2:	31 83       	std	Z+1, r19	; 0x01
    12d4:	20 83       	st	Z, r18
    12d6:	69 c0       	rjmp	.+210    	; 0x13aa <LCD_vInit+0x156>
	else if (__tmp > 65535)
    12d8:	ce 01       	movw	r24, r28
    12da:	85 5b       	subi	r24, 0xB5	; 181
    12dc:	9f 4f       	sbci	r25, 0xFF	; 255
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	3f ef       	ldi	r19, 0xFF	; 255
    12e2:	4f e7       	ldi	r20, 0x7F	; 127
    12e4:	57 e4       	ldi	r21, 0x47	; 71
    12e6:	fc 01       	movw	r30, r24
    12e8:	60 81       	ld	r22, Z
    12ea:	71 81       	ldd	r23, Z+1	; 0x01
    12ec:	82 81       	ldd	r24, Z+2	; 0x02
    12ee:	93 81       	ldd	r25, Z+3	; 0x03
    12f0:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__gesf2>
    12f4:	18 16       	cp	r1, r24
    12f6:	0c f0       	brlt	.+2      	; 0x12fa <LCD_vInit+0xa6>
    12f8:	46 c0       	rjmp	.+140    	; 0x1386 <LCD_vInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e2       	ldi	r20, 0x20	; 32
    1300:	51 e4       	ldi	r21, 0x41	; 65
    1302:	69 81       	ldd	r22, Y+1	; 0x01
    1304:	7a 81       	ldd	r23, Y+2	; 0x02
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	9c 81       	ldd	r25, Y+4	; 0x04
    130a:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	8e 01       	movw	r16, r28
    1314:	01 5b       	subi	r16, 0xB1	; 177
    1316:	1f 4f       	sbci	r17, 0xFF	; 255
    1318:	bc 01       	movw	r22, r24
    131a:	cd 01       	movw	r24, r26
    131c:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	f8 01       	movw	r30, r16
    1326:	91 83       	std	Z+1, r25	; 0x01
    1328:	80 83       	st	Z, r24
    132a:	24 c0       	rjmp	.+72     	; 0x1374 <LCD_vInit+0x120>
    132c:	ce 01       	movw	r24, r28
    132e:	8f 5a       	subi	r24, 0xAF	; 175
    1330:	9f 4f       	sbci	r25, 0xFF	; 255
    1332:	29 e1       	ldi	r18, 0x19	; 25
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	fc 01       	movw	r30, r24
    1338:	31 83       	std	Z+1, r19	; 0x01
    133a:	20 83       	st	Z, r18
    133c:	ce 01       	movw	r24, r28
    133e:	8f 5a       	subi	r24, 0xAF	; 175
    1340:	9f 4f       	sbci	r25, 0xFF	; 255
    1342:	fc 01       	movw	r30, r24
    1344:	80 81       	ld	r24, Z
    1346:	91 81       	ldd	r25, Z+1	; 0x01
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <LCD_vInit+0xf4>
    134c:	9e 01       	movw	r18, r28
    134e:	2f 5a       	subi	r18, 0xAF	; 175
    1350:	3f 4f       	sbci	r19, 0xFF	; 255
    1352:	f9 01       	movw	r30, r18
    1354:	91 83       	std	Z+1, r25	; 0x01
    1356:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1358:	ce 01       	movw	r24, r28
    135a:	81 5b       	subi	r24, 0xB1	; 177
    135c:	9f 4f       	sbci	r25, 0xFF	; 255
    135e:	9e 01       	movw	r18, r28
    1360:	21 5b       	subi	r18, 0xB1	; 177
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	f9 01       	movw	r30, r18
    1366:	20 81       	ld	r18, Z
    1368:	31 81       	ldd	r19, Z+1	; 0x01
    136a:	21 50       	subi	r18, 0x01	; 1
    136c:	31 09       	sbc	r19, r1
    136e:	fc 01       	movw	r30, r24
    1370:	31 83       	std	Z+1, r19	; 0x01
    1372:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1374:	ce 01       	movw	r24, r28
    1376:	81 5b       	subi	r24, 0xB1	; 177
    1378:	9f 4f       	sbci	r25, 0xFF	; 255
    137a:	fc 01       	movw	r30, r24
    137c:	80 81       	ld	r24, Z
    137e:	91 81       	ldd	r25, Z+1	; 0x01
    1380:	89 2b       	or	r24, r25
    1382:	a1 f6       	brne	.-88     	; 0x132c <LCD_vInit+0xd8>
    1384:	2c c0       	rjmp	.+88     	; 0x13de <LCD_vInit+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1386:	8e 01       	movw	r16, r28
    1388:	01 5b       	subi	r16, 0xB1	; 177
    138a:	1f 4f       	sbci	r17, 0xFF	; 255
    138c:	ce 01       	movw	r24, r28
    138e:	85 5b       	subi	r24, 0xB5	; 181
    1390:	9f 4f       	sbci	r25, 0xFF	; 255
    1392:	fc 01       	movw	r30, r24
    1394:	60 81       	ld	r22, Z
    1396:	71 81       	ldd	r23, Z+1	; 0x01
    1398:	82 81       	ldd	r24, Z+2	; 0x02
    139a:	93 81       	ldd	r25, Z+3	; 0x03
    139c:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	f8 01       	movw	r30, r16
    13a6:	91 83       	std	Z+1, r25	; 0x01
    13a8:	80 83       	st	Z, r24
    13aa:	ce 01       	movw	r24, r28
    13ac:	8d 5a       	subi	r24, 0xAD	; 173
    13ae:	9f 4f       	sbci	r25, 0xFF	; 255
    13b0:	9e 01       	movw	r18, r28
    13b2:	21 5b       	subi	r18, 0xB1	; 177
    13b4:	3f 4f       	sbci	r19, 0xFF	; 255
    13b6:	f9 01       	movw	r30, r18
    13b8:	20 81       	ld	r18, Z
    13ba:	31 81       	ldd	r19, Z+1	; 0x01
    13bc:	fc 01       	movw	r30, r24
    13be:	31 83       	std	Z+1, r19	; 0x01
    13c0:	20 83       	st	Z, r18
    13c2:	ce 01       	movw	r24, r28
    13c4:	8d 5a       	subi	r24, 0xAD	; 173
    13c6:	9f 4f       	sbci	r25, 0xFF	; 255
    13c8:	fc 01       	movw	r30, r24
    13ca:	80 81       	ld	r24, Z
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <LCD_vInit+0x17a>
    13d2:	9e 01       	movw	r18, r28
    13d4:	2d 5a       	subi	r18, 0xAD	; 173
    13d6:	3f 4f       	sbci	r19, 0xFF	; 255
    13d8:	f9 01       	movw	r30, r18
    13da:	91 83       	std	Z+1, r25	; 0x01
    13dc:	80 83       	st	Z, r24
		LCD_vSend_cmd(ENTRY_MODE); /* Entry Mode */
		_delay_ms(1);
	
	/* We will work on 4-bis Mode */
	#elif defined four_bits_mode
		DIO_vsetPINDir(LCD_PORT, 4, 1);
    13de:	41 e0       	ldi	r20, 0x01	; 1
    13e0:	64 e0       	ldi	r22, 0x04	; 4
    13e2:	84 e4       	ldi	r24, 0x44	; 68
    13e4:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_vsetPINDir>
		DIO_vsetPINDir(LCD_PORT, 5, 1);
    13e8:	41 e0       	ldi	r20, 0x01	; 1
    13ea:	65 e0       	ldi	r22, 0x05	; 5
    13ec:	84 e4       	ldi	r24, 0x44	; 68
    13ee:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_vsetPINDir>
		DIO_vsetPINDir(LCD_PORT, 6, 1);
    13f2:	41 e0       	ldi	r20, 0x01	; 1
    13f4:	66 e0       	ldi	r22, 0x06	; 6
    13f6:	84 e4       	ldi	r24, 0x44	; 68
    13f8:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_vsetPINDir>
		DIO_vsetPINDir(LCD_PORT, 7, 1);
    13fc:	41 e0       	ldi	r20, 0x01	; 1
    13fe:	67 e0       	ldi	r22, 0x07	; 7
    1400:	84 e4       	ldi	r24, 0x44	; 68
    1402:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_vsetPINDir>
		DIO_vsetPINDir(EN_PORT, EN_PIN, 1);
    1406:	41 e0       	ldi	r20, 0x01	; 1
    1408:	63 e0       	ldi	r22, 0x03	; 3
    140a:	81 e4       	ldi	r24, 0x41	; 65
    140c:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_vsetPINDir>
		DIO_vsetPINDir(RW_PORT, RW_PIN, 1);
    1410:	41 e0       	ldi	r20, 0x01	; 1
    1412:	62 e0       	ldi	r22, 0x02	; 2
    1414:	81 e4       	ldi	r24, 0x41	; 65
    1416:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_vsetPINDir>
		DIO_vsetPINDir(RS_PORT, RS_PIN, 1);
    141a:	41 e0       	ldi	r20, 0x01	; 1
    141c:	61 e0       	ldi	r22, 0x01	; 1
    141e:	81 e4       	ldi	r24, 0x41	; 65
    1420:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_vsetPINDir>
   		DIO_write(RW_PORT, RW_PIN, 0);
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	62 e0       	ldi	r22, 0x02	; 2
    1428:	81 e4       	ldi	r24, 0x41	; 65
    142a:	0e 94 a4 11 	call	0x2348	; 0x2348 <DIO_write>
		LCD_vSend_cmd(RETURN_HOME); /* Return Home (row: 0, col: 0) */
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <LCD_vSend_cmd>
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	a0 e2       	ldi	r26, 0x20	; 32
    143a:	b1 e4       	ldi	r27, 0x41	; 65
    143c:	8d 83       	std	Y+5, r24	; 0x05
    143e:	9e 83       	std	Y+6, r25	; 0x06
    1440:	af 83       	std	Y+7, r26	; 0x07
    1442:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1444:	8e 01       	movw	r16, r28
    1446:	0f 5b       	subi	r16, 0xBF	; 191
    1448:	1f 4f       	sbci	r17, 0xFF	; 255
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	4a e7       	ldi	r20, 0x7A	; 122
    1450:	53 e4       	ldi	r21, 0x43	; 67
    1452:	6d 81       	ldd	r22, Y+5	; 0x05
    1454:	7e 81       	ldd	r23, Y+6	; 0x06
    1456:	8f 81       	ldd	r24, Y+7	; 0x07
    1458:	98 85       	ldd	r25, Y+8	; 0x08
    145a:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	f8 01       	movw	r30, r16
    1464:	80 83       	st	Z, r24
    1466:	91 83       	std	Z+1, r25	; 0x01
    1468:	a2 83       	std	Z+2, r26	; 0x02
    146a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    146c:	ce 01       	movw	r24, r28
    146e:	8f 5b       	subi	r24, 0xBF	; 191
    1470:	9f 4f       	sbci	r25, 0xFF	; 255
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e8       	ldi	r20, 0x80	; 128
    1478:	5f e3       	ldi	r21, 0x3F	; 63
    147a:	fc 01       	movw	r30, r24
    147c:	60 81       	ld	r22, Z
    147e:	71 81       	ldd	r23, Z+1	; 0x01
    1480:	82 81       	ldd	r24, Z+2	; 0x02
    1482:	93 81       	ldd	r25, Z+3	; 0x03
    1484:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__cmpsf2>
    1488:	88 23       	and	r24, r24
    148a:	4c f4       	brge	.+18     	; 0x149e <LCD_vInit+0x24a>
		__ticks = 1;
    148c:	ce 01       	movw	r24, r28
    148e:	8b 5b       	subi	r24, 0xBB	; 187
    1490:	9f 4f       	sbci	r25, 0xFF	; 255
    1492:	21 e0       	ldi	r18, 0x01	; 1
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	fc 01       	movw	r30, r24
    1498:	31 83       	std	Z+1, r19	; 0x01
    149a:	20 83       	st	Z, r18
    149c:	69 c0       	rjmp	.+210    	; 0x1570 <LCD_vInit+0x31c>
	else if (__tmp > 65535)
    149e:	ce 01       	movw	r24, r28
    14a0:	8f 5b       	subi	r24, 0xBF	; 191
    14a2:	9f 4f       	sbci	r25, 0xFF	; 255
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	3f ef       	ldi	r19, 0xFF	; 255
    14a8:	4f e7       	ldi	r20, 0x7F	; 127
    14aa:	57 e4       	ldi	r21, 0x47	; 71
    14ac:	fc 01       	movw	r30, r24
    14ae:	60 81       	ld	r22, Z
    14b0:	71 81       	ldd	r23, Z+1	; 0x01
    14b2:	82 81       	ldd	r24, Z+2	; 0x02
    14b4:	93 81       	ldd	r25, Z+3	; 0x03
    14b6:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__gesf2>
    14ba:	18 16       	cp	r1, r24
    14bc:	0c f0       	brlt	.+2      	; 0x14c0 <LCD_vInit+0x26c>
    14be:	46 c0       	rjmp	.+140    	; 0x154c <LCD_vInit+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e2       	ldi	r20, 0x20	; 32
    14c6:	51 e4       	ldi	r21, 0x41	; 65
    14c8:	6d 81       	ldd	r22, Y+5	; 0x05
    14ca:	7e 81       	ldd	r23, Y+6	; 0x06
    14cc:	8f 81       	ldd	r24, Y+7	; 0x07
    14ce:	98 85       	ldd	r25, Y+8	; 0x08
    14d0:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	8e 01       	movw	r16, r28
    14da:	0b 5b       	subi	r16, 0xBB	; 187
    14dc:	1f 4f       	sbci	r17, 0xFF	; 255
    14de:	bc 01       	movw	r22, r24
    14e0:	cd 01       	movw	r24, r26
    14e2:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	f8 01       	movw	r30, r16
    14ec:	91 83       	std	Z+1, r25	; 0x01
    14ee:	80 83       	st	Z, r24
    14f0:	24 c0       	rjmp	.+72     	; 0x153a <LCD_vInit+0x2e6>
    14f2:	ce 01       	movw	r24, r28
    14f4:	89 5b       	subi	r24, 0xB9	; 185
    14f6:	9f 4f       	sbci	r25, 0xFF	; 255
    14f8:	29 e1       	ldi	r18, 0x19	; 25
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	fc 01       	movw	r30, r24
    14fe:	31 83       	std	Z+1, r19	; 0x01
    1500:	20 83       	st	Z, r18
    1502:	ce 01       	movw	r24, r28
    1504:	89 5b       	subi	r24, 0xB9	; 185
    1506:	9f 4f       	sbci	r25, 0xFF	; 255
    1508:	fc 01       	movw	r30, r24
    150a:	80 81       	ld	r24, Z
    150c:	91 81       	ldd	r25, Z+1	; 0x01
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	f1 f7       	brne	.-4      	; 0x150e <LCD_vInit+0x2ba>
    1512:	9e 01       	movw	r18, r28
    1514:	29 5b       	subi	r18, 0xB9	; 185
    1516:	3f 4f       	sbci	r19, 0xFF	; 255
    1518:	f9 01       	movw	r30, r18
    151a:	91 83       	std	Z+1, r25	; 0x01
    151c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    151e:	ce 01       	movw	r24, r28
    1520:	8b 5b       	subi	r24, 0xBB	; 187
    1522:	9f 4f       	sbci	r25, 0xFF	; 255
    1524:	9e 01       	movw	r18, r28
    1526:	2b 5b       	subi	r18, 0xBB	; 187
    1528:	3f 4f       	sbci	r19, 0xFF	; 255
    152a:	f9 01       	movw	r30, r18
    152c:	20 81       	ld	r18, Z
    152e:	31 81       	ldd	r19, Z+1	; 0x01
    1530:	21 50       	subi	r18, 0x01	; 1
    1532:	31 09       	sbc	r19, r1
    1534:	fc 01       	movw	r30, r24
    1536:	31 83       	std	Z+1, r19	; 0x01
    1538:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153a:	ce 01       	movw	r24, r28
    153c:	8b 5b       	subi	r24, 0xBB	; 187
    153e:	9f 4f       	sbci	r25, 0xFF	; 255
    1540:	fc 01       	movw	r30, r24
    1542:	80 81       	ld	r24, Z
    1544:	91 81       	ldd	r25, Z+1	; 0x01
    1546:	89 2b       	or	r24, r25
    1548:	a1 f6       	brne	.-88     	; 0x14f2 <LCD_vInit+0x29e>
    154a:	2c c0       	rjmp	.+88     	; 0x15a4 <LCD_vInit+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154c:	8e 01       	movw	r16, r28
    154e:	0b 5b       	subi	r16, 0xBB	; 187
    1550:	1f 4f       	sbci	r17, 0xFF	; 255
    1552:	ce 01       	movw	r24, r28
    1554:	8f 5b       	subi	r24, 0xBF	; 191
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	fc 01       	movw	r30, r24
    155a:	60 81       	ld	r22, Z
    155c:	71 81       	ldd	r23, Z+1	; 0x01
    155e:	82 81       	ldd	r24, Z+2	; 0x02
    1560:	93 81       	ldd	r25, Z+3	; 0x03
    1562:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	f8 01       	movw	r30, r16
    156c:	91 83       	std	Z+1, r25	; 0x01
    156e:	80 83       	st	Z, r24
    1570:	ce 01       	movw	r24, r28
    1572:	87 5b       	subi	r24, 0xB7	; 183
    1574:	9f 4f       	sbci	r25, 0xFF	; 255
    1576:	9e 01       	movw	r18, r28
    1578:	2b 5b       	subi	r18, 0xBB	; 187
    157a:	3f 4f       	sbci	r19, 0xFF	; 255
    157c:	f9 01       	movw	r30, r18
    157e:	20 81       	ld	r18, Z
    1580:	31 81       	ldd	r19, Z+1	; 0x01
    1582:	fc 01       	movw	r30, r24
    1584:	31 83       	std	Z+1, r19	; 0x01
    1586:	20 83       	st	Z, r18
    1588:	ce 01       	movw	r24, r28
    158a:	87 5b       	subi	r24, 0xB7	; 183
    158c:	9f 4f       	sbci	r25, 0xFF	; 255
    158e:	fc 01       	movw	r30, r24
    1590:	80 81       	ld	r24, Z
    1592:	91 81       	ldd	r25, Z+1	; 0x01
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	f1 f7       	brne	.-4      	; 0x1594 <LCD_vInit+0x340>
    1598:	9e 01       	movw	r18, r28
    159a:	27 5b       	subi	r18, 0xB7	; 183
    159c:	3f 4f       	sbci	r19, 0xFF	; 255
    159e:	f9 01       	movw	r30, r18
    15a0:	91 83       	std	Z+1, r25	; 0x01
    15a2:	80 83       	st	Z, r24
		_delay_ms(10);
		LCD_vSend_cmd(FOUR_BITS); /* 4-bits Mode */
    15a4:	88 e2       	ldi	r24, 0x28	; 40
    15a6:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <LCD_vSend_cmd>
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	a0 e8       	ldi	r26, 0x80	; 128
    15b0:	bf e3       	ldi	r27, 0x3F	; 63
    15b2:	89 87       	std	Y+9, r24	; 0x09
    15b4:	9a 87       	std	Y+10, r25	; 0x0a
    15b6:	ab 87       	std	Y+11, r26	; 0x0b
    15b8:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	4a e7       	ldi	r20, 0x7A	; 122
    15c0:	53 e4       	ldi	r21, 0x43	; 67
    15c2:	69 85       	ldd	r22, Y+9	; 0x09
    15c4:	7a 85       	ldd	r23, Y+10	; 0x0a
    15c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    15c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    15ca:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	8f ab       	std	Y+55, r24	; 0x37
    15d4:	98 af       	std	Y+56, r25	; 0x38
    15d6:	a9 af       	std	Y+57, r26	; 0x39
    15d8:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	40 e8       	ldi	r20, 0x80	; 128
    15e0:	5f e3       	ldi	r21, 0x3F	; 63
    15e2:	6f a9       	ldd	r22, Y+55	; 0x37
    15e4:	78 ad       	ldd	r23, Y+56	; 0x38
    15e6:	89 ad       	ldd	r24, Y+57	; 0x39
    15e8:	9a ad       	ldd	r25, Y+58	; 0x3a
    15ea:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__cmpsf2>
    15ee:	88 23       	and	r24, r24
    15f0:	2c f4       	brge	.+10     	; 0x15fc <LCD_vInit+0x3a8>
		__ticks = 1;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	9c af       	std	Y+60, r25	; 0x3c
    15f8:	8b af       	std	Y+59, r24	; 0x3b
    15fa:	3f c0       	rjmp	.+126    	; 0x167a <LCD_vInit+0x426>
	else if (__tmp > 65535)
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	3f ef       	ldi	r19, 0xFF	; 255
    1600:	4f e7       	ldi	r20, 0x7F	; 127
    1602:	57 e4       	ldi	r21, 0x47	; 71
    1604:	6f a9       	ldd	r22, Y+55	; 0x37
    1606:	78 ad       	ldd	r23, Y+56	; 0x38
    1608:	89 ad       	ldd	r24, Y+57	; 0x39
    160a:	9a ad       	ldd	r25, Y+58	; 0x3a
    160c:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__gesf2>
    1610:	18 16       	cp	r1, r24
    1612:	4c f5       	brge	.+82     	; 0x1666 <LCD_vInit+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	40 e2       	ldi	r20, 0x20	; 32
    161a:	51 e4       	ldi	r21, 0x41	; 65
    161c:	69 85       	ldd	r22, Y+9	; 0x09
    161e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1620:	8b 85       	ldd	r24, Y+11	; 0x0b
    1622:	9c 85       	ldd	r25, Y+12	; 0x0c
    1624:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	bc 01       	movw	r22, r24
    162e:	cd 01       	movw	r24, r26
    1630:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	9c af       	std	Y+60, r25	; 0x3c
    163a:	8b af       	std	Y+59, r24	; 0x3b
    163c:	0f c0       	rjmp	.+30     	; 0x165c <LCD_vInit+0x408>
    163e:	89 e1       	ldi	r24, 0x19	; 25
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	9e af       	std	Y+62, r25	; 0x3e
    1644:	8d af       	std	Y+61, r24	; 0x3d
    1646:	8d ad       	ldd	r24, Y+61	; 0x3d
    1648:	9e ad       	ldd	r25, Y+62	; 0x3e
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	f1 f7       	brne	.-4      	; 0x164a <LCD_vInit+0x3f6>
    164e:	9e af       	std	Y+62, r25	; 0x3e
    1650:	8d af       	std	Y+61, r24	; 0x3d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1652:	8b ad       	ldd	r24, Y+59	; 0x3b
    1654:	9c ad       	ldd	r25, Y+60	; 0x3c
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	9c af       	std	Y+60, r25	; 0x3c
    165a:	8b af       	std	Y+59, r24	; 0x3b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    165c:	8b ad       	ldd	r24, Y+59	; 0x3b
    165e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1660:	89 2b       	or	r24, r25
    1662:	69 f7       	brne	.-38     	; 0x163e <LCD_vInit+0x3ea>
    1664:	1e c0       	rjmp	.+60     	; 0x16a2 <LCD_vInit+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1666:	6f a9       	ldd	r22, Y+55	; 0x37
    1668:	78 ad       	ldd	r23, Y+56	; 0x38
    166a:	89 ad       	ldd	r24, Y+57	; 0x39
    166c:	9a ad       	ldd	r25, Y+58	; 0x3a
    166e:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	9c af       	std	Y+60, r25	; 0x3c
    1678:	8b af       	std	Y+59, r24	; 0x3b
    167a:	2b ad       	ldd	r18, Y+59	; 0x3b
    167c:	3c ad       	ldd	r19, Y+60	; 0x3c
    167e:	ce 01       	movw	r24, r28
    1680:	cf 96       	adiw	r24, 0x3f	; 63
    1682:	fc 01       	movw	r30, r24
    1684:	31 83       	std	Z+1, r19	; 0x01
    1686:	20 83       	st	Z, r18
    1688:	ce 01       	movw	r24, r28
    168a:	cf 96       	adiw	r24, 0x3f	; 63
    168c:	fc 01       	movw	r30, r24
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <LCD_vInit+0x43e>
    1696:	9e 01       	movw	r18, r28
    1698:	21 5c       	subi	r18, 0xC1	; 193
    169a:	3f 4f       	sbci	r19, 0xFF	; 255
    169c:	f9 01       	movw	r30, r18
    169e:	91 83       	std	Z+1, r25	; 0x01
    16a0:	80 83       	st	Z, r24
		_delay_ms(1);
		//LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON); /* Display ON Cursor ON */
		LCD_vSend_cmd(CURSOR_OFF_DISPLAN_OFF); /* Display OFF Cursor OFF */
    16a2:	8c e0       	ldi	r24, 0x0C	; 12
    16a4:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <LCD_vSend_cmd>
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	a0 e8       	ldi	r26, 0x80	; 128
    16ae:	bf e3       	ldi	r27, 0x3F	; 63
    16b0:	8d 87       	std	Y+13, r24	; 0x0d
    16b2:	9e 87       	std	Y+14, r25	; 0x0e
    16b4:	af 87       	std	Y+15, r26	; 0x0f
    16b6:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	4a e7       	ldi	r20, 0x7A	; 122
    16be:	53 e4       	ldi	r21, 0x43	; 67
    16c0:	6d 85       	ldd	r22, Y+13	; 0x0d
    16c2:	7e 85       	ldd	r23, Y+14	; 0x0e
    16c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    16c6:	98 89       	ldd	r25, Y+16	; 0x10
    16c8:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	8d a7       	std	Y+45, r24	; 0x2d
    16d2:	9e a7       	std	Y+46, r25	; 0x2e
    16d4:	af a7       	std	Y+47, r26	; 0x2f
    16d6:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	40 e8       	ldi	r20, 0x80	; 128
    16de:	5f e3       	ldi	r21, 0x3F	; 63
    16e0:	6d a5       	ldd	r22, Y+45	; 0x2d
    16e2:	7e a5       	ldd	r23, Y+46	; 0x2e
    16e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    16e6:	98 a9       	ldd	r25, Y+48	; 0x30
    16e8:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__cmpsf2>
    16ec:	88 23       	and	r24, r24
    16ee:	2c f4       	brge	.+10     	; 0x16fa <LCD_vInit+0x4a6>
		__ticks = 1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	9a ab       	std	Y+50, r25	; 0x32
    16f6:	89 ab       	std	Y+49, r24	; 0x31
    16f8:	3f c0       	rjmp	.+126    	; 0x1778 <LCD_vInit+0x524>
	else if (__tmp > 65535)
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	3f ef       	ldi	r19, 0xFF	; 255
    16fe:	4f e7       	ldi	r20, 0x7F	; 127
    1700:	57 e4       	ldi	r21, 0x47	; 71
    1702:	6d a5       	ldd	r22, Y+45	; 0x2d
    1704:	7e a5       	ldd	r23, Y+46	; 0x2e
    1706:	8f a5       	ldd	r24, Y+47	; 0x2f
    1708:	98 a9       	ldd	r25, Y+48	; 0x30
    170a:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__gesf2>
    170e:	18 16       	cp	r1, r24
    1710:	4c f5       	brge	.+82     	; 0x1764 <LCD_vInit+0x510>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e2       	ldi	r20, 0x20	; 32
    1718:	51 e4       	ldi	r21, 0x41	; 65
    171a:	6d 85       	ldd	r22, Y+13	; 0x0d
    171c:	7e 85       	ldd	r23, Y+14	; 0x0e
    171e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1720:	98 89       	ldd	r25, Y+16	; 0x10
    1722:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	bc 01       	movw	r22, r24
    172c:	cd 01       	movw	r24, r26
    172e:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	9a ab       	std	Y+50, r25	; 0x32
    1738:	89 ab       	std	Y+49, r24	; 0x31
    173a:	0f c0       	rjmp	.+30     	; 0x175a <LCD_vInit+0x506>
    173c:	89 e1       	ldi	r24, 0x19	; 25
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	9c ab       	std	Y+52, r25	; 0x34
    1742:	8b ab       	std	Y+51, r24	; 0x33
    1744:	8b a9       	ldd	r24, Y+51	; 0x33
    1746:	9c a9       	ldd	r25, Y+52	; 0x34
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <LCD_vInit+0x4f4>
    174c:	9c ab       	std	Y+52, r25	; 0x34
    174e:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1750:	89 a9       	ldd	r24, Y+49	; 0x31
    1752:	9a a9       	ldd	r25, Y+50	; 0x32
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	9a ab       	std	Y+50, r25	; 0x32
    1758:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175a:	89 a9       	ldd	r24, Y+49	; 0x31
    175c:	9a a9       	ldd	r25, Y+50	; 0x32
    175e:	89 2b       	or	r24, r25
    1760:	69 f7       	brne	.-38     	; 0x173c <LCD_vInit+0x4e8>
    1762:	14 c0       	rjmp	.+40     	; 0x178c <LCD_vInit+0x538>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1764:	6d a5       	ldd	r22, Y+45	; 0x2d
    1766:	7e a5       	ldd	r23, Y+46	; 0x2e
    1768:	8f a5       	ldd	r24, Y+47	; 0x2f
    176a:	98 a9       	ldd	r25, Y+48	; 0x30
    176c:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	9a ab       	std	Y+50, r25	; 0x32
    1776:	89 ab       	std	Y+49, r24	; 0x31
    1778:	89 a9       	ldd	r24, Y+49	; 0x31
    177a:	9a a9       	ldd	r25, Y+50	; 0x32
    177c:	9e ab       	std	Y+54, r25	; 0x36
    177e:	8d ab       	std	Y+53, r24	; 0x35
    1780:	8d a9       	ldd	r24, Y+53	; 0x35
    1782:	9e a9       	ldd	r25, Y+54	; 0x36
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <LCD_vInit+0x530>
    1788:	9e ab       	std	Y+54, r25	; 0x36
    178a:	8d ab       	std	Y+53, r24	; 0x35
		_delay_ms(1);
		LCD_vSend_cmd(CLR_SCREEN); /* Clear Screen */
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <LCD_vSend_cmd>
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	a0 e2       	ldi	r26, 0x20	; 32
    1798:	b1 e4       	ldi	r27, 0x41	; 65
    179a:	89 8b       	std	Y+17, r24	; 0x11
    179c:	9a 8b       	std	Y+18, r25	; 0x12
    179e:	ab 8b       	std	Y+19, r26	; 0x13
    17a0:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	4a e7       	ldi	r20, 0x7A	; 122
    17a8:	53 e4       	ldi	r21, 0x43	; 67
    17aa:	69 89       	ldd	r22, Y+17	; 0x11
    17ac:	7a 89       	ldd	r23, Y+18	; 0x12
    17ae:	8b 89       	ldd	r24, Y+19	; 0x13
    17b0:	9c 89       	ldd	r25, Y+20	; 0x14
    17b2:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	8b a3       	std	Y+35, r24	; 0x23
    17bc:	9c a3       	std	Y+36, r25	; 0x24
    17be:	ad a3       	std	Y+37, r26	; 0x25
    17c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e8       	ldi	r20, 0x80	; 128
    17c8:	5f e3       	ldi	r21, 0x3F	; 63
    17ca:	6b a1       	ldd	r22, Y+35	; 0x23
    17cc:	7c a1       	ldd	r23, Y+36	; 0x24
    17ce:	8d a1       	ldd	r24, Y+37	; 0x25
    17d0:	9e a1       	ldd	r25, Y+38	; 0x26
    17d2:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__cmpsf2>
    17d6:	88 23       	and	r24, r24
    17d8:	2c f4       	brge	.+10     	; 0x17e4 <LCD_vInit+0x590>
		__ticks = 1;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	98 a7       	std	Y+40, r25	; 0x28
    17e0:	8f a3       	std	Y+39, r24	; 0x27
    17e2:	3f c0       	rjmp	.+126    	; 0x1862 <LCD_vInit+0x60e>
	else if (__tmp > 65535)
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	3f ef       	ldi	r19, 0xFF	; 255
    17e8:	4f e7       	ldi	r20, 0x7F	; 127
    17ea:	57 e4       	ldi	r21, 0x47	; 71
    17ec:	6b a1       	ldd	r22, Y+35	; 0x23
    17ee:	7c a1       	ldd	r23, Y+36	; 0x24
    17f0:	8d a1       	ldd	r24, Y+37	; 0x25
    17f2:	9e a1       	ldd	r25, Y+38	; 0x26
    17f4:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__gesf2>
    17f8:	18 16       	cp	r1, r24
    17fa:	4c f5       	brge	.+82     	; 0x184e <LCD_vInit+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e2       	ldi	r20, 0x20	; 32
    1802:	51 e4       	ldi	r21, 0x41	; 65
    1804:	69 89       	ldd	r22, Y+17	; 0x11
    1806:	7a 89       	ldd	r23, Y+18	; 0x12
    1808:	8b 89       	ldd	r24, Y+19	; 0x13
    180a:	9c 89       	ldd	r25, Y+20	; 0x14
    180c:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	bc 01       	movw	r22, r24
    1816:	cd 01       	movw	r24, r26
    1818:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	98 a7       	std	Y+40, r25	; 0x28
    1822:	8f a3       	std	Y+39, r24	; 0x27
    1824:	0f c0       	rjmp	.+30     	; 0x1844 <LCD_vInit+0x5f0>
    1826:	89 e1       	ldi	r24, 0x19	; 25
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	9a a7       	std	Y+42, r25	; 0x2a
    182c:	89 a7       	std	Y+41, r24	; 0x29
    182e:	89 a5       	ldd	r24, Y+41	; 0x29
    1830:	9a a5       	ldd	r25, Y+42	; 0x2a
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	f1 f7       	brne	.-4      	; 0x1832 <LCD_vInit+0x5de>
    1836:	9a a7       	std	Y+42, r25	; 0x2a
    1838:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183a:	8f a1       	ldd	r24, Y+39	; 0x27
    183c:	98 a5       	ldd	r25, Y+40	; 0x28
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	98 a7       	std	Y+40, r25	; 0x28
    1842:	8f a3       	std	Y+39, r24	; 0x27
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1844:	8f a1       	ldd	r24, Y+39	; 0x27
    1846:	98 a5       	ldd	r25, Y+40	; 0x28
    1848:	89 2b       	or	r24, r25
    184a:	69 f7       	brne	.-38     	; 0x1826 <LCD_vInit+0x5d2>
    184c:	14 c0       	rjmp	.+40     	; 0x1876 <LCD_vInit+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184e:	6b a1       	ldd	r22, Y+35	; 0x23
    1850:	7c a1       	ldd	r23, Y+36	; 0x24
    1852:	8d a1       	ldd	r24, Y+37	; 0x25
    1854:	9e a1       	ldd	r25, Y+38	; 0x26
    1856:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	98 a7       	std	Y+40, r25	; 0x28
    1860:	8f a3       	std	Y+39, r24	; 0x27
    1862:	8f a1       	ldd	r24, Y+39	; 0x27
    1864:	98 a5       	ldd	r25, Y+40	; 0x28
    1866:	9c a7       	std	Y+44, r25	; 0x2c
    1868:	8b a7       	std	Y+43, r24	; 0x2b
    186a:	8b a5       	ldd	r24, Y+43	; 0x2b
    186c:	9c a5       	ldd	r25, Y+44	; 0x2c
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <LCD_vInit+0x61a>
    1872:	9c a7       	std	Y+44, r25	; 0x2c
    1874:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);
		LCD_vSend_cmd(ENTRY_MODE); /* Entry Mode */
    1876:	86 e0       	ldi	r24, 0x06	; 6
    1878:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <LCD_vSend_cmd>
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	a0 e8       	ldi	r26, 0x80	; 128
    1882:	bf e3       	ldi	r27, 0x3F	; 63
    1884:	8d 8b       	std	Y+21, r24	; 0x15
    1886:	9e 8b       	std	Y+22, r25	; 0x16
    1888:	af 8b       	std	Y+23, r26	; 0x17
    188a:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	4a e7       	ldi	r20, 0x7A	; 122
    1892:	53 e4       	ldi	r21, 0x43	; 67
    1894:	6d 89       	ldd	r22, Y+21	; 0x15
    1896:	7e 89       	ldd	r23, Y+22	; 0x16
    1898:	8f 89       	ldd	r24, Y+23	; 0x17
    189a:	98 8d       	ldd	r25, Y+24	; 0x18
    189c:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	89 8f       	std	Y+25, r24	; 0x19
    18a6:	9a 8f       	std	Y+26, r25	; 0x1a
    18a8:	ab 8f       	std	Y+27, r26	; 0x1b
    18aa:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e8       	ldi	r20, 0x80	; 128
    18b2:	5f e3       	ldi	r21, 0x3F	; 63
    18b4:	69 8d       	ldd	r22, Y+25	; 0x19
    18b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18bc:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__cmpsf2>
    18c0:	88 23       	and	r24, r24
    18c2:	2c f4       	brge	.+10     	; 0x18ce <LCD_vInit+0x67a>
		__ticks = 1;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	9e 8f       	std	Y+30, r25	; 0x1e
    18ca:	8d 8f       	std	Y+29, r24	; 0x1d
    18cc:	3f c0       	rjmp	.+126    	; 0x194c <LCD_vInit+0x6f8>
	else if (__tmp > 65535)
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	3f ef       	ldi	r19, 0xFF	; 255
    18d2:	4f e7       	ldi	r20, 0x7F	; 127
    18d4:	57 e4       	ldi	r21, 0x47	; 71
    18d6:	69 8d       	ldd	r22, Y+25	; 0x19
    18d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18de:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__gesf2>
    18e2:	18 16       	cp	r1, r24
    18e4:	4c f5       	brge	.+82     	; 0x1938 <LCD_vInit+0x6e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e2       	ldi	r20, 0x20	; 32
    18ec:	51 e4       	ldi	r21, 0x41	; 65
    18ee:	6d 89       	ldd	r22, Y+21	; 0x15
    18f0:	7e 89       	ldd	r23, Y+22	; 0x16
    18f2:	8f 89       	ldd	r24, Y+23	; 0x17
    18f4:	98 8d       	ldd	r25, Y+24	; 0x18
    18f6:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	bc 01       	movw	r22, r24
    1900:	cd 01       	movw	r24, r26
    1902:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	9e 8f       	std	Y+30, r25	; 0x1e
    190c:	8d 8f       	std	Y+29, r24	; 0x1d
    190e:	0f c0       	rjmp	.+30     	; 0x192e <LCD_vInit+0x6da>
    1910:	89 e1       	ldi	r24, 0x19	; 25
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	98 a3       	std	Y+32, r25	; 0x20
    1916:	8f 8f       	std	Y+31, r24	; 0x1f
    1918:	8f 8d       	ldd	r24, Y+31	; 0x1f
    191a:	98 a1       	ldd	r25, Y+32	; 0x20
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	f1 f7       	brne	.-4      	; 0x191c <LCD_vInit+0x6c8>
    1920:	98 a3       	std	Y+32, r25	; 0x20
    1922:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1924:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1926:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	9e 8f       	std	Y+30, r25	; 0x1e
    192c:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1930:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1932:	89 2b       	or	r24, r25
    1934:	69 f7       	brne	.-38     	; 0x1910 <LCD_vInit+0x6bc>
		_delay_ms(1);

	#endif
}
    1936:	14 c0       	rjmp	.+40     	; 0x1960 <LCD_vInit+0x70c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1938:	69 8d       	ldd	r22, Y+25	; 0x19
    193a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    193c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    193e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1940:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	9e 8f       	std	Y+30, r25	; 0x1e
    194a:	8d 8f       	std	Y+29, r24	; 0x1d
    194c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    194e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1950:	9a a3       	std	Y+34, r25	; 0x22
    1952:	89 a3       	std	Y+33, r24	; 0x21
    1954:	89 a1       	ldd	r24, Y+33	; 0x21
    1956:	9a a1       	ldd	r25, Y+34	; 0x22
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	f1 f7       	brne	.-4      	; 0x1958 <LCD_vInit+0x704>
    195c:	9a a3       	std	Y+34, r25	; 0x22
    195e:	89 a3       	std	Y+33, r24	; 0x21
    1960:	00 00       	nop
    1962:	cc 5a       	subi	r28, 0xAC	; 172
    1964:	df 4f       	sbci	r29, 0xFF	; 255
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	1f 91       	pop	r17
    1976:	0f 91       	pop	r16
    1978:	08 95       	ret

0000197a <send_falling_edge>:

void send_falling_edge(void)
{
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
    1982:	6c 97       	sbiw	r28, 0x1c	; 28
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	cd bf       	out	0x3d, r28	; 61
	DIO_write(EN_PORT, EN_PIN, 1);
    198e:	41 e0       	ldi	r20, 0x01	; 1
    1990:	63 e0       	ldi	r22, 0x03	; 3
    1992:	81 e4       	ldi	r24, 0x41	; 65
    1994:	0e 94 a4 11 	call	0x2348	; 0x2348 <DIO_write>
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	a0 e0       	ldi	r26, 0x00	; 0
    199e:	b0 e4       	ldi	r27, 0x40	; 64
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	9a 83       	std	Y+2, r25	; 0x02
    19a4:	ab 83       	std	Y+3, r26	; 0x03
    19a6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	4a e7       	ldi	r20, 0x7A	; 122
    19ae:	53 e4       	ldi	r21, 0x43	; 67
    19b0:	69 81       	ldd	r22, Y+1	; 0x01
    19b2:	7a 81       	ldd	r23, Y+2	; 0x02
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9c 81       	ldd	r25, Y+4	; 0x04
    19b8:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	8b 8b       	std	Y+19, r24	; 0x13
    19c2:	9c 8b       	std	Y+20, r25	; 0x14
    19c4:	ad 8b       	std	Y+21, r26	; 0x15
    19c6:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e8       	ldi	r20, 0x80	; 128
    19ce:	5f e3       	ldi	r21, 0x3F	; 63
    19d0:	6b 89       	ldd	r22, Y+19	; 0x13
    19d2:	7c 89       	ldd	r23, Y+20	; 0x14
    19d4:	8d 89       	ldd	r24, Y+21	; 0x15
    19d6:	9e 89       	ldd	r25, Y+22	; 0x16
    19d8:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__cmpsf2>
    19dc:	88 23       	and	r24, r24
    19de:	2c f4       	brge	.+10     	; 0x19ea <send_falling_edge+0x70>
		__ticks = 1;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	98 8f       	std	Y+24, r25	; 0x18
    19e6:	8f 8b       	std	Y+23, r24	; 0x17
    19e8:	3f c0       	rjmp	.+126    	; 0x1a68 <send_falling_edge+0xee>
	else if (__tmp > 65535)
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	3f ef       	ldi	r19, 0xFF	; 255
    19ee:	4f e7       	ldi	r20, 0x7F	; 127
    19f0:	57 e4       	ldi	r21, 0x47	; 71
    19f2:	6b 89       	ldd	r22, Y+19	; 0x13
    19f4:	7c 89       	ldd	r23, Y+20	; 0x14
    19f6:	8d 89       	ldd	r24, Y+21	; 0x15
    19f8:	9e 89       	ldd	r25, Y+22	; 0x16
    19fa:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__gesf2>
    19fe:	18 16       	cp	r1, r24
    1a00:	4c f5       	brge	.+82     	; 0x1a54 <send_falling_edge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e2       	ldi	r20, 0x20	; 32
    1a08:	51 e4       	ldi	r21, 0x41	; 65
    1a0a:	69 81       	ldd	r22, Y+1	; 0x01
    1a0c:	7a 81       	ldd	r23, Y+2	; 0x02
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	9c 81       	ldd	r25, Y+4	; 0x04
    1a12:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	bc 01       	movw	r22, r24
    1a1c:	cd 01       	movw	r24, r26
    1a1e:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	98 8f       	std	Y+24, r25	; 0x18
    1a28:	8f 8b       	std	Y+23, r24	; 0x17
    1a2a:	0f c0       	rjmp	.+30     	; 0x1a4a <send_falling_edge+0xd0>
    1a2c:	89 e1       	ldi	r24, 0x19	; 25
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	9a 8f       	std	Y+26, r25	; 0x1a
    1a32:	89 8f       	std	Y+25, r24	; 0x19
    1a34:	89 8d       	ldd	r24, Y+25	; 0x19
    1a36:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <send_falling_edge+0xbe>
    1a3c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a3e:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a40:	8f 89       	ldd	r24, Y+23	; 0x17
    1a42:	98 8d       	ldd	r25, Y+24	; 0x18
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	98 8f       	std	Y+24, r25	; 0x18
    1a48:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a4e:	89 2b       	or	r24, r25
    1a50:	69 f7       	brne	.-38     	; 0x1a2c <send_falling_edge+0xb2>
    1a52:	14 c0       	rjmp	.+40     	; 0x1a7c <send_falling_edge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a54:	6b 89       	ldd	r22, Y+19	; 0x13
    1a56:	7c 89       	ldd	r23, Y+20	; 0x14
    1a58:	8d 89       	ldd	r24, Y+21	; 0x15
    1a5a:	9e 89       	ldd	r25, Y+22	; 0x16
    1a5c:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	98 8f       	std	Y+24, r25	; 0x18
    1a66:	8f 8b       	std	Y+23, r24	; 0x17
    1a68:	8f 89       	ldd	r24, Y+23	; 0x17
    1a6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a6c:	9c 8f       	std	Y+28, r25	; 0x1c
    1a6e:	8b 8f       	std	Y+27, r24	; 0x1b
    1a70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	f1 f7       	brne	.-4      	; 0x1a74 <send_falling_edge+0xfa>
    1a78:	9c 8f       	std	Y+28, r25	; 0x1c
    1a7a:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(2);
	DIO_write(EN_PORT, EN_PIN, 0);
    1a7c:	40 e0       	ldi	r20, 0x00	; 0
    1a7e:	63 e0       	ldi	r22, 0x03	; 3
    1a80:	81 e4       	ldi	r24, 0x41	; 65
    1a82:	0e 94 a4 11 	call	0x2348	; 0x2348 <DIO_write>
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	a0 e0       	ldi	r26, 0x00	; 0
    1a8c:	b0 e4       	ldi	r27, 0x40	; 64
    1a8e:	8d 83       	std	Y+5, r24	; 0x05
    1a90:	9e 83       	std	Y+6, r25	; 0x06
    1a92:	af 83       	std	Y+7, r26	; 0x07
    1a94:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	4a e7       	ldi	r20, 0x7A	; 122
    1a9c:	53 e4       	ldi	r21, 0x43	; 67
    1a9e:	6d 81       	ldd	r22, Y+5	; 0x05
    1aa0:	7e 81       	ldd	r23, Y+6	; 0x06
    1aa2:	8f 81       	ldd	r24, Y+7	; 0x07
    1aa4:	98 85       	ldd	r25, Y+8	; 0x08
    1aa6:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	89 87       	std	Y+9, r24	; 0x09
    1ab0:	9a 87       	std	Y+10, r25	; 0x0a
    1ab2:	ab 87       	std	Y+11, r26	; 0x0b
    1ab4:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e8       	ldi	r20, 0x80	; 128
    1abc:	5f e3       	ldi	r21, 0x3F	; 63
    1abe:	69 85       	ldd	r22, Y+9	; 0x09
    1ac0:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ac2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ac4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ac6:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__cmpsf2>
    1aca:	88 23       	and	r24, r24
    1acc:	2c f4       	brge	.+10     	; 0x1ad8 <send_falling_edge+0x15e>
		__ticks = 1;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9e 87       	std	Y+14, r25	; 0x0e
    1ad4:	8d 87       	std	Y+13, r24	; 0x0d
    1ad6:	3f c0       	rjmp	.+126    	; 0x1b56 <send_falling_edge+0x1dc>
	else if (__tmp > 65535)
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	3f ef       	ldi	r19, 0xFF	; 255
    1adc:	4f e7       	ldi	r20, 0x7F	; 127
    1ade:	57 e4       	ldi	r21, 0x47	; 71
    1ae0:	69 85       	ldd	r22, Y+9	; 0x09
    1ae2:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ae4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ae6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ae8:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__gesf2>
    1aec:	18 16       	cp	r1, r24
    1aee:	4c f5       	brge	.+82     	; 0x1b42 <send_falling_edge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e2       	ldi	r20, 0x20	; 32
    1af6:	51 e4       	ldi	r21, 0x41	; 65
    1af8:	6d 81       	ldd	r22, Y+5	; 0x05
    1afa:	7e 81       	ldd	r23, Y+6	; 0x06
    1afc:	8f 81       	ldd	r24, Y+7	; 0x07
    1afe:	98 85       	ldd	r25, Y+8	; 0x08
    1b00:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	bc 01       	movw	r22, r24
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9e 87       	std	Y+14, r25	; 0x0e
    1b16:	8d 87       	std	Y+13, r24	; 0x0d
    1b18:	0f c0       	rjmp	.+30     	; 0x1b38 <send_falling_edge+0x1be>
    1b1a:	89 e1       	ldi	r24, 0x19	; 25
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	98 8b       	std	Y+16, r25	; 0x10
    1b20:	8f 87       	std	Y+15, r24	; 0x0f
    1b22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b24:	98 89       	ldd	r25, Y+16	; 0x10
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <send_falling_edge+0x1ac>
    1b2a:	98 8b       	std	Y+16, r25	; 0x10
    1b2c:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	9e 87       	std	Y+14, r25	; 0x0e
    1b36:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3c:	89 2b       	or	r24, r25
    1b3e:	69 f7       	brne	.-38     	; 0x1b1a <send_falling_edge+0x1a0>
	_delay_ms(2);
}
    1b40:	14 c0       	rjmp	.+40     	; 0x1b6a <send_falling_edge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b42:	69 85       	ldd	r22, Y+9	; 0x09
    1b44:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b46:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b48:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b4a:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	9e 87       	std	Y+14, r25	; 0x0e
    1b54:	8d 87       	std	Y+13, r24	; 0x0d
    1b56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5a:	9a 8b       	std	Y+18, r25	; 0x12
    1b5c:	89 8b       	std	Y+17, r24	; 0x11
    1b5e:	89 89       	ldd	r24, Y+17	; 0x11
    1b60:	9a 89       	ldd	r25, Y+18	; 0x12
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <send_falling_edge+0x1e8>
    1b66:	9a 8b       	std	Y+18, r25	; 0x12
    1b68:	89 8b       	std	Y+17, r24	; 0x11
    1b6a:	00 00       	nop
    1b6c:	6c 96       	adiw	r28, 0x1c	; 28
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	08 95       	ret

00001b7e <LCD_vSend_cmd>:

void LCD_vSend_cmd(c8 cmd)
{
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	2f 97       	sbiw	r28, 0x0f	; 15
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	8f 87       	std	Y+15, r24	; 0x0f
		DIO_write(RS_PORT, RS_PIN, 0);
		send_falling_edge();
	
	/* We will work on 4-bis Mode */
	#elif defined four_bits_mode
		write_high_nibble(LCD_PORT, cmd >> 4);
    1b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b96:	82 95       	swap	r24
    1b98:	8f 70       	andi	r24, 0x0F	; 15
    1b9a:	68 2f       	mov	r22, r24
    1b9c:	84 e4       	ldi	r24, 0x44	; 68
    1b9e:	0e 94 f5 12 	call	0x25ea	; 0x25ea <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 0);
    1ba2:	40 e0       	ldi	r20, 0x00	; 0
    1ba4:	61 e0       	ldi	r22, 0x01	; 1
    1ba6:	81 e4       	ldi	r24, 0x41	; 65
    1ba8:	0e 94 a4 11 	call	0x2348	; 0x2348 <DIO_write>
		send_falling_edge();
    1bac:	0e 94 bd 0c 	call	0x197a	; 0x197a <send_falling_edge>
		write_high_nibble(LCD_PORT, cmd);
    1bb0:	6f 85       	ldd	r22, Y+15	; 0x0f
    1bb2:	84 e4       	ldi	r24, 0x44	; 68
    1bb4:	0e 94 f5 12 	call	0x25ea	; 0x25ea <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 0);
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	61 e0       	ldi	r22, 0x01	; 1
    1bbc:	81 e4       	ldi	r24, 0x41	; 65
    1bbe:	0e 94 a4 11 	call	0x2348	; 0x2348 <DIO_write>
		send_falling_edge();
    1bc2:	0e 94 bd 0c 	call	0x197a	; 0x197a <send_falling_edge>
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	a0 e8       	ldi	r26, 0x80	; 128
    1bcc:	bf e3       	ldi	r27, 0x3F	; 63
    1bce:	89 83       	std	Y+1, r24	; 0x01
    1bd0:	9a 83       	std	Y+2, r25	; 0x02
    1bd2:	ab 83       	std	Y+3, r26	; 0x03
    1bd4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	4a e7       	ldi	r20, 0x7A	; 122
    1bdc:	53 e4       	ldi	r21, 0x43	; 67
    1bde:	69 81       	ldd	r22, Y+1	; 0x01
    1be0:	7a 81       	ldd	r23, Y+2	; 0x02
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	9c 81       	ldd	r25, Y+4	; 0x04
    1be6:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	8d 83       	std	Y+5, r24	; 0x05
    1bf0:	9e 83       	std	Y+6, r25	; 0x06
    1bf2:	af 83       	std	Y+7, r26	; 0x07
    1bf4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	40 e8       	ldi	r20, 0x80	; 128
    1bfc:	5f e3       	ldi	r21, 0x3F	; 63
    1bfe:	6d 81       	ldd	r22, Y+5	; 0x05
    1c00:	7e 81       	ldd	r23, Y+6	; 0x06
    1c02:	8f 81       	ldd	r24, Y+7	; 0x07
    1c04:	98 85       	ldd	r25, Y+8	; 0x08
    1c06:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__cmpsf2>
    1c0a:	88 23       	and	r24, r24
    1c0c:	2c f4       	brge	.+10     	; 0x1c18 <LCD_vSend_cmd+0x9a>
		__ticks = 1;
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	9a 87       	std	Y+10, r25	; 0x0a
    1c14:	89 87       	std	Y+9, r24	; 0x09
    1c16:	3f c0       	rjmp	.+126    	; 0x1c96 <LCD_vSend_cmd+0x118>
	else if (__tmp > 65535)
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	3f ef       	ldi	r19, 0xFF	; 255
    1c1c:	4f e7       	ldi	r20, 0x7F	; 127
    1c1e:	57 e4       	ldi	r21, 0x47	; 71
    1c20:	6d 81       	ldd	r22, Y+5	; 0x05
    1c22:	7e 81       	ldd	r23, Y+6	; 0x06
    1c24:	8f 81       	ldd	r24, Y+7	; 0x07
    1c26:	98 85       	ldd	r25, Y+8	; 0x08
    1c28:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__gesf2>
    1c2c:	18 16       	cp	r1, r24
    1c2e:	4c f5       	brge	.+82     	; 0x1c82 <LCD_vSend_cmd+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e2       	ldi	r20, 0x20	; 32
    1c36:	51 e4       	ldi	r21, 0x41	; 65
    1c38:	69 81       	ldd	r22, Y+1	; 0x01
    1c3a:	7a 81       	ldd	r23, Y+2	; 0x02
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c40:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	bc 01       	movw	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	9a 87       	std	Y+10, r25	; 0x0a
    1c56:	89 87       	std	Y+9, r24	; 0x09
    1c58:	0f c0       	rjmp	.+30     	; 0x1c78 <LCD_vSend_cmd+0xfa>
    1c5a:	89 e1       	ldi	r24, 0x19	; 25
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	9c 87       	std	Y+12, r25	; 0x0c
    1c60:	8b 87       	std	Y+11, r24	; 0x0b
    1c62:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c64:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <LCD_vSend_cmd+0xe8>
    1c6a:	9c 87       	std	Y+12, r25	; 0x0c
    1c6c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6e:	89 85       	ldd	r24, Y+9	; 0x09
    1c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	9a 87       	std	Y+10, r25	; 0x0a
    1c76:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c78:	89 85       	ldd	r24, Y+9	; 0x09
    1c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7c:	89 2b       	or	r24, r25
    1c7e:	69 f7       	brne	.-38     	; 0x1c5a <LCD_vSend_cmd+0xdc>

	#endif
	_delay_ms(1);
}
    1c80:	14 c0       	rjmp	.+40     	; 0x1caa <LCD_vSend_cmd+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c82:	6d 81       	ldd	r22, Y+5	; 0x05
    1c84:	7e 81       	ldd	r23, Y+6	; 0x06
    1c86:	8f 81       	ldd	r24, Y+7	; 0x07
    1c88:	98 85       	ldd	r25, Y+8	; 0x08
    1c8a:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	9a 87       	std	Y+10, r25	; 0x0a
    1c94:	89 87       	std	Y+9, r24	; 0x09
    1c96:	89 85       	ldd	r24, Y+9	; 0x09
    1c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9a:	9e 87       	std	Y+14, r25	; 0x0e
    1c9c:	8d 87       	std	Y+13, r24	; 0x0d
    1c9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	f1 f7       	brne	.-4      	; 0x1ca2 <LCD_vSend_cmd+0x124>
    1ca6:	9e 87       	std	Y+14, r25	; 0x0e
    1ca8:	8d 87       	std	Y+13, r24	; 0x0d
    1caa:	00 00       	nop
    1cac:	2f 96       	adiw	r28, 0x0f	; 15
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	de bf       	out	0x3e, r29	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	08 95       	ret

00001cbe <LCD_vSend_char>:

void LCD_vSend_char(c8 data)
{
    1cbe:	cf 93       	push	r28
    1cc0:	df 93       	push	r29
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	2f 97       	sbiw	r28, 0x0f	; 15
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	de bf       	out	0x3e, r29	; 62
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	cd bf       	out	0x3d, r28	; 61
    1cd2:	8f 87       	std	Y+15, r24	; 0x0f
		DIO_write(RS_PORT, RS_PIN, 1);
		send_falling_edge();
	
	/* We will work on 4-bis Mode */
	#elif defined four_bits_mode
		write_high_nibble(LCD_PORT, (data >> 4));
    1cd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd6:	82 95       	swap	r24
    1cd8:	8f 70       	andi	r24, 0x0F	; 15
    1cda:	68 2f       	mov	r22, r24
    1cdc:	84 e4       	ldi	r24, 0x44	; 68
    1cde:	0e 94 f5 12 	call	0x25ea	; 0x25ea <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 1);
    1ce2:	41 e0       	ldi	r20, 0x01	; 1
    1ce4:	61 e0       	ldi	r22, 0x01	; 1
    1ce6:	81 e4       	ldi	r24, 0x41	; 65
    1ce8:	0e 94 a4 11 	call	0x2348	; 0x2348 <DIO_write>
		send_falling_edge();
    1cec:	0e 94 bd 0c 	call	0x197a	; 0x197a <send_falling_edge>
		write_high_nibble(LCD_PORT, data);
    1cf0:	6f 85       	ldd	r22, Y+15	; 0x0f
    1cf2:	84 e4       	ldi	r24, 0x44	; 68
    1cf4:	0e 94 f5 12 	call	0x25ea	; 0x25ea <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 1);
    1cf8:	41 e0       	ldi	r20, 0x01	; 1
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	81 e4       	ldi	r24, 0x41	; 65
    1cfe:	0e 94 a4 11 	call	0x2348	; 0x2348 <DIO_write>
		send_falling_edge();
    1d02:	0e 94 bd 0c 	call	0x197a	; 0x197a <send_falling_edge>
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	a0 e8       	ldi	r26, 0x80	; 128
    1d0c:	bf e3       	ldi	r27, 0x3F	; 63
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	9a 83       	std	Y+2, r25	; 0x02
    1d12:	ab 83       	std	Y+3, r26	; 0x03
    1d14:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	4a e7       	ldi	r20, 0x7A	; 122
    1d1c:	53 e4       	ldi	r21, 0x43	; 67
    1d1e:	69 81       	ldd	r22, Y+1	; 0x01
    1d20:	7a 81       	ldd	r23, Y+2	; 0x02
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	9c 81       	ldd	r25, Y+4	; 0x04
    1d26:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	8d 83       	std	Y+5, r24	; 0x05
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	af 83       	std	Y+7, r26	; 0x07
    1d34:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e8       	ldi	r20, 0x80	; 128
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	6d 81       	ldd	r22, Y+5	; 0x05
    1d40:	7e 81       	ldd	r23, Y+6	; 0x06
    1d42:	8f 81       	ldd	r24, Y+7	; 0x07
    1d44:	98 85       	ldd	r25, Y+8	; 0x08
    1d46:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__cmpsf2>
    1d4a:	88 23       	and	r24, r24
    1d4c:	2c f4       	brge	.+10     	; 0x1d58 <LCD_vSend_char+0x9a>
		__ticks = 1;
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	9a 87       	std	Y+10, r25	; 0x0a
    1d54:	89 87       	std	Y+9, r24	; 0x09
    1d56:	3f c0       	rjmp	.+126    	; 0x1dd6 <LCD_vSend_char+0x118>
	else if (__tmp > 65535)
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	3f ef       	ldi	r19, 0xFF	; 255
    1d5c:	4f e7       	ldi	r20, 0x7F	; 127
    1d5e:	57 e4       	ldi	r21, 0x47	; 71
    1d60:	6d 81       	ldd	r22, Y+5	; 0x05
    1d62:	7e 81       	ldd	r23, Y+6	; 0x06
    1d64:	8f 81       	ldd	r24, Y+7	; 0x07
    1d66:	98 85       	ldd	r25, Y+8	; 0x08
    1d68:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__gesf2>
    1d6c:	18 16       	cp	r1, r24
    1d6e:	4c f5       	brge	.+82     	; 0x1dc2 <LCD_vSend_char+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e2       	ldi	r20, 0x20	; 32
    1d76:	51 e4       	ldi	r21, 0x41	; 65
    1d78:	69 81       	ldd	r22, Y+1	; 0x01
    1d7a:	7a 81       	ldd	r23, Y+2	; 0x02
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d80:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	bc 01       	movw	r22, r24
    1d8a:	cd 01       	movw	r24, r26
    1d8c:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	9a 87       	std	Y+10, r25	; 0x0a
    1d96:	89 87       	std	Y+9, r24	; 0x09
    1d98:	0f c0       	rjmp	.+30     	; 0x1db8 <LCD_vSend_char+0xfa>
    1d9a:	89 e1       	ldi	r24, 0x19	; 25
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	9c 87       	std	Y+12, r25	; 0x0c
    1da0:	8b 87       	std	Y+11, r24	; 0x0b
    1da2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1da4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <LCD_vSend_char+0xe8>
    1daa:	9c 87       	std	Y+12, r25	; 0x0c
    1dac:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dae:	89 85       	ldd	r24, Y+9	; 0x09
    1db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	9a 87       	std	Y+10, r25	; 0x0a
    1db6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db8:	89 85       	ldd	r24, Y+9	; 0x09
    1dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dbc:	89 2b       	or	r24, r25
    1dbe:	69 f7       	brne	.-38     	; 0x1d9a <LCD_vSend_char+0xdc>

	#endif
	_delay_ms(1);
}
    1dc0:	14 c0       	rjmp	.+40     	; 0x1dea <LCD_vSend_char+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc2:	6d 81       	ldd	r22, Y+5	; 0x05
    1dc4:	7e 81       	ldd	r23, Y+6	; 0x06
    1dc6:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc8:	98 85       	ldd	r25, Y+8	; 0x08
    1dca:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	9a 87       	std	Y+10, r25	; 0x0a
    1dd4:	89 87       	std	Y+9, r24	; 0x09
    1dd6:	89 85       	ldd	r24, Y+9	; 0x09
    1dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dda:	9e 87       	std	Y+14, r25	; 0x0e
    1ddc:	8d 87       	std	Y+13, r24	; 0x0d
    1dde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <LCD_vSend_char+0x124>
    1de6:	9e 87       	std	Y+14, r25	; 0x0e
    1de8:	8d 87       	std	Y+13, r24	; 0x0d
    1dea:	00 00       	nop
    1dec:	2f 96       	adiw	r28, 0x0f	; 15
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	f8 94       	cli
    1df2:	de bf       	out	0x3e, r29	; 62
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	cd bf       	out	0x3d, r28	; 61
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	08 95       	ret

00001dfe <LCD_vSend_string>:

void LCD_vSend_string(c8 * data)
{
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <LCD_vSend_string+0x6>
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	9a 83       	std	Y+2, r25	; 0x02
    1e0a:	89 83       	std	Y+1, r24	; 0x01
	/* (*data): Pointer to first char of string */
    for (counter = 0; data[counter] != '\0'; ++counter)
    1e0c:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <counter>
    1e10:	11 c0       	rjmp	.+34     	; 0x1e34 <LCD_vSend_string+0x36>
    {
	    LCD_vSend_char(data[counter]);
    1e12:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <counter>
    1e16:	88 2f       	mov	r24, r24
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	29 81       	ldd	r18, Y+1	; 0x01
    1e1c:	3a 81       	ldd	r19, Y+2	; 0x02
    1e1e:	82 0f       	add	r24, r18
    1e20:	93 1f       	adc	r25, r19
    1e22:	fc 01       	movw	r30, r24
    1e24:	80 81       	ld	r24, Z
    1e26:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <LCD_vSend_char>
}

void LCD_vSend_string(c8 * data)
{
	/* (*data): Pointer to first char of string */
    for (counter = 0; data[counter] != '\0'; ++counter)
    1e2a:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <counter>
    1e2e:	8f 5f       	subi	r24, 0xFF	; 255
    1e30:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <counter>
    1e34:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <counter>
    1e38:	88 2f       	mov	r24, r24
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	29 81       	ldd	r18, Y+1	; 0x01
    1e3e:	3a 81       	ldd	r19, Y+2	; 0x02
    1e40:	82 0f       	add	r24, r18
    1e42:	93 1f       	adc	r25, r19
    1e44:	fc 01       	movw	r30, r24
    1e46:	80 81       	ld	r24, Z
    1e48:	88 23       	and	r24, r24
    1e4a:	19 f7       	brne	.-58     	; 0x1e12 <LCD_vSend_string+0x14>
    {
	    LCD_vSend_char(data[counter]);
    }
}
    1e4c:	00 00       	nop
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	08 95       	ret

00001e58 <LCD_clearscreen>:

void LCD_clearscreen(void)
{
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    1e60:	2e 97       	sbiw	r28, 0x0e	; 14
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	f8 94       	cli
    1e66:	de bf       	out	0x3e, r29	; 62
    1e68:	0f be       	out	0x3f, r0	; 63
    1e6a:	cd bf       	out	0x3d, r28	; 61
	LCD_vSend_cmd(CLR_SCREEN);
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <LCD_vSend_cmd>
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	a0 e2       	ldi	r26, 0x20	; 32
    1e78:	b1 e4       	ldi	r27, 0x41	; 65
    1e7a:	89 83       	std	Y+1, r24	; 0x01
    1e7c:	9a 83       	std	Y+2, r25	; 0x02
    1e7e:	ab 83       	std	Y+3, r26	; 0x03
    1e80:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	4a e7       	ldi	r20, 0x7A	; 122
    1e88:	53 e4       	ldi	r21, 0x43	; 67
    1e8a:	69 81       	ldd	r22, Y+1	; 0x01
    1e8c:	7a 81       	ldd	r23, Y+2	; 0x02
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	9c 81       	ldd	r25, Y+4	; 0x04
    1e92:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	8d 83       	std	Y+5, r24	; 0x05
    1e9c:	9e 83       	std	Y+6, r25	; 0x06
    1e9e:	af 83       	std	Y+7, r26	; 0x07
    1ea0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	40 e8       	ldi	r20, 0x80	; 128
    1ea8:	5f e3       	ldi	r21, 0x3F	; 63
    1eaa:	6d 81       	ldd	r22, Y+5	; 0x05
    1eac:	7e 81       	ldd	r23, Y+6	; 0x06
    1eae:	8f 81       	ldd	r24, Y+7	; 0x07
    1eb0:	98 85       	ldd	r25, Y+8	; 0x08
    1eb2:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__cmpsf2>
    1eb6:	88 23       	and	r24, r24
    1eb8:	2c f4       	brge	.+10     	; 0x1ec4 <LCD_clearscreen+0x6c>
		__ticks = 1;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9a 87       	std	Y+10, r25	; 0x0a
    1ec0:	89 87       	std	Y+9, r24	; 0x09
    1ec2:	3f c0       	rjmp	.+126    	; 0x1f42 <LCD_clearscreen+0xea>
	else if (__tmp > 65535)
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	3f ef       	ldi	r19, 0xFF	; 255
    1ec8:	4f e7       	ldi	r20, 0x7F	; 127
    1eca:	57 e4       	ldi	r21, 0x47	; 71
    1ecc:	6d 81       	ldd	r22, Y+5	; 0x05
    1ece:	7e 81       	ldd	r23, Y+6	; 0x06
    1ed0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ed2:	98 85       	ldd	r25, Y+8	; 0x08
    1ed4:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__gesf2>
    1ed8:	18 16       	cp	r1, r24
    1eda:	4c f5       	brge	.+82     	; 0x1f2e <LCD_clearscreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e2       	ldi	r20, 0x20	; 32
    1ee2:	51 e4       	ldi	r21, 0x41	; 65
    1ee4:	69 81       	ldd	r22, Y+1	; 0x01
    1ee6:	7a 81       	ldd	r23, Y+2	; 0x02
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	9c 81       	ldd	r25, Y+4	; 0x04
    1eec:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	bc 01       	movw	r22, r24
    1ef6:	cd 01       	movw	r24, r26
    1ef8:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	9a 87       	std	Y+10, r25	; 0x0a
    1f02:	89 87       	std	Y+9, r24	; 0x09
    1f04:	0f c0       	rjmp	.+30     	; 0x1f24 <LCD_clearscreen+0xcc>
    1f06:	89 e1       	ldi	r24, 0x19	; 25
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9c 87       	std	Y+12, r25	; 0x0c
    1f0c:	8b 87       	std	Y+11, r24	; 0x0b
    1f0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f10:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <LCD_clearscreen+0xba>
    1f16:	9c 87       	std	Y+12, r25	; 0x0c
    1f18:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1a:	89 85       	ldd	r24, Y+9	; 0x09
    1f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	9a 87       	std	Y+10, r25	; 0x0a
    1f22:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f24:	89 85       	ldd	r24, Y+9	; 0x09
    1f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f28:	89 2b       	or	r24, r25
    1f2a:	69 f7       	brne	.-38     	; 0x1f06 <LCD_clearscreen+0xae>
	_delay_ms(10);
}
    1f2c:	14 c0       	rjmp	.+40     	; 0x1f56 <LCD_clearscreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2e:	6d 81       	ldd	r22, Y+5	; 0x05
    1f30:	7e 81       	ldd	r23, Y+6	; 0x06
    1f32:	8f 81       	ldd	r24, Y+7	; 0x07
    1f34:	98 85       	ldd	r25, Y+8	; 0x08
    1f36:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	9a 87       	std	Y+10, r25	; 0x0a
    1f40:	89 87       	std	Y+9, r24	; 0x09
    1f42:	89 85       	ldd	r24, Y+9	; 0x09
    1f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f46:	9e 87       	std	Y+14, r25	; 0x0e
    1f48:	8d 87       	std	Y+13, r24	; 0x0d
    1f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <LCD_clearscreen+0xf6>
    1f52:	9e 87       	std	Y+14, r25	; 0x0e
    1f54:	8d 87       	std	Y+13, r24	; 0x0d
    1f56:	00 00       	nop
    1f58:	2e 96       	adiw	r28, 0x0e	; 14
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	08 95       	ret

00001f6a <LCD_movecursor>:

void LCD_movecursor(c8 row, c8 coloumn)
{
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	61 97       	sbiw	r28, 0x11	; 17
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	88 8b       	std	Y+16, r24	; 0x10
    1f80:	69 8b       	std	Y+17, r22	; 0x11
	char data = 0;
    1f82:	19 82       	std	Y+1, r1	; 0x01
	
	if (row > 2 || row < 1 || coloumn > 16 || coloumn < 1)
    1f84:	88 89       	ldd	r24, Y+16	; 0x10
    1f86:	83 30       	cpi	r24, 0x03	; 3
    1f88:	48 f4       	brcc	.+18     	; 0x1f9c <LCD_movecursor+0x32>
    1f8a:	88 89       	ldd	r24, Y+16	; 0x10
    1f8c:	88 23       	and	r24, r24
    1f8e:	31 f0       	breq	.+12     	; 0x1f9c <LCD_movecursor+0x32>
    1f90:	89 89       	ldd	r24, Y+17	; 0x11
    1f92:	81 31       	cpi	r24, 0x11	; 17
    1f94:	18 f4       	brcc	.+6      	; 0x1f9c <LCD_movecursor+0x32>
    1f96:	89 89       	ldd	r24, Y+17	; 0x11
    1f98:	88 23       	and	r24, r24
    1f9a:	19 f4       	brne	.+6      	; 0x1fa2 <LCD_movecursor+0x38>
	{
		data = 0x80;
    1f9c:	80 e8       	ldi	r24, 0x80	; 128
    1f9e:	89 83       	std	Y+1, r24	; 0x01
    1fa0:	0d c0       	rjmp	.+26     	; 0x1fbc <LCD_movecursor+0x52>
	}
	else if (row == 1)
    1fa2:	88 89       	ldd	r24, Y+16	; 0x10
    1fa4:	81 30       	cpi	r24, 0x01	; 1
    1fa6:	21 f4       	brne	.+8      	; 0x1fb0 <LCD_movecursor+0x46>
	{
		data = 0x80 + coloumn - 1;
    1fa8:	89 89       	ldd	r24, Y+17	; 0x11
    1faa:	81 58       	subi	r24, 0x81	; 129
    1fac:	89 83       	std	Y+1, r24	; 0x01
    1fae:	06 c0       	rjmp	.+12     	; 0x1fbc <LCD_movecursor+0x52>
	}
	else if (row == 2)
    1fb0:	88 89       	ldd	r24, Y+16	; 0x10
    1fb2:	82 30       	cpi	r24, 0x02	; 2
    1fb4:	19 f4       	brne	.+6      	; 0x1fbc <LCD_movecursor+0x52>
	{
		data = 0xc0 + coloumn - 1;
    1fb6:	89 89       	ldd	r24, Y+17	; 0x11
    1fb8:	81 54       	subi	r24, 0x41	; 65
    1fba:	89 83       	std	Y+1, r24	; 0x01
	}
	
	LCD_vSend_cmd(data);
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <LCD_vSend_cmd>
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a0 e8       	ldi	r26, 0x80	; 128
    1fc8:	bf e3       	ldi	r27, 0x3F	; 63
    1fca:	8a 83       	std	Y+2, r24	; 0x02
    1fcc:	9b 83       	std	Y+3, r25	; 0x03
    1fce:	ac 83       	std	Y+4, r26	; 0x04
    1fd0:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	4a e7       	ldi	r20, 0x7A	; 122
    1fd8:	53 e4       	ldi	r21, 0x43	; 67
    1fda:	6a 81       	ldd	r22, Y+2	; 0x02
    1fdc:	7b 81       	ldd	r23, Y+3	; 0x03
    1fde:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe2:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	8e 83       	std	Y+6, r24	; 0x06
    1fec:	9f 83       	std	Y+7, r25	; 0x07
    1fee:	a8 87       	std	Y+8, r26	; 0x08
    1ff0:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e8       	ldi	r20, 0x80	; 128
    1ff8:	5f e3       	ldi	r21, 0x3F	; 63
    1ffa:	6e 81       	ldd	r22, Y+6	; 0x06
    1ffc:	7f 81       	ldd	r23, Y+7	; 0x07
    1ffe:	88 85       	ldd	r24, Y+8	; 0x08
    2000:	99 85       	ldd	r25, Y+9	; 0x09
    2002:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__cmpsf2>
    2006:	88 23       	and	r24, r24
    2008:	2c f4       	brge	.+10     	; 0x2014 <LCD_movecursor+0xaa>
		__ticks = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	9b 87       	std	Y+11, r25	; 0x0b
    2010:	8a 87       	std	Y+10, r24	; 0x0a
    2012:	3f c0       	rjmp	.+126    	; 0x2092 <LCD_movecursor+0x128>
	else if (__tmp > 65535)
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	3f ef       	ldi	r19, 0xFF	; 255
    2018:	4f e7       	ldi	r20, 0x7F	; 127
    201a:	57 e4       	ldi	r21, 0x47	; 71
    201c:	6e 81       	ldd	r22, Y+6	; 0x06
    201e:	7f 81       	ldd	r23, Y+7	; 0x07
    2020:	88 85       	ldd	r24, Y+8	; 0x08
    2022:	99 85       	ldd	r25, Y+9	; 0x09
    2024:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__gesf2>
    2028:	18 16       	cp	r1, r24
    202a:	4c f5       	brge	.+82     	; 0x207e <LCD_movecursor+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e2       	ldi	r20, 0x20	; 32
    2032:	51 e4       	ldi	r21, 0x41	; 65
    2034:	6a 81       	ldd	r22, Y+2	; 0x02
    2036:	7b 81       	ldd	r23, Y+3	; 0x03
    2038:	8c 81       	ldd	r24, Y+4	; 0x04
    203a:	9d 81       	ldd	r25, Y+5	; 0x05
    203c:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9b 87       	std	Y+11, r25	; 0x0b
    2052:	8a 87       	std	Y+10, r24	; 0x0a
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <LCD_movecursor+0x10a>
    2056:	89 e1       	ldi	r24, 0x19	; 25
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9d 87       	std	Y+13, r25	; 0x0d
    205c:	8c 87       	std	Y+12, r24	; 0x0c
    205e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2060:	9d 85       	ldd	r25, Y+13	; 0x0d
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_movecursor+0xf8>
    2066:	9d 87       	std	Y+13, r25	; 0x0d
    2068:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206a:	8a 85       	ldd	r24, Y+10	; 0x0a
    206c:	9b 85       	ldd	r25, Y+11	; 0x0b
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	9b 87       	std	Y+11, r25	; 0x0b
    2072:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2074:	8a 85       	ldd	r24, Y+10	; 0x0a
    2076:	9b 85       	ldd	r25, Y+11	; 0x0b
    2078:	89 2b       	or	r24, r25
    207a:	69 f7       	brne	.-38     	; 0x2056 <LCD_movecursor+0xec>
	_delay_ms(1);
    207c:	14 c0       	rjmp	.+40     	; 0x20a6 <LCD_movecursor+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207e:	6e 81       	ldd	r22, Y+6	; 0x06
    2080:	7f 81       	ldd	r23, Y+7	; 0x07
    2082:	88 85       	ldd	r24, Y+8	; 0x08
    2084:	99 85       	ldd	r25, Y+9	; 0x09
    2086:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9b 87       	std	Y+11, r25	; 0x0b
    2090:	8a 87       	std	Y+10, r24	; 0x0a
    2092:	8a 85       	ldd	r24, Y+10	; 0x0a
    2094:	9b 85       	ldd	r25, Y+11	; 0x0b
    2096:	9f 87       	std	Y+15, r25	; 0x0f
    2098:	8e 87       	std	Y+14, r24	; 0x0e
    209a:	8e 85       	ldd	r24, Y+14	; 0x0e
    209c:	9f 85       	ldd	r25, Y+15	; 0x0f
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <LCD_movecursor+0x134>
    20a2:	9f 87       	std	Y+15, r25	; 0x0f
    20a4:	8e 87       	std	Y+14, r24	; 0x0e
    20a6:	00 00       	nop
    20a8:	61 96       	adiw	r28, 0x11	; 17
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	de bf       	out	0x3e, r29	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	cd bf       	out	0x3d, r28	; 61
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	08 95       	ret

000020ba <initADC0>:
#include "ADC.h"

void initADC0(void)
{
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
	// Select the required channel
	ADMUX = 0x00;
    20c2:	87 e2       	ldi	r24, 0x27	; 39
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	fc 01       	movw	r30, r24
    20c8:	10 82       	st	Z, r1
	ADMUX |= (1U << REFS0);
    20ca:	87 e2       	ldi	r24, 0x27	; 39
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	27 e2       	ldi	r18, 0x27	; 39
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	f9 01       	movw	r30, r18
    20d4:	20 81       	ld	r18, Z
    20d6:	20 64       	ori	r18, 0x40	; 64
    20d8:	fc 01       	movw	r30, r24
    20da:	20 83       	st	Z, r18
	// Enable ADC, with a clock prescale of 1/128
	ADCSRA = (1U << ADEN) | (1U << ADPS2) | (1U << ADPS1) | (1U << ADPS0);
    20dc:	86 e2       	ldi	r24, 0x26	; 38
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	27 e8       	ldi	r18, 0x87	; 135
    20e2:	fc 01       	movw	r30, r24
    20e4:	20 83       	st	Z, r18
}
    20e6:	00 00       	nop
    20e8:	df 91       	pop	r29
    20ea:	cf 91       	pop	r28
    20ec:	08 95       	ret

000020ee <adc_read>:

u32 adc_read(void)
{
    20ee:	cf 93       	push	r28
    20f0:	df 93       	push	r29
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
	// start conversion
	ADCSRA |= (1U << ADSC);
    20f6:	86 e2       	ldi	r24, 0x26	; 38
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	26 e2       	ldi	r18, 0x26	; 38
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	f9 01       	movw	r30, r18
    2100:	20 81       	ld	r18, Z
    2102:	20 64       	ori	r18, 0x40	; 64
    2104:	fc 01       	movw	r30, r24
    2106:	20 83       	st	Z, r18
	
	// read from ADC, waiting for conversion to finish
	while(ADCSRA & (1U << ADSC))
    2108:	00 00       	nop
    210a:	86 e2       	ldi	r24, 0x26	; 38
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	fc 01       	movw	r30, r24
    2110:	80 81       	ld	r24, Z
    2112:	88 2f       	mov	r24, r24
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	80 74       	andi	r24, 0x40	; 64
    2118:	99 27       	eor	r25, r25
    211a:	89 2b       	or	r24, r25
    211c:	b1 f7       	brne	.-20     	; 0x210a <adc_read+0x1c>
	{
		/* Do nothing */
	}
	
	return ADC;
    211e:	84 e2       	ldi	r24, 0x24	; 36
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	fc 01       	movw	r30, r24
    2124:	80 81       	ld	r24, Z
    2126:	91 81       	ldd	r25, Z+1	; 0x01
    2128:	cc 01       	movw	r24, r24
    212a:	a0 e0       	ldi	r26, 0x00	; 0
    212c:	b0 e0       	ldi	r27, 0x00	; 0
}
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	08 95       	ret

00002138 <sampleToVolts>:

u8 sampleToVolts(u32 sample)
{
    2138:	cf 93       	push	r28
    213a:	df 93       	push	r29
    213c:	00 d0       	rcall	.+0      	; 0x213e <sampleToVolts+0x6>
    213e:	00 d0       	rcall	.+0      	; 0x2140 <sampleToVolts+0x8>
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	69 83       	std	Y+1, r22	; 0x01
    2146:	7a 83       	std	Y+2, r23	; 0x02
    2148:	8b 83       	std	Y+3, r24	; 0x03
    214a:	9c 83       	std	Y+4, r25	; 0x04
	return sample * (5.0 / 1023.0);
    214c:	69 81       	ldd	r22, Y+1	; 0x01
    214e:	7a 81       	ldd	r23, Y+2	; 0x02
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__floatunsisf>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	2a e0       	ldi	r18, 0x0A	; 10
    215e:	38 e2       	ldi	r19, 0x28	; 40
    2160:	40 ea       	ldi	r20, 0xA0	; 160
    2162:	5b e3       	ldi	r21, 0x3B	; 59
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	bc 01       	movw	r22, r24
    2172:	cd 01       	movw	r24, r26
    2174:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	df 91       	pop	r29
    2186:	cf 91       	pop	r28
    2188:	08 95       	ret

0000218a <DIO_vsetPINDir>:
			PORTD |= value;
			break;
		default:
			break;
	}
}
    218a:	cf 93       	push	r28
    218c:	df 93       	push	r29
    218e:	00 d0       	rcall	.+0      	; 0x2190 <DIO_vsetPINDir+0x6>
    2190:	1f 92       	push	r1
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	6a 83       	std	Y+2, r22	; 0x02
    219a:	4b 83       	std	Y+3, r20	; 0x03
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	88 2f       	mov	r24, r24
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	82 34       	cpi	r24, 0x42	; 66
    21a4:	91 05       	cpc	r25, r1
    21a6:	09 f4       	brne	.+2      	; 0x21aa <DIO_vsetPINDir+0x20>
    21a8:	3e c0       	rjmp	.+124    	; 0x2226 <DIO_vsetPINDir+0x9c>
    21aa:	83 34       	cpi	r24, 0x43	; 67
    21ac:	91 05       	cpc	r25, r1
    21ae:	24 f4       	brge	.+8      	; 0x21b8 <DIO_vsetPINDir+0x2e>
    21b0:	81 34       	cpi	r24, 0x41	; 65
    21b2:	91 05       	cpc	r25, r1
    21b4:	51 f0       	breq	.+20     	; 0x21ca <DIO_vsetPINDir+0x40>
    21b6:	c1 c0       	rjmp	.+386    	; 0x233a <DIO_vsetPINDir+0x1b0>
    21b8:	83 34       	cpi	r24, 0x43	; 67
    21ba:	91 05       	cpc	r25, r1
    21bc:	09 f4       	brne	.+2      	; 0x21c0 <DIO_vsetPINDir+0x36>
    21be:	61 c0       	rjmp	.+194    	; 0x2282 <DIO_vsetPINDir+0xf8>
    21c0:	84 34       	cpi	r24, 0x44	; 68
    21c2:	91 05       	cpc	r25, r1
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <DIO_vsetPINDir+0x3e>
    21c6:	8b c0       	rjmp	.+278    	; 0x22de <DIO_vsetPINDir+0x154>
    21c8:	b8 c0       	rjmp	.+368    	; 0x233a <DIO_vsetPINDir+0x1b0>
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	81 30       	cpi	r24, 0x01	; 1
    21ce:	a9 f4       	brne	.+42     	; 0x21fa <DIO_vsetPINDir+0x70>
    21d0:	8a e3       	ldi	r24, 0x3A	; 58
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	2a e3       	ldi	r18, 0x3A	; 58
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	f9 01       	movw	r30, r18
    21da:	20 81       	ld	r18, Z
    21dc:	62 2f       	mov	r22, r18
    21de:	2a 81       	ldd	r18, Y+2	; 0x02
    21e0:	42 2f       	mov	r20, r18
    21e2:	50 e0       	ldi	r21, 0x00	; 0
    21e4:	21 e0       	ldi	r18, 0x01	; 1
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <DIO_vsetPINDir+0x64>
    21ea:	22 0f       	add	r18, r18
    21ec:	33 1f       	adc	r19, r19
    21ee:	4a 95       	dec	r20
    21f0:	e2 f7       	brpl	.-8      	; 0x21ea <DIO_vsetPINDir+0x60>
    21f2:	26 2b       	or	r18, r22
    21f4:	fc 01       	movw	r30, r24
    21f6:	20 83       	st	Z, r18
    21f8:	a0 c0       	rjmp	.+320    	; 0x233a <DIO_vsetPINDir+0x1b0>
    21fa:	8a e3       	ldi	r24, 0x3A	; 58
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	2a e3       	ldi	r18, 0x3A	; 58
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	f9 01       	movw	r30, r18
    2204:	20 81       	ld	r18, Z
    2206:	62 2f       	mov	r22, r18
    2208:	2a 81       	ldd	r18, Y+2	; 0x02
    220a:	42 2f       	mov	r20, r18
    220c:	50 e0       	ldi	r21, 0x00	; 0
    220e:	21 e0       	ldi	r18, 0x01	; 1
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <DIO_vsetPINDir+0x8e>
    2214:	22 0f       	add	r18, r18
    2216:	33 1f       	adc	r19, r19
    2218:	4a 95       	dec	r20
    221a:	e2 f7       	brpl	.-8      	; 0x2214 <DIO_vsetPINDir+0x8a>
    221c:	20 95       	com	r18
    221e:	26 23       	and	r18, r22
    2220:	fc 01       	movw	r30, r24
    2222:	20 83       	st	Z, r18
    2224:	8a c0       	rjmp	.+276    	; 0x233a <DIO_vsetPINDir+0x1b0>
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	81 30       	cpi	r24, 0x01	; 1
    222a:	a9 f4       	brne	.+42     	; 0x2256 <DIO_vsetPINDir+0xcc>
    222c:	87 e3       	ldi	r24, 0x37	; 55
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	27 e3       	ldi	r18, 0x37	; 55
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	f9 01       	movw	r30, r18
    2236:	20 81       	ld	r18, Z
    2238:	62 2f       	mov	r22, r18
    223a:	2a 81       	ldd	r18, Y+2	; 0x02
    223c:	42 2f       	mov	r20, r18
    223e:	50 e0       	ldi	r21, 0x00	; 0
    2240:	21 e0       	ldi	r18, 0x01	; 1
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	02 c0       	rjmp	.+4      	; 0x224a <DIO_vsetPINDir+0xc0>
    2246:	22 0f       	add	r18, r18
    2248:	33 1f       	adc	r19, r19
    224a:	4a 95       	dec	r20
    224c:	e2 f7       	brpl	.-8      	; 0x2246 <DIO_vsetPINDir+0xbc>
    224e:	26 2b       	or	r18, r22
    2250:	fc 01       	movw	r30, r24
    2252:	20 83       	st	Z, r18
    2254:	72 c0       	rjmp	.+228    	; 0x233a <DIO_vsetPINDir+0x1b0>
    2256:	87 e3       	ldi	r24, 0x37	; 55
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	27 e3       	ldi	r18, 0x37	; 55
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	f9 01       	movw	r30, r18
    2260:	20 81       	ld	r18, Z
    2262:	62 2f       	mov	r22, r18
    2264:	2a 81       	ldd	r18, Y+2	; 0x02
    2266:	42 2f       	mov	r20, r18
    2268:	50 e0       	ldi	r21, 0x00	; 0
    226a:	21 e0       	ldi	r18, 0x01	; 1
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	02 c0       	rjmp	.+4      	; 0x2274 <DIO_vsetPINDir+0xea>
    2270:	22 0f       	add	r18, r18
    2272:	33 1f       	adc	r19, r19
    2274:	4a 95       	dec	r20
    2276:	e2 f7       	brpl	.-8      	; 0x2270 <DIO_vsetPINDir+0xe6>
    2278:	20 95       	com	r18
    227a:	26 23       	and	r18, r22
    227c:	fc 01       	movw	r30, r24
    227e:	20 83       	st	Z, r18
    2280:	5c c0       	rjmp	.+184    	; 0x233a <DIO_vsetPINDir+0x1b0>
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	81 30       	cpi	r24, 0x01	; 1
    2286:	a9 f4       	brne	.+42     	; 0x22b2 <DIO_vsetPINDir+0x128>
    2288:	84 e3       	ldi	r24, 0x34	; 52
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	24 e3       	ldi	r18, 0x34	; 52
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	f9 01       	movw	r30, r18
    2292:	20 81       	ld	r18, Z
    2294:	62 2f       	mov	r22, r18
    2296:	2a 81       	ldd	r18, Y+2	; 0x02
    2298:	42 2f       	mov	r20, r18
    229a:	50 e0       	ldi	r21, 0x00	; 0
    229c:	21 e0       	ldi	r18, 0x01	; 1
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <DIO_vsetPINDir+0x11c>
    22a2:	22 0f       	add	r18, r18
    22a4:	33 1f       	adc	r19, r19
    22a6:	4a 95       	dec	r20
    22a8:	e2 f7       	brpl	.-8      	; 0x22a2 <DIO_vsetPINDir+0x118>
    22aa:	26 2b       	or	r18, r22
    22ac:	fc 01       	movw	r30, r24
    22ae:	20 83       	st	Z, r18
    22b0:	44 c0       	rjmp	.+136    	; 0x233a <DIO_vsetPINDir+0x1b0>
    22b2:	84 e3       	ldi	r24, 0x34	; 52
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	24 e3       	ldi	r18, 0x34	; 52
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	f9 01       	movw	r30, r18
    22bc:	20 81       	ld	r18, Z
    22be:	62 2f       	mov	r22, r18
    22c0:	2a 81       	ldd	r18, Y+2	; 0x02
    22c2:	42 2f       	mov	r20, r18
    22c4:	50 e0       	ldi	r21, 0x00	; 0
    22c6:	21 e0       	ldi	r18, 0x01	; 1
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <DIO_vsetPINDir+0x146>
    22cc:	22 0f       	add	r18, r18
    22ce:	33 1f       	adc	r19, r19
    22d0:	4a 95       	dec	r20
    22d2:	e2 f7       	brpl	.-8      	; 0x22cc <DIO_vsetPINDir+0x142>
    22d4:	20 95       	com	r18
    22d6:	26 23       	and	r18, r22
    22d8:	fc 01       	movw	r30, r24
    22da:	20 83       	st	Z, r18
    22dc:	2e c0       	rjmp	.+92     	; 0x233a <DIO_vsetPINDir+0x1b0>
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	81 30       	cpi	r24, 0x01	; 1
    22e2:	a9 f4       	brne	.+42     	; 0x230e <DIO_vsetPINDir+0x184>
    22e4:	81 e3       	ldi	r24, 0x31	; 49
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	21 e3       	ldi	r18, 0x31	; 49
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	f9 01       	movw	r30, r18
    22ee:	20 81       	ld	r18, Z
    22f0:	62 2f       	mov	r22, r18
    22f2:	2a 81       	ldd	r18, Y+2	; 0x02
    22f4:	42 2f       	mov	r20, r18
    22f6:	50 e0       	ldi	r21, 0x00	; 0
    22f8:	21 e0       	ldi	r18, 0x01	; 1
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	02 c0       	rjmp	.+4      	; 0x2302 <DIO_vsetPINDir+0x178>
    22fe:	22 0f       	add	r18, r18
    2300:	33 1f       	adc	r19, r19
    2302:	4a 95       	dec	r20
    2304:	e2 f7       	brpl	.-8      	; 0x22fe <DIO_vsetPINDir+0x174>
    2306:	26 2b       	or	r18, r22
    2308:	fc 01       	movw	r30, r24
    230a:	20 83       	st	Z, r18
    230c:	15 c0       	rjmp	.+42     	; 0x2338 <DIO_vsetPINDir+0x1ae>
    230e:	81 e3       	ldi	r24, 0x31	; 49
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	21 e3       	ldi	r18, 0x31	; 49
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	f9 01       	movw	r30, r18
    2318:	20 81       	ld	r18, Z
    231a:	62 2f       	mov	r22, r18
    231c:	2a 81       	ldd	r18, Y+2	; 0x02
    231e:	42 2f       	mov	r20, r18
    2320:	50 e0       	ldi	r21, 0x00	; 0
    2322:	21 e0       	ldi	r18, 0x01	; 1
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	02 c0       	rjmp	.+4      	; 0x232c <DIO_vsetPINDir+0x1a2>
    2328:	22 0f       	add	r18, r18
    232a:	33 1f       	adc	r19, r19
    232c:	4a 95       	dec	r20
    232e:	e2 f7       	brpl	.-8      	; 0x2328 <DIO_vsetPINDir+0x19e>
    2330:	20 95       	com	r18
    2332:	26 23       	and	r18, r22
    2334:	fc 01       	movw	r30, r24
    2336:	20 83       	st	Z, r18
    2338:	00 00       	nop
    233a:	00 00       	nop
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
    2346:	08 95       	ret

00002348 <DIO_write>:
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	00 d0       	rcall	.+0      	; 0x234e <DIO_write+0x6>
    234e:	1f 92       	push	r1
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	6a 83       	std	Y+2, r22	; 0x02
    2358:	4b 83       	std	Y+3, r20	; 0x03
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	88 2f       	mov	r24, r24
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	82 34       	cpi	r24, 0x42	; 66
    2362:	91 05       	cpc	r25, r1
    2364:	09 f4       	brne	.+2      	; 0x2368 <DIO_write+0x20>
    2366:	3e c0       	rjmp	.+124    	; 0x23e4 <DIO_write+0x9c>
    2368:	83 34       	cpi	r24, 0x43	; 67
    236a:	91 05       	cpc	r25, r1
    236c:	24 f4       	brge	.+8      	; 0x2376 <DIO_write+0x2e>
    236e:	81 34       	cpi	r24, 0x41	; 65
    2370:	91 05       	cpc	r25, r1
    2372:	51 f0       	breq	.+20     	; 0x2388 <DIO_write+0x40>
    2374:	c1 c0       	rjmp	.+386    	; 0x24f8 <DIO_write+0x1b0>
    2376:	83 34       	cpi	r24, 0x43	; 67
    2378:	91 05       	cpc	r25, r1
    237a:	09 f4       	brne	.+2      	; 0x237e <DIO_write+0x36>
    237c:	61 c0       	rjmp	.+194    	; 0x2440 <DIO_write+0xf8>
    237e:	84 34       	cpi	r24, 0x44	; 68
    2380:	91 05       	cpc	r25, r1
    2382:	09 f4       	brne	.+2      	; 0x2386 <DIO_write+0x3e>
    2384:	8b c0       	rjmp	.+278    	; 0x249c <DIO_write+0x154>
    2386:	b8 c0       	rjmp	.+368    	; 0x24f8 <DIO_write+0x1b0>
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	81 30       	cpi	r24, 0x01	; 1
    238c:	a9 f4       	brne	.+42     	; 0x23b8 <DIO_write+0x70>
    238e:	8b e3       	ldi	r24, 0x3B	; 59
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	2b e3       	ldi	r18, 0x3B	; 59
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	f9 01       	movw	r30, r18
    2398:	20 81       	ld	r18, Z
    239a:	62 2f       	mov	r22, r18
    239c:	2a 81       	ldd	r18, Y+2	; 0x02
    239e:	42 2f       	mov	r20, r18
    23a0:	50 e0       	ldi	r21, 0x00	; 0
    23a2:	21 e0       	ldi	r18, 0x01	; 1
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	02 c0       	rjmp	.+4      	; 0x23ac <DIO_write+0x64>
    23a8:	22 0f       	add	r18, r18
    23aa:	33 1f       	adc	r19, r19
    23ac:	4a 95       	dec	r20
    23ae:	e2 f7       	brpl	.-8      	; 0x23a8 <DIO_write+0x60>
    23b0:	26 2b       	or	r18, r22
    23b2:	fc 01       	movw	r30, r24
    23b4:	20 83       	st	Z, r18
    23b6:	a0 c0       	rjmp	.+320    	; 0x24f8 <DIO_write+0x1b0>
    23b8:	8b e3       	ldi	r24, 0x3B	; 59
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	2b e3       	ldi	r18, 0x3B	; 59
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	f9 01       	movw	r30, r18
    23c2:	20 81       	ld	r18, Z
    23c4:	62 2f       	mov	r22, r18
    23c6:	2a 81       	ldd	r18, Y+2	; 0x02
    23c8:	42 2f       	mov	r20, r18
    23ca:	50 e0       	ldi	r21, 0x00	; 0
    23cc:	21 e0       	ldi	r18, 0x01	; 1
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <DIO_write+0x8e>
    23d2:	22 0f       	add	r18, r18
    23d4:	33 1f       	adc	r19, r19
    23d6:	4a 95       	dec	r20
    23d8:	e2 f7       	brpl	.-8      	; 0x23d2 <DIO_write+0x8a>
    23da:	20 95       	com	r18
    23dc:	26 23       	and	r18, r22
    23de:	fc 01       	movw	r30, r24
    23e0:	20 83       	st	Z, r18
    23e2:	8a c0       	rjmp	.+276    	; 0x24f8 <DIO_write+0x1b0>
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	81 30       	cpi	r24, 0x01	; 1
    23e8:	a9 f4       	brne	.+42     	; 0x2414 <DIO_write+0xcc>
    23ea:	88 e3       	ldi	r24, 0x38	; 56
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	28 e3       	ldi	r18, 0x38	; 56
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	f9 01       	movw	r30, r18
    23f4:	20 81       	ld	r18, Z
    23f6:	62 2f       	mov	r22, r18
    23f8:	2a 81       	ldd	r18, Y+2	; 0x02
    23fa:	42 2f       	mov	r20, r18
    23fc:	50 e0       	ldi	r21, 0x00	; 0
    23fe:	21 e0       	ldi	r18, 0x01	; 1
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <DIO_write+0xc0>
    2404:	22 0f       	add	r18, r18
    2406:	33 1f       	adc	r19, r19
    2408:	4a 95       	dec	r20
    240a:	e2 f7       	brpl	.-8      	; 0x2404 <DIO_write+0xbc>
    240c:	26 2b       	or	r18, r22
    240e:	fc 01       	movw	r30, r24
    2410:	20 83       	st	Z, r18
    2412:	72 c0       	rjmp	.+228    	; 0x24f8 <DIO_write+0x1b0>
    2414:	88 e3       	ldi	r24, 0x38	; 56
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	28 e3       	ldi	r18, 0x38	; 56
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	f9 01       	movw	r30, r18
    241e:	20 81       	ld	r18, Z
    2420:	62 2f       	mov	r22, r18
    2422:	2a 81       	ldd	r18, Y+2	; 0x02
    2424:	42 2f       	mov	r20, r18
    2426:	50 e0       	ldi	r21, 0x00	; 0
    2428:	21 e0       	ldi	r18, 0x01	; 1
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <DIO_write+0xea>
    242e:	22 0f       	add	r18, r18
    2430:	33 1f       	adc	r19, r19
    2432:	4a 95       	dec	r20
    2434:	e2 f7       	brpl	.-8      	; 0x242e <DIO_write+0xe6>
    2436:	20 95       	com	r18
    2438:	26 23       	and	r18, r22
    243a:	fc 01       	movw	r30, r24
    243c:	20 83       	st	Z, r18
    243e:	5c c0       	rjmp	.+184    	; 0x24f8 <DIO_write+0x1b0>
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	81 30       	cpi	r24, 0x01	; 1
    2444:	a9 f4       	brne	.+42     	; 0x2470 <DIO_write+0x128>
    2446:	85 e3       	ldi	r24, 0x35	; 53
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	25 e3       	ldi	r18, 0x35	; 53
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	f9 01       	movw	r30, r18
    2450:	20 81       	ld	r18, Z
    2452:	62 2f       	mov	r22, r18
    2454:	2a 81       	ldd	r18, Y+2	; 0x02
    2456:	42 2f       	mov	r20, r18
    2458:	50 e0       	ldi	r21, 0x00	; 0
    245a:	21 e0       	ldi	r18, 0x01	; 1
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <DIO_write+0x11c>
    2460:	22 0f       	add	r18, r18
    2462:	33 1f       	adc	r19, r19
    2464:	4a 95       	dec	r20
    2466:	e2 f7       	brpl	.-8      	; 0x2460 <DIO_write+0x118>
    2468:	26 2b       	or	r18, r22
    246a:	fc 01       	movw	r30, r24
    246c:	20 83       	st	Z, r18
    246e:	44 c0       	rjmp	.+136    	; 0x24f8 <DIO_write+0x1b0>
    2470:	85 e3       	ldi	r24, 0x35	; 53
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	25 e3       	ldi	r18, 0x35	; 53
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	f9 01       	movw	r30, r18
    247a:	20 81       	ld	r18, Z
    247c:	62 2f       	mov	r22, r18
    247e:	2a 81       	ldd	r18, Y+2	; 0x02
    2480:	42 2f       	mov	r20, r18
    2482:	50 e0       	ldi	r21, 0x00	; 0
    2484:	21 e0       	ldi	r18, 0x01	; 1
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	02 c0       	rjmp	.+4      	; 0x248e <DIO_write+0x146>
    248a:	22 0f       	add	r18, r18
    248c:	33 1f       	adc	r19, r19
    248e:	4a 95       	dec	r20
    2490:	e2 f7       	brpl	.-8      	; 0x248a <DIO_write+0x142>
    2492:	20 95       	com	r18
    2494:	26 23       	and	r18, r22
    2496:	fc 01       	movw	r30, r24
    2498:	20 83       	st	Z, r18
    249a:	2e c0       	rjmp	.+92     	; 0x24f8 <DIO_write+0x1b0>
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	81 30       	cpi	r24, 0x01	; 1
    24a0:	a9 f4       	brne	.+42     	; 0x24cc <DIO_write+0x184>
    24a2:	82 e3       	ldi	r24, 0x32	; 50
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	22 e3       	ldi	r18, 0x32	; 50
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	f9 01       	movw	r30, r18
    24ac:	20 81       	ld	r18, Z
    24ae:	62 2f       	mov	r22, r18
    24b0:	2a 81       	ldd	r18, Y+2	; 0x02
    24b2:	42 2f       	mov	r20, r18
    24b4:	50 e0       	ldi	r21, 0x00	; 0
    24b6:	21 e0       	ldi	r18, 0x01	; 1
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <DIO_write+0x178>
    24bc:	22 0f       	add	r18, r18
    24be:	33 1f       	adc	r19, r19
    24c0:	4a 95       	dec	r20
    24c2:	e2 f7       	brpl	.-8      	; 0x24bc <DIO_write+0x174>
    24c4:	26 2b       	or	r18, r22
    24c6:	fc 01       	movw	r30, r24
    24c8:	20 83       	st	Z, r18
    24ca:	15 c0       	rjmp	.+42     	; 0x24f6 <DIO_write+0x1ae>
    24cc:	82 e3       	ldi	r24, 0x32	; 50
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	22 e3       	ldi	r18, 0x32	; 50
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	f9 01       	movw	r30, r18
    24d6:	20 81       	ld	r18, Z
    24d8:	62 2f       	mov	r22, r18
    24da:	2a 81       	ldd	r18, Y+2	; 0x02
    24dc:	42 2f       	mov	r20, r18
    24de:	50 e0       	ldi	r21, 0x00	; 0
    24e0:	21 e0       	ldi	r18, 0x01	; 1
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <DIO_write+0x1a2>
    24e6:	22 0f       	add	r18, r18
    24e8:	33 1f       	adc	r19, r19
    24ea:	4a 95       	dec	r20
    24ec:	e2 f7       	brpl	.-8      	; 0x24e6 <DIO_write+0x19e>
    24ee:	20 95       	com	r18
    24f0:	26 23       	and	r18, r22
    24f2:	fc 01       	movw	r30, r24
    24f4:	20 83       	st	Z, r18
    24f6:	00 00       	nop
    24f8:	00 00       	nop
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	df 91       	pop	r29
    2502:	cf 91       	pop	r28
    2504:	08 95       	ret

00002506 <DIO_set_port_direction>:
    2506:	cf 93       	push	r28
    2508:	df 93       	push	r29
    250a:	00 d0       	rcall	.+0      	; 0x250c <DIO_set_port_direction+0x6>
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	89 83       	std	Y+1, r24	; 0x01
    2512:	6a 83       	std	Y+2, r22	; 0x02
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	88 2f       	mov	r24, r24
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	82 34       	cpi	r24, 0x42	; 66
    251c:	91 05       	cpc	r25, r1
    251e:	a1 f0       	breq	.+40     	; 0x2548 <DIO_set_port_direction+0x42>
    2520:	83 34       	cpi	r24, 0x43	; 67
    2522:	91 05       	cpc	r25, r1
    2524:	24 f4       	brge	.+8      	; 0x252e <DIO_set_port_direction+0x28>
    2526:	81 34       	cpi	r24, 0x41	; 65
    2528:	91 05       	cpc	r25, r1
    252a:	41 f0       	breq	.+16     	; 0x253c <DIO_set_port_direction+0x36>
    252c:	1f c0       	rjmp	.+62     	; 0x256c <DIO_set_port_direction+0x66>
    252e:	83 34       	cpi	r24, 0x43	; 67
    2530:	91 05       	cpc	r25, r1
    2532:	81 f0       	breq	.+32     	; 0x2554 <DIO_set_port_direction+0x4e>
    2534:	84 34       	cpi	r24, 0x44	; 68
    2536:	91 05       	cpc	r25, r1
    2538:	99 f0       	breq	.+38     	; 0x2560 <DIO_set_port_direction+0x5a>
    253a:	18 c0       	rjmp	.+48     	; 0x256c <DIO_set_port_direction+0x66>
    253c:	8a e3       	ldi	r24, 0x3A	; 58
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	2a 81       	ldd	r18, Y+2	; 0x02
    2542:	fc 01       	movw	r30, r24
    2544:	20 83       	st	Z, r18
    2546:	12 c0       	rjmp	.+36     	; 0x256c <DIO_set_port_direction+0x66>
    2548:	87 e3       	ldi	r24, 0x37	; 55
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	2a 81       	ldd	r18, Y+2	; 0x02
    254e:	fc 01       	movw	r30, r24
    2550:	20 83       	st	Z, r18
    2552:	0c c0       	rjmp	.+24     	; 0x256c <DIO_set_port_direction+0x66>
    2554:	84 e3       	ldi	r24, 0x34	; 52
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	2a 81       	ldd	r18, Y+2	; 0x02
    255a:	fc 01       	movw	r30, r24
    255c:	20 83       	st	Z, r18
    255e:	06 c0       	rjmp	.+12     	; 0x256c <DIO_set_port_direction+0x66>
    2560:	81 e3       	ldi	r24, 0x31	; 49
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	2a 81       	ldd	r18, Y+2	; 0x02
    2566:	fc 01       	movw	r30, r24
    2568:	20 83       	st	Z, r18
    256a:	00 00       	nop
    256c:	00 00       	nop
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	df 91       	pop	r29
    2574:	cf 91       	pop	r28
    2576:	08 95       	ret

00002578 <DIO_write_port>:
    2578:	cf 93       	push	r28
    257a:	df 93       	push	r29
    257c:	00 d0       	rcall	.+0      	; 0x257e <DIO_write_port+0x6>
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	6a 83       	std	Y+2, r22	; 0x02
    2586:	89 81       	ldd	r24, Y+1	; 0x01
    2588:	88 2f       	mov	r24, r24
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	82 34       	cpi	r24, 0x42	; 66
    258e:	91 05       	cpc	r25, r1
    2590:	a1 f0       	breq	.+40     	; 0x25ba <DIO_write_port+0x42>
    2592:	83 34       	cpi	r24, 0x43	; 67
    2594:	91 05       	cpc	r25, r1
    2596:	24 f4       	brge	.+8      	; 0x25a0 <DIO_write_port+0x28>
    2598:	81 34       	cpi	r24, 0x41	; 65
    259a:	91 05       	cpc	r25, r1
    259c:	41 f0       	breq	.+16     	; 0x25ae <DIO_write_port+0x36>
    259e:	1f c0       	rjmp	.+62     	; 0x25de <DIO_write_port+0x66>
    25a0:	83 34       	cpi	r24, 0x43	; 67
    25a2:	91 05       	cpc	r25, r1
    25a4:	81 f0       	breq	.+32     	; 0x25c6 <DIO_write_port+0x4e>
    25a6:	84 34       	cpi	r24, 0x44	; 68
    25a8:	91 05       	cpc	r25, r1
    25aa:	99 f0       	breq	.+38     	; 0x25d2 <DIO_write_port+0x5a>
    25ac:	18 c0       	rjmp	.+48     	; 0x25de <DIO_write_port+0x66>
    25ae:	8b e3       	ldi	r24, 0x3B	; 59
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	2a 81       	ldd	r18, Y+2	; 0x02
    25b4:	fc 01       	movw	r30, r24
    25b6:	20 83       	st	Z, r18
    25b8:	12 c0       	rjmp	.+36     	; 0x25de <DIO_write_port+0x66>
    25ba:	88 e3       	ldi	r24, 0x38	; 56
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	2a 81       	ldd	r18, Y+2	; 0x02
    25c0:	fc 01       	movw	r30, r24
    25c2:	20 83       	st	Z, r18
    25c4:	0c c0       	rjmp	.+24     	; 0x25de <DIO_write_port+0x66>
    25c6:	85 e3       	ldi	r24, 0x35	; 53
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	2a 81       	ldd	r18, Y+2	; 0x02
    25cc:	fc 01       	movw	r30, r24
    25ce:	20 83       	st	Z, r18
    25d0:	06 c0       	rjmp	.+12     	; 0x25de <DIO_write_port+0x66>
    25d2:	82 e3       	ldi	r24, 0x32	; 50
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	2a 81       	ldd	r18, Y+2	; 0x02
    25d8:	fc 01       	movw	r30, r24
    25da:	20 83       	st	Z, r18
    25dc:	00 00       	nop
    25de:	00 00       	nop
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	08 95       	ret

000025ea <write_high_nibble>:

void write_high_nibble(u8 portname, u8 value)
{
    25ea:	cf 93       	push	r28
    25ec:	df 93       	push	r29
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <write_high_nibble+0x6>
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	6a 83       	std	Y+2, r22	; 0x02
	value <<= 4;
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	82 95       	swap	r24
    25fc:	80 7f       	andi	r24, 0xF0	; 240
    25fe:	8a 83       	std	Y+2, r24	; 0x02
	
	switch(portname)
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	88 2f       	mov	r24, r24
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	82 34       	cpi	r24, 0x42	; 66
    2608:	91 05       	cpc	r25, r1
    260a:	11 f1       	breq	.+68     	; 0x2650 <write_high_nibble+0x66>
    260c:	83 34       	cpi	r24, 0x43	; 67
    260e:	91 05       	cpc	r25, r1
    2610:	24 f4       	brge	.+8      	; 0x261a <write_high_nibble+0x30>
    2612:	81 34       	cpi	r24, 0x41	; 65
    2614:	91 05       	cpc	r25, r1
    2616:	41 f0       	breq	.+16     	; 0x2628 <write_high_nibble+0x3e>
		case 'D':
			PORTD &= 0x0f;
			PORTD |= value;
			break;
		default:
			break;
    2618:	57 c0       	rjmp	.+174    	; 0x26c8 <write_high_nibble+0xde>

void write_high_nibble(u8 portname, u8 value)
{
	value <<= 4;
	
	switch(portname)
    261a:	83 34       	cpi	r24, 0x43	; 67
    261c:	91 05       	cpc	r25, r1
    261e:	61 f1       	breq	.+88     	; 0x2678 <write_high_nibble+0x8e>
    2620:	84 34       	cpi	r24, 0x44	; 68
    2622:	91 05       	cpc	r25, r1
    2624:	e9 f1       	breq	.+122    	; 0x26a0 <write_high_nibble+0xb6>
		case 'D':
			PORTD &= 0x0f;
			PORTD |= value;
			break;
		default:
			break;
    2626:	50 c0       	rjmp	.+160    	; 0x26c8 <write_high_nibble+0xde>
	value <<= 4;
	
	switch(portname)
	{
		case 'A':
			PORTA &= 0x0f;
    2628:	8b e3       	ldi	r24, 0x3B	; 59
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	2b e3       	ldi	r18, 0x3B	; 59
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	f9 01       	movw	r30, r18
    2632:	20 81       	ld	r18, Z
    2634:	2f 70       	andi	r18, 0x0F	; 15
    2636:	fc 01       	movw	r30, r24
    2638:	20 83       	st	Z, r18
			PORTA |= value;
    263a:	8b e3       	ldi	r24, 0x3B	; 59
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	2b e3       	ldi	r18, 0x3B	; 59
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	f9 01       	movw	r30, r18
    2644:	30 81       	ld	r19, Z
    2646:	2a 81       	ldd	r18, Y+2	; 0x02
    2648:	23 2b       	or	r18, r19
    264a:	fc 01       	movw	r30, r24
    264c:	20 83       	st	Z, r18
			break;
    264e:	3c c0       	rjmp	.+120    	; 0x26c8 <write_high_nibble+0xde>
		case 'B':
			PORTB &= 0x0f;
    2650:	88 e3       	ldi	r24, 0x38	; 56
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	28 e3       	ldi	r18, 0x38	; 56
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	f9 01       	movw	r30, r18
    265a:	20 81       	ld	r18, Z
    265c:	2f 70       	andi	r18, 0x0F	; 15
    265e:	fc 01       	movw	r30, r24
    2660:	20 83       	st	Z, r18
			PORTB |= value;
    2662:	88 e3       	ldi	r24, 0x38	; 56
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	28 e3       	ldi	r18, 0x38	; 56
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	f9 01       	movw	r30, r18
    266c:	30 81       	ld	r19, Z
    266e:	2a 81       	ldd	r18, Y+2	; 0x02
    2670:	23 2b       	or	r18, r19
    2672:	fc 01       	movw	r30, r24
    2674:	20 83       	st	Z, r18
			break;
    2676:	28 c0       	rjmp	.+80     	; 0x26c8 <write_high_nibble+0xde>
		case 'C':
			PORTC &= 0x0f;
    2678:	85 e3       	ldi	r24, 0x35	; 53
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	25 e3       	ldi	r18, 0x35	; 53
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	f9 01       	movw	r30, r18
    2682:	20 81       	ld	r18, Z
    2684:	2f 70       	andi	r18, 0x0F	; 15
    2686:	fc 01       	movw	r30, r24
    2688:	20 83       	st	Z, r18
			PORTC |= value;
    268a:	85 e3       	ldi	r24, 0x35	; 53
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	25 e3       	ldi	r18, 0x35	; 53
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	f9 01       	movw	r30, r18
    2694:	30 81       	ld	r19, Z
    2696:	2a 81       	ldd	r18, Y+2	; 0x02
    2698:	23 2b       	or	r18, r19
    269a:	fc 01       	movw	r30, r24
    269c:	20 83       	st	Z, r18
			break;
    269e:	14 c0       	rjmp	.+40     	; 0x26c8 <write_high_nibble+0xde>
		case 'D':
			PORTD &= 0x0f;
    26a0:	82 e3       	ldi	r24, 0x32	; 50
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	22 e3       	ldi	r18, 0x32	; 50
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	f9 01       	movw	r30, r18
    26aa:	20 81       	ld	r18, Z
    26ac:	2f 70       	andi	r18, 0x0F	; 15
    26ae:	fc 01       	movw	r30, r24
    26b0:	20 83       	st	Z, r18
			PORTD |= value;
    26b2:	82 e3       	ldi	r24, 0x32	; 50
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	22 e3       	ldi	r18, 0x32	; 50
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	f9 01       	movw	r30, r18
    26bc:	30 81       	ld	r19, Z
    26be:	2a 81       	ldd	r18, Y+2	; 0x02
    26c0:	23 2b       	or	r18, r19
    26c2:	fc 01       	movw	r30, r24
    26c4:	20 83       	st	Z, r18
			break;
    26c6:	00 00       	nop
		default:
			break;
	}
    26c8:	00 00       	nop
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	08 95       	ret

000026d4 <SPI_masterInit>:
#include "SPI.h"

void SPI_masterInit(void)
{
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
	/* Enable MOSI, SCK and SS Output */
	DDRB = (1 << MOSI) | (1 << SCK) | (1 << SS);
    26dc:	87 e3       	ldi	r24, 0x37	; 55
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	20 eb       	ldi	r18, 0xB0	; 176
    26e2:	fc 01       	movw	r30, r24
    26e4:	20 83       	st	Z, r18
	
	/* Enable Master Mode */
	SET_BIT(SPCR, MSTR);
    26e6:	8d e2       	ldi	r24, 0x2D	; 45
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	2d e2       	ldi	r18, 0x2D	; 45
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	f9 01       	movw	r30, r18
    26f0:	20 81       	ld	r18, Z
    26f2:	20 61       	ori	r18, 0x10	; 16
    26f4:	fc 01       	movw	r30, r24
    26f6:	20 83       	st	Z, r18
	/* Set clock to fosc/16*/
	SET_BIT(SPCR, SPR0);
    26f8:	8d e2       	ldi	r24, 0x2D	; 45
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	2d e2       	ldi	r18, 0x2D	; 45
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	f9 01       	movw	r30, r18
    2702:	20 81       	ld	r18, Z
    2704:	21 60       	ori	r18, 0x01	; 1
    2706:	fc 01       	movw	r30, r24
    2708:	20 83       	st	Z, r18
	SET_BIT(SPCR, SPR1);
    270a:	8d e2       	ldi	r24, 0x2D	; 45
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	2d e2       	ldi	r18, 0x2D	; 45
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	f9 01       	movw	r30, r18
    2714:	20 81       	ld	r18, Z
    2716:	22 60       	ori	r18, 0x02	; 2
    2718:	fc 01       	movw	r30, r24
    271a:	20 83       	st	Z, r18
	SET_BIT(SPCR, CPHA);
    271c:	8d e2       	ldi	r24, 0x2D	; 45
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	2d e2       	ldi	r18, 0x2D	; 45
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	f9 01       	movw	r30, r18
    2726:	20 81       	ld	r18, Z
    2728:	24 60       	ori	r18, 0x04	; 4
    272a:	fc 01       	movw	r30, r24
    272c:	20 83       	st	Z, r18
	/* Enable SPI */
	SET_BIT(SPCR, SPE);
    272e:	8d e2       	ldi	r24, 0x2D	; 45
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	2d e2       	ldi	r18, 0x2D	; 45
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	f9 01       	movw	r30, r18
    2738:	20 81       	ld	r18, Z
    273a:	20 64       	ori	r18, 0x40	; 64
    273c:	fc 01       	movw	r30, r24
    273e:	20 83       	st	Z, r18
	/* Enable interrupt */
	SET_BIT(SPCR, SPIE);
    2740:	8d e2       	ldi	r24, 0x2D	; 45
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	2d e2       	ldi	r18, 0x2D	; 45
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	f9 01       	movw	r30, r18
    274a:	20 81       	ld	r18, Z
    274c:	20 68       	ori	r18, 0x80	; 128
    274e:	fc 01       	movw	r30, r24
    2750:	20 83       	st	Z, r18
}
    2752:	00 00       	nop
    2754:	df 91       	pop	r29
    2756:	cf 91       	pop	r28
    2758:	08 95       	ret

0000275a <SPI_masterTransmit>:

void SPI_masterTransmit(c8 data)
{
    275a:	cf 93       	push	r28
    275c:	df 93       	push	r29
    275e:	1f 92       	push	r1
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	89 83       	std	Y+1, r24	; 0x01
	/* Start the Transmission */
	SPDR = data;
    2766:	8f e2       	ldi	r24, 0x2F	; 47
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	29 81       	ldd	r18, Y+1	; 0x01
    276c:	fc 01       	movw	r30, r24
    276e:	20 83       	st	Z, r18
	
	/* Wait for Completion */
	while(!(SPSR & (1 << SPIF)));
    2770:	00 00       	nop
    2772:	8e e2       	ldi	r24, 0x2E	; 46
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	fc 01       	movw	r30, r24
    2778:	80 81       	ld	r24, Z
    277a:	88 23       	and	r24, r24
    277c:	d4 f7       	brge	.-12     	; 0x2772 <SPI_masterTransmit+0x18>
}
    277e:	00 00       	nop
    2780:	0f 90       	pop	r0
    2782:	df 91       	pop	r29
    2784:	cf 91       	pop	r28
    2786:	08 95       	ret

00002788 <SPI_masterReceive>:

c8 SPI_masterReceive(void)
{
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
	/* wait for the SPI buffer's full */
	while(!(SPSR & (1 << SPIF)));
    2790:	00 00       	nop
    2792:	8e e2       	ldi	r24, 0x2E	; 46
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	fc 01       	movw	r30, r24
    2798:	80 81       	ld	r24, Z
    279a:	88 23       	and	r24, r24
    279c:	d4 f7       	brge	.-12     	; 0x2792 <SPI_masterReceive+0xa>
	/* return SPI buffer */
	return SPDR;
    279e:	8f e2       	ldi	r24, 0x2F	; 47
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	fc 01       	movw	r30, r24
    27a4:	80 81       	ld	r24, Z
}
    27a6:	df 91       	pop	r29
    27a8:	cf 91       	pop	r28
    27aa:	08 95       	ret

000027ac <TC72_Init>:

void TC72_Init(void)
{
    27ac:	cf 93       	push	r28
    27ae:	df 93       	push	r29
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	2e 97       	sbiw	r28, 0x0e	; 14
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(SPI_PORT, SS);
    27c0:	88 e3       	ldi	r24, 0x38	; 56
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	28 e3       	ldi	r18, 0x38	; 56
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	f9 01       	movw	r30, r18
    27ca:	20 81       	ld	r18, Z
    27cc:	20 61       	ori	r18, 0x10	; 16
    27ce:	fc 01       	movw	r30, r24
    27d0:	20 83       	st	Z, r18
	/* Select control register */
	SPI_masterTransmit(0x80);
    27d2:	80 e8       	ldi	r24, 0x80	; 128
    27d4:	0e 94 ad 13 	call	0x275a	; 0x275a <SPI_masterTransmit>
	
	/* Select Continuous temperature conversion */
	SPI_masterTransmit(0x40);
    27d8:	80 e4       	ldi	r24, 0x40	; 64
    27da:	0e 94 ad 13 	call	0x275a	; 0x275a <SPI_masterTransmit>
	CLR_BIT(SPI_PORT, SS);
    27de:	88 e3       	ldi	r24, 0x38	; 56
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	28 e3       	ldi	r18, 0x38	; 56
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	f9 01       	movw	r30, r18
    27e8:	20 81       	ld	r18, Z
    27ea:	2f 7e       	andi	r18, 0xEF	; 239
    27ec:	fc 01       	movw	r30, r24
    27ee:	20 83       	st	Z, r18
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	a6 e1       	ldi	r26, 0x16	; 22
    27f6:	b3 e4       	ldi	r27, 0x43	; 67
    27f8:	89 83       	std	Y+1, r24	; 0x01
    27fa:	9a 83       	std	Y+2, r25	; 0x02
    27fc:	ab 83       	std	Y+3, r26	; 0x03
    27fe:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	4a e7       	ldi	r20, 0x7A	; 122
    2806:	53 e4       	ldi	r21, 0x43	; 67
    2808:	69 81       	ldd	r22, Y+1	; 0x01
    280a:	7a 81       	ldd	r23, Y+2	; 0x02
    280c:	8b 81       	ldd	r24, Y+3	; 0x03
    280e:	9c 81       	ldd	r25, Y+4	; 0x04
    2810:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	8d 83       	std	Y+5, r24	; 0x05
    281a:	9e 83       	std	Y+6, r25	; 0x06
    281c:	af 83       	std	Y+7, r26	; 0x07
    281e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	40 e8       	ldi	r20, 0x80	; 128
    2826:	5f e3       	ldi	r21, 0x3F	; 63
    2828:	6d 81       	ldd	r22, Y+5	; 0x05
    282a:	7e 81       	ldd	r23, Y+6	; 0x06
    282c:	8f 81       	ldd	r24, Y+7	; 0x07
    282e:	98 85       	ldd	r25, Y+8	; 0x08
    2830:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__cmpsf2>
    2834:	88 23       	and	r24, r24
    2836:	2c f4       	brge	.+10     	; 0x2842 <TC72_Init+0x96>
		__ticks = 1;
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	9a 87       	std	Y+10, r25	; 0x0a
    283e:	89 87       	std	Y+9, r24	; 0x09
    2840:	3f c0       	rjmp	.+126    	; 0x28c0 <TC72_Init+0x114>
	else if (__tmp > 65535)
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	3f ef       	ldi	r19, 0xFF	; 255
    2846:	4f e7       	ldi	r20, 0x7F	; 127
    2848:	57 e4       	ldi	r21, 0x47	; 71
    284a:	6d 81       	ldd	r22, Y+5	; 0x05
    284c:	7e 81       	ldd	r23, Y+6	; 0x06
    284e:	8f 81       	ldd	r24, Y+7	; 0x07
    2850:	98 85       	ldd	r25, Y+8	; 0x08
    2852:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__gesf2>
    2856:	18 16       	cp	r1, r24
    2858:	4c f5       	brge	.+82     	; 0x28ac <TC72_Init+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e2       	ldi	r20, 0x20	; 32
    2860:	51 e4       	ldi	r21, 0x41	; 65
    2862:	69 81       	ldd	r22, Y+1	; 0x01
    2864:	7a 81       	ldd	r23, Y+2	; 0x02
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	9c 81       	ldd	r25, Y+4	; 0x04
    286a:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	bc 01       	movw	r22, r24
    2874:	cd 01       	movw	r24, r26
    2876:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	9a 87       	std	Y+10, r25	; 0x0a
    2880:	89 87       	std	Y+9, r24	; 0x09
    2882:	0f c0       	rjmp	.+30     	; 0x28a2 <TC72_Init+0xf6>
    2884:	89 e1       	ldi	r24, 0x19	; 25
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	9c 87       	std	Y+12, r25	; 0x0c
    288a:	8b 87       	std	Y+11, r24	; 0x0b
    288c:	8b 85       	ldd	r24, Y+11	; 0x0b
    288e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	f1 f7       	brne	.-4      	; 0x2890 <TC72_Init+0xe4>
    2894:	9c 87       	std	Y+12, r25	; 0x0c
    2896:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2898:	89 85       	ldd	r24, Y+9	; 0x09
    289a:	9a 85       	ldd	r25, Y+10	; 0x0a
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	9a 87       	std	Y+10, r25	; 0x0a
    28a0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a2:	89 85       	ldd	r24, Y+9	; 0x09
    28a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a6:	89 2b       	or	r24, r25
    28a8:	69 f7       	brne	.-38     	; 0x2884 <TC72_Init+0xd8>
	
	_delay_ms(150);
    28aa:	14 c0       	rjmp	.+40     	; 0x28d4 <TC72_Init+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ac:	6d 81       	ldd	r22, Y+5	; 0x05
    28ae:	7e 81       	ldd	r23, Y+6	; 0x06
    28b0:	8f 81       	ldd	r24, Y+7	; 0x07
    28b2:	98 85       	ldd	r25, Y+8	; 0x08
    28b4:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fixunssfsi>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	9a 87       	std	Y+10, r25	; 0x0a
    28be:	89 87       	std	Y+9, r24	; 0x09
    28c0:	89 85       	ldd	r24, Y+9	; 0x09
    28c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c4:	9e 87       	std	Y+14, r25	; 0x0e
    28c6:	8d 87       	std	Y+13, r24	; 0x0d
    28c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	f1 f7       	brne	.-4      	; 0x28cc <TC72_Init+0x120>
    28d0:	9e 87       	std	Y+14, r25	; 0x0e
    28d2:	8d 87       	std	Y+13, r24	; 0x0d
    28d4:	00 00       	nop
    28d6:	2e 96       	adiw	r28, 0x0e	; 14
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	de bf       	out	0x3e, r29	; 62
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	cd bf       	out	0x3d, r28	; 61
    28e2:	df 91       	pop	r29
    28e4:	cf 91       	pop	r28
    28e6:	08 95       	ret

000028e8 <main>:
#include "APPL/app.h"

int main(void)
{
    28e8:	cf 93       	push	r28
    28ea:	df 93       	push	r29
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
	WDT_OFF();
    28f0:	0e 94 f8 07 	call	0xff0	; 0xff0 <WDT_OFF>
	Init();
    28f4:	0e 94 49 00 	call	0x92	; 0x92 <Init>
	Welcome_Screen();
    28f8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Welcome_Screen>
	
    /* Replace with your application code */
    while (1)
    {
		
		schedule();
    28fc:	0e 94 96 05 	call	0xb2c	; 0xb2c <schedule>
		
    }
    2900:	fd cf       	rjmp	.-6      	; 0x28fc <main+0x14>

00002902 <__subsf3>:
    2902:	50 58       	subi	r21, 0x80	; 128

00002904 <__addsf3>:
    2904:	bb 27       	eor	r27, r27
    2906:	aa 27       	eor	r26, r26
    2908:	0e 94 99 14 	call	0x2932	; 0x2932 <__addsf3x>
    290c:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__fp_round>
    2910:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__fp_pscA>
    2914:	38 f0       	brcs	.+14     	; 0x2924 <__addsf3+0x20>
    2916:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__fp_pscB>
    291a:	20 f0       	brcs	.+8      	; 0x2924 <__addsf3+0x20>
    291c:	39 f4       	brne	.+14     	; 0x292c <__addsf3+0x28>
    291e:	9f 3f       	cpi	r25, 0xFF	; 255
    2920:	19 f4       	brne	.+6      	; 0x2928 <__addsf3+0x24>
    2922:	26 f4       	brtc	.+8      	; 0x292c <__addsf3+0x28>
    2924:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__fp_nan>
    2928:	0e f4       	brtc	.+2      	; 0x292c <__addsf3+0x28>
    292a:	e0 95       	com	r30
    292c:	e7 fb       	bst	r30, 7
    292e:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__fp_inf>

00002932 <__addsf3x>:
    2932:	e9 2f       	mov	r30, r25
    2934:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <__fp_split3>
    2938:	58 f3       	brcs	.-42     	; 0x2910 <__addsf3+0xc>
    293a:	ba 17       	cp	r27, r26
    293c:	62 07       	cpc	r22, r18
    293e:	73 07       	cpc	r23, r19
    2940:	84 07       	cpc	r24, r20
    2942:	95 07       	cpc	r25, r21
    2944:	20 f0       	brcs	.+8      	; 0x294e <__addsf3x+0x1c>
    2946:	79 f4       	brne	.+30     	; 0x2966 <__addsf3x+0x34>
    2948:	a6 f5       	brtc	.+104    	; 0x29b2 <__addsf3x+0x80>
    294a:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <__fp_zero>
    294e:	0e f4       	brtc	.+2      	; 0x2952 <__addsf3x+0x20>
    2950:	e0 95       	com	r30
    2952:	0b 2e       	mov	r0, r27
    2954:	ba 2f       	mov	r27, r26
    2956:	a0 2d       	mov	r26, r0
    2958:	0b 01       	movw	r0, r22
    295a:	b9 01       	movw	r22, r18
    295c:	90 01       	movw	r18, r0
    295e:	0c 01       	movw	r0, r24
    2960:	ca 01       	movw	r24, r20
    2962:	a0 01       	movw	r20, r0
    2964:	11 24       	eor	r1, r1
    2966:	ff 27       	eor	r31, r31
    2968:	59 1b       	sub	r21, r25
    296a:	99 f0       	breq	.+38     	; 0x2992 <__addsf3x+0x60>
    296c:	59 3f       	cpi	r21, 0xF9	; 249
    296e:	50 f4       	brcc	.+20     	; 0x2984 <__addsf3x+0x52>
    2970:	50 3e       	cpi	r21, 0xE0	; 224
    2972:	68 f1       	brcs	.+90     	; 0x29ce <__addsf3x+0x9c>
    2974:	1a 16       	cp	r1, r26
    2976:	f0 40       	sbci	r31, 0x00	; 0
    2978:	a2 2f       	mov	r26, r18
    297a:	23 2f       	mov	r18, r19
    297c:	34 2f       	mov	r19, r20
    297e:	44 27       	eor	r20, r20
    2980:	58 5f       	subi	r21, 0xF8	; 248
    2982:	f3 cf       	rjmp	.-26     	; 0x296a <__addsf3x+0x38>
    2984:	46 95       	lsr	r20
    2986:	37 95       	ror	r19
    2988:	27 95       	ror	r18
    298a:	a7 95       	ror	r26
    298c:	f0 40       	sbci	r31, 0x00	; 0
    298e:	53 95       	inc	r21
    2990:	c9 f7       	brne	.-14     	; 0x2984 <__addsf3x+0x52>
    2992:	7e f4       	brtc	.+30     	; 0x29b2 <__addsf3x+0x80>
    2994:	1f 16       	cp	r1, r31
    2996:	ba 0b       	sbc	r27, r26
    2998:	62 0b       	sbc	r22, r18
    299a:	73 0b       	sbc	r23, r19
    299c:	84 0b       	sbc	r24, r20
    299e:	ba f0       	brmi	.+46     	; 0x29ce <__addsf3x+0x9c>
    29a0:	91 50       	subi	r25, 0x01	; 1
    29a2:	a1 f0       	breq	.+40     	; 0x29cc <__addsf3x+0x9a>
    29a4:	ff 0f       	add	r31, r31
    29a6:	bb 1f       	adc	r27, r27
    29a8:	66 1f       	adc	r22, r22
    29aa:	77 1f       	adc	r23, r23
    29ac:	88 1f       	adc	r24, r24
    29ae:	c2 f7       	brpl	.-16     	; 0x29a0 <__addsf3x+0x6e>
    29b0:	0e c0       	rjmp	.+28     	; 0x29ce <__addsf3x+0x9c>
    29b2:	ba 0f       	add	r27, r26
    29b4:	62 1f       	adc	r22, r18
    29b6:	73 1f       	adc	r23, r19
    29b8:	84 1f       	adc	r24, r20
    29ba:	48 f4       	brcc	.+18     	; 0x29ce <__addsf3x+0x9c>
    29bc:	87 95       	ror	r24
    29be:	77 95       	ror	r23
    29c0:	67 95       	ror	r22
    29c2:	b7 95       	ror	r27
    29c4:	f7 95       	ror	r31
    29c6:	9e 3f       	cpi	r25, 0xFE	; 254
    29c8:	08 f0       	brcs	.+2      	; 0x29cc <__addsf3x+0x9a>
    29ca:	b0 cf       	rjmp	.-160    	; 0x292c <__addsf3+0x28>
    29cc:	93 95       	inc	r25
    29ce:	88 0f       	add	r24, r24
    29d0:	08 f0       	brcs	.+2      	; 0x29d4 <__addsf3x+0xa2>
    29d2:	99 27       	eor	r25, r25
    29d4:	ee 0f       	add	r30, r30
    29d6:	97 95       	ror	r25
    29d8:	87 95       	ror	r24
    29da:	08 95       	ret

000029dc <__cmpsf2>:
    29dc:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <__fp_cmp>
    29e0:	08 f4       	brcc	.+2      	; 0x29e4 <__cmpsf2+0x8>
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	08 95       	ret

000029e6 <__divsf3>:
    29e6:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__divsf3x>
    29ea:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__fp_round>
    29ee:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__fp_pscB>
    29f2:	58 f0       	brcs	.+22     	; 0x2a0a <__divsf3+0x24>
    29f4:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__fp_pscA>
    29f8:	40 f0       	brcs	.+16     	; 0x2a0a <__divsf3+0x24>
    29fa:	29 f4       	brne	.+10     	; 0x2a06 <__divsf3+0x20>
    29fc:	5f 3f       	cpi	r21, 0xFF	; 255
    29fe:	29 f0       	breq	.+10     	; 0x2a0a <__divsf3+0x24>
    2a00:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__fp_inf>
    2a04:	51 11       	cpse	r21, r1
    2a06:	0c 94 40 16 	jmp	0x2c80	; 0x2c80 <__fp_szero>
    2a0a:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__fp_nan>

00002a0e <__divsf3x>:
    2a0e:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <__fp_split3>
    2a12:	68 f3       	brcs	.-38     	; 0x29ee <__divsf3+0x8>

00002a14 <__divsf3_pse>:
    2a14:	99 23       	and	r25, r25
    2a16:	b1 f3       	breq	.-20     	; 0x2a04 <__divsf3+0x1e>
    2a18:	55 23       	and	r21, r21
    2a1a:	91 f3       	breq	.-28     	; 0x2a00 <__divsf3+0x1a>
    2a1c:	95 1b       	sub	r25, r21
    2a1e:	55 0b       	sbc	r21, r21
    2a20:	bb 27       	eor	r27, r27
    2a22:	aa 27       	eor	r26, r26
    2a24:	62 17       	cp	r22, r18
    2a26:	73 07       	cpc	r23, r19
    2a28:	84 07       	cpc	r24, r20
    2a2a:	38 f0       	brcs	.+14     	; 0x2a3a <__divsf3_pse+0x26>
    2a2c:	9f 5f       	subi	r25, 0xFF	; 255
    2a2e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a30:	22 0f       	add	r18, r18
    2a32:	33 1f       	adc	r19, r19
    2a34:	44 1f       	adc	r20, r20
    2a36:	aa 1f       	adc	r26, r26
    2a38:	a9 f3       	breq	.-22     	; 0x2a24 <__divsf3_pse+0x10>
    2a3a:	35 d0       	rcall	.+106    	; 0x2aa6 <__divsf3_pse+0x92>
    2a3c:	0e 2e       	mov	r0, r30
    2a3e:	3a f0       	brmi	.+14     	; 0x2a4e <__divsf3_pse+0x3a>
    2a40:	e0 e8       	ldi	r30, 0x80	; 128
    2a42:	32 d0       	rcall	.+100    	; 0x2aa8 <__divsf3_pse+0x94>
    2a44:	91 50       	subi	r25, 0x01	; 1
    2a46:	50 40       	sbci	r21, 0x00	; 0
    2a48:	e6 95       	lsr	r30
    2a4a:	00 1c       	adc	r0, r0
    2a4c:	ca f7       	brpl	.-14     	; 0x2a40 <__divsf3_pse+0x2c>
    2a4e:	2b d0       	rcall	.+86     	; 0x2aa6 <__divsf3_pse+0x92>
    2a50:	fe 2f       	mov	r31, r30
    2a52:	29 d0       	rcall	.+82     	; 0x2aa6 <__divsf3_pse+0x92>
    2a54:	66 0f       	add	r22, r22
    2a56:	77 1f       	adc	r23, r23
    2a58:	88 1f       	adc	r24, r24
    2a5a:	bb 1f       	adc	r27, r27
    2a5c:	26 17       	cp	r18, r22
    2a5e:	37 07       	cpc	r19, r23
    2a60:	48 07       	cpc	r20, r24
    2a62:	ab 07       	cpc	r26, r27
    2a64:	b0 e8       	ldi	r27, 0x80	; 128
    2a66:	09 f0       	breq	.+2      	; 0x2a6a <__divsf3_pse+0x56>
    2a68:	bb 0b       	sbc	r27, r27
    2a6a:	80 2d       	mov	r24, r0
    2a6c:	bf 01       	movw	r22, r30
    2a6e:	ff 27       	eor	r31, r31
    2a70:	93 58       	subi	r25, 0x83	; 131
    2a72:	5f 4f       	sbci	r21, 0xFF	; 255
    2a74:	3a f0       	brmi	.+14     	; 0x2a84 <__divsf3_pse+0x70>
    2a76:	9e 3f       	cpi	r25, 0xFE	; 254
    2a78:	51 05       	cpc	r21, r1
    2a7a:	78 f0       	brcs	.+30     	; 0x2a9a <__divsf3_pse+0x86>
    2a7c:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__fp_inf>
    2a80:	0c 94 40 16 	jmp	0x2c80	; 0x2c80 <__fp_szero>
    2a84:	5f 3f       	cpi	r21, 0xFF	; 255
    2a86:	e4 f3       	brlt	.-8      	; 0x2a80 <__divsf3_pse+0x6c>
    2a88:	98 3e       	cpi	r25, 0xE8	; 232
    2a8a:	d4 f3       	brlt	.-12     	; 0x2a80 <__divsf3_pse+0x6c>
    2a8c:	86 95       	lsr	r24
    2a8e:	77 95       	ror	r23
    2a90:	67 95       	ror	r22
    2a92:	b7 95       	ror	r27
    2a94:	f7 95       	ror	r31
    2a96:	9f 5f       	subi	r25, 0xFF	; 255
    2a98:	c9 f7       	brne	.-14     	; 0x2a8c <__divsf3_pse+0x78>
    2a9a:	88 0f       	add	r24, r24
    2a9c:	91 1d       	adc	r25, r1
    2a9e:	96 95       	lsr	r25
    2aa0:	87 95       	ror	r24
    2aa2:	97 f9       	bld	r25, 7
    2aa4:	08 95       	ret
    2aa6:	e1 e0       	ldi	r30, 0x01	; 1
    2aa8:	66 0f       	add	r22, r22
    2aaa:	77 1f       	adc	r23, r23
    2aac:	88 1f       	adc	r24, r24
    2aae:	bb 1f       	adc	r27, r27
    2ab0:	62 17       	cp	r22, r18
    2ab2:	73 07       	cpc	r23, r19
    2ab4:	84 07       	cpc	r24, r20
    2ab6:	ba 07       	cpc	r27, r26
    2ab8:	20 f0       	brcs	.+8      	; 0x2ac2 <__divsf3_pse+0xae>
    2aba:	62 1b       	sub	r22, r18
    2abc:	73 0b       	sbc	r23, r19
    2abe:	84 0b       	sbc	r24, r20
    2ac0:	ba 0b       	sbc	r27, r26
    2ac2:	ee 1f       	adc	r30, r30
    2ac4:	88 f7       	brcc	.-30     	; 0x2aa8 <__divsf3_pse+0x94>
    2ac6:	e0 95       	com	r30
    2ac8:	08 95       	ret

00002aca <__fixunssfsi>:
    2aca:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__fp_splitA>
    2ace:	88 f0       	brcs	.+34     	; 0x2af2 <__fixunssfsi+0x28>
    2ad0:	9f 57       	subi	r25, 0x7F	; 127
    2ad2:	98 f0       	brcs	.+38     	; 0x2afa <__fixunssfsi+0x30>
    2ad4:	b9 2f       	mov	r27, r25
    2ad6:	99 27       	eor	r25, r25
    2ad8:	b7 51       	subi	r27, 0x17	; 23
    2ada:	b0 f0       	brcs	.+44     	; 0x2b08 <__fixunssfsi+0x3e>
    2adc:	e1 f0       	breq	.+56     	; 0x2b16 <__fixunssfsi+0x4c>
    2ade:	66 0f       	add	r22, r22
    2ae0:	77 1f       	adc	r23, r23
    2ae2:	88 1f       	adc	r24, r24
    2ae4:	99 1f       	adc	r25, r25
    2ae6:	1a f0       	brmi	.+6      	; 0x2aee <__fixunssfsi+0x24>
    2ae8:	ba 95       	dec	r27
    2aea:	c9 f7       	brne	.-14     	; 0x2ade <__fixunssfsi+0x14>
    2aec:	14 c0       	rjmp	.+40     	; 0x2b16 <__fixunssfsi+0x4c>
    2aee:	b1 30       	cpi	r27, 0x01	; 1
    2af0:	91 f0       	breq	.+36     	; 0x2b16 <__fixunssfsi+0x4c>
    2af2:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <__fp_zero>
    2af6:	b1 e0       	ldi	r27, 0x01	; 1
    2af8:	08 95       	ret
    2afa:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <__fp_zero>
    2afe:	67 2f       	mov	r22, r23
    2b00:	78 2f       	mov	r23, r24
    2b02:	88 27       	eor	r24, r24
    2b04:	b8 5f       	subi	r27, 0xF8	; 248
    2b06:	39 f0       	breq	.+14     	; 0x2b16 <__fixunssfsi+0x4c>
    2b08:	b9 3f       	cpi	r27, 0xF9	; 249
    2b0a:	cc f3       	brlt	.-14     	; 0x2afe <__fixunssfsi+0x34>
    2b0c:	86 95       	lsr	r24
    2b0e:	77 95       	ror	r23
    2b10:	67 95       	ror	r22
    2b12:	b3 95       	inc	r27
    2b14:	d9 f7       	brne	.-10     	; 0x2b0c <__fixunssfsi+0x42>
    2b16:	3e f4       	brtc	.+14     	; 0x2b26 <__fixunssfsi+0x5c>
    2b18:	90 95       	com	r25
    2b1a:	80 95       	com	r24
    2b1c:	70 95       	com	r23
    2b1e:	61 95       	neg	r22
    2b20:	7f 4f       	sbci	r23, 0xFF	; 255
    2b22:	8f 4f       	sbci	r24, 0xFF	; 255
    2b24:	9f 4f       	sbci	r25, 0xFF	; 255
    2b26:	08 95       	ret

00002b28 <__floatunsisf>:
    2b28:	e8 94       	clt
    2b2a:	09 c0       	rjmp	.+18     	; 0x2b3e <__floatsisf+0x12>

00002b2c <__floatsisf>:
    2b2c:	97 fb       	bst	r25, 7
    2b2e:	3e f4       	brtc	.+14     	; 0x2b3e <__floatsisf+0x12>
    2b30:	90 95       	com	r25
    2b32:	80 95       	com	r24
    2b34:	70 95       	com	r23
    2b36:	61 95       	neg	r22
    2b38:	7f 4f       	sbci	r23, 0xFF	; 255
    2b3a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b3e:	99 23       	and	r25, r25
    2b40:	a9 f0       	breq	.+42     	; 0x2b6c <__floatsisf+0x40>
    2b42:	f9 2f       	mov	r31, r25
    2b44:	96 e9       	ldi	r25, 0x96	; 150
    2b46:	bb 27       	eor	r27, r27
    2b48:	93 95       	inc	r25
    2b4a:	f6 95       	lsr	r31
    2b4c:	87 95       	ror	r24
    2b4e:	77 95       	ror	r23
    2b50:	67 95       	ror	r22
    2b52:	b7 95       	ror	r27
    2b54:	f1 11       	cpse	r31, r1
    2b56:	f8 cf       	rjmp	.-16     	; 0x2b48 <__floatsisf+0x1c>
    2b58:	fa f4       	brpl	.+62     	; 0x2b98 <__floatsisf+0x6c>
    2b5a:	bb 0f       	add	r27, r27
    2b5c:	11 f4       	brne	.+4      	; 0x2b62 <__floatsisf+0x36>
    2b5e:	60 ff       	sbrs	r22, 0
    2b60:	1b c0       	rjmp	.+54     	; 0x2b98 <__floatsisf+0x6c>
    2b62:	6f 5f       	subi	r22, 0xFF	; 255
    2b64:	7f 4f       	sbci	r23, 0xFF	; 255
    2b66:	8f 4f       	sbci	r24, 0xFF	; 255
    2b68:	9f 4f       	sbci	r25, 0xFF	; 255
    2b6a:	16 c0       	rjmp	.+44     	; 0x2b98 <__floatsisf+0x6c>
    2b6c:	88 23       	and	r24, r24
    2b6e:	11 f0       	breq	.+4      	; 0x2b74 <__floatsisf+0x48>
    2b70:	96 e9       	ldi	r25, 0x96	; 150
    2b72:	11 c0       	rjmp	.+34     	; 0x2b96 <__floatsisf+0x6a>
    2b74:	77 23       	and	r23, r23
    2b76:	21 f0       	breq	.+8      	; 0x2b80 <__floatsisf+0x54>
    2b78:	9e e8       	ldi	r25, 0x8E	; 142
    2b7a:	87 2f       	mov	r24, r23
    2b7c:	76 2f       	mov	r23, r22
    2b7e:	05 c0       	rjmp	.+10     	; 0x2b8a <__floatsisf+0x5e>
    2b80:	66 23       	and	r22, r22
    2b82:	71 f0       	breq	.+28     	; 0x2ba0 <__floatsisf+0x74>
    2b84:	96 e8       	ldi	r25, 0x86	; 134
    2b86:	86 2f       	mov	r24, r22
    2b88:	70 e0       	ldi	r23, 0x00	; 0
    2b8a:	60 e0       	ldi	r22, 0x00	; 0
    2b8c:	2a f0       	brmi	.+10     	; 0x2b98 <__floatsisf+0x6c>
    2b8e:	9a 95       	dec	r25
    2b90:	66 0f       	add	r22, r22
    2b92:	77 1f       	adc	r23, r23
    2b94:	88 1f       	adc	r24, r24
    2b96:	da f7       	brpl	.-10     	; 0x2b8e <__floatsisf+0x62>
    2b98:	88 0f       	add	r24, r24
    2b9a:	96 95       	lsr	r25
    2b9c:	87 95       	ror	r24
    2b9e:	97 f9       	bld	r25, 7
    2ba0:	08 95       	ret

00002ba2 <__fp_cmp>:
    2ba2:	99 0f       	add	r25, r25
    2ba4:	00 08       	sbc	r0, r0
    2ba6:	55 0f       	add	r21, r21
    2ba8:	aa 0b       	sbc	r26, r26
    2baa:	e0 e8       	ldi	r30, 0x80	; 128
    2bac:	fe ef       	ldi	r31, 0xFE	; 254
    2bae:	16 16       	cp	r1, r22
    2bb0:	17 06       	cpc	r1, r23
    2bb2:	e8 07       	cpc	r30, r24
    2bb4:	f9 07       	cpc	r31, r25
    2bb6:	c0 f0       	brcs	.+48     	; 0x2be8 <__fp_cmp+0x46>
    2bb8:	12 16       	cp	r1, r18
    2bba:	13 06       	cpc	r1, r19
    2bbc:	e4 07       	cpc	r30, r20
    2bbe:	f5 07       	cpc	r31, r21
    2bc0:	98 f0       	brcs	.+38     	; 0x2be8 <__fp_cmp+0x46>
    2bc2:	62 1b       	sub	r22, r18
    2bc4:	73 0b       	sbc	r23, r19
    2bc6:	84 0b       	sbc	r24, r20
    2bc8:	95 0b       	sbc	r25, r21
    2bca:	39 f4       	brne	.+14     	; 0x2bda <__fp_cmp+0x38>
    2bcc:	0a 26       	eor	r0, r26
    2bce:	61 f0       	breq	.+24     	; 0x2be8 <__fp_cmp+0x46>
    2bd0:	23 2b       	or	r18, r19
    2bd2:	24 2b       	or	r18, r20
    2bd4:	25 2b       	or	r18, r21
    2bd6:	21 f4       	brne	.+8      	; 0x2be0 <__fp_cmp+0x3e>
    2bd8:	08 95       	ret
    2bda:	0a 26       	eor	r0, r26
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <__fp_cmp+0x3e>
    2bde:	a1 40       	sbci	r26, 0x01	; 1
    2be0:	a6 95       	lsr	r26
    2be2:	8f ef       	ldi	r24, 0xFF	; 255
    2be4:	81 1d       	adc	r24, r1
    2be6:	81 1d       	adc	r24, r1
    2be8:	08 95       	ret

00002bea <__fp_inf>:
    2bea:	97 f9       	bld	r25, 7
    2bec:	9f 67       	ori	r25, 0x7F	; 127
    2bee:	80 e8       	ldi	r24, 0x80	; 128
    2bf0:	70 e0       	ldi	r23, 0x00	; 0
    2bf2:	60 e0       	ldi	r22, 0x00	; 0
    2bf4:	08 95       	ret

00002bf6 <__fp_nan>:
    2bf6:	9f ef       	ldi	r25, 0xFF	; 255
    2bf8:	80 ec       	ldi	r24, 0xC0	; 192
    2bfa:	08 95       	ret

00002bfc <__fp_pscA>:
    2bfc:	00 24       	eor	r0, r0
    2bfe:	0a 94       	dec	r0
    2c00:	16 16       	cp	r1, r22
    2c02:	17 06       	cpc	r1, r23
    2c04:	18 06       	cpc	r1, r24
    2c06:	09 06       	cpc	r0, r25
    2c08:	08 95       	ret

00002c0a <__fp_pscB>:
    2c0a:	00 24       	eor	r0, r0
    2c0c:	0a 94       	dec	r0
    2c0e:	12 16       	cp	r1, r18
    2c10:	13 06       	cpc	r1, r19
    2c12:	14 06       	cpc	r1, r20
    2c14:	05 06       	cpc	r0, r21
    2c16:	08 95       	ret

00002c18 <__fp_round>:
    2c18:	09 2e       	mov	r0, r25
    2c1a:	03 94       	inc	r0
    2c1c:	00 0c       	add	r0, r0
    2c1e:	11 f4       	brne	.+4      	; 0x2c24 <__fp_round+0xc>
    2c20:	88 23       	and	r24, r24
    2c22:	52 f0       	brmi	.+20     	; 0x2c38 <__fp_round+0x20>
    2c24:	bb 0f       	add	r27, r27
    2c26:	40 f4       	brcc	.+16     	; 0x2c38 <__fp_round+0x20>
    2c28:	bf 2b       	or	r27, r31
    2c2a:	11 f4       	brne	.+4      	; 0x2c30 <__fp_round+0x18>
    2c2c:	60 ff       	sbrs	r22, 0
    2c2e:	04 c0       	rjmp	.+8      	; 0x2c38 <__fp_round+0x20>
    2c30:	6f 5f       	subi	r22, 0xFF	; 255
    2c32:	7f 4f       	sbci	r23, 0xFF	; 255
    2c34:	8f 4f       	sbci	r24, 0xFF	; 255
    2c36:	9f 4f       	sbci	r25, 0xFF	; 255
    2c38:	08 95       	ret

00002c3a <__fp_split3>:
    2c3a:	57 fd       	sbrc	r21, 7
    2c3c:	90 58       	subi	r25, 0x80	; 128
    2c3e:	44 0f       	add	r20, r20
    2c40:	55 1f       	adc	r21, r21
    2c42:	59 f0       	breq	.+22     	; 0x2c5a <__fp_splitA+0x10>
    2c44:	5f 3f       	cpi	r21, 0xFF	; 255
    2c46:	71 f0       	breq	.+28     	; 0x2c64 <__fp_splitA+0x1a>
    2c48:	47 95       	ror	r20

00002c4a <__fp_splitA>:
    2c4a:	88 0f       	add	r24, r24
    2c4c:	97 fb       	bst	r25, 7
    2c4e:	99 1f       	adc	r25, r25
    2c50:	61 f0       	breq	.+24     	; 0x2c6a <__fp_splitA+0x20>
    2c52:	9f 3f       	cpi	r25, 0xFF	; 255
    2c54:	79 f0       	breq	.+30     	; 0x2c74 <__fp_splitA+0x2a>
    2c56:	87 95       	ror	r24
    2c58:	08 95       	ret
    2c5a:	12 16       	cp	r1, r18
    2c5c:	13 06       	cpc	r1, r19
    2c5e:	14 06       	cpc	r1, r20
    2c60:	55 1f       	adc	r21, r21
    2c62:	f2 cf       	rjmp	.-28     	; 0x2c48 <__fp_split3+0xe>
    2c64:	46 95       	lsr	r20
    2c66:	f1 df       	rcall	.-30     	; 0x2c4a <__fp_splitA>
    2c68:	08 c0       	rjmp	.+16     	; 0x2c7a <__fp_splitA+0x30>
    2c6a:	16 16       	cp	r1, r22
    2c6c:	17 06       	cpc	r1, r23
    2c6e:	18 06       	cpc	r1, r24
    2c70:	99 1f       	adc	r25, r25
    2c72:	f1 cf       	rjmp	.-30     	; 0x2c56 <__fp_splitA+0xc>
    2c74:	86 95       	lsr	r24
    2c76:	71 05       	cpc	r23, r1
    2c78:	61 05       	cpc	r22, r1
    2c7a:	08 94       	sec
    2c7c:	08 95       	ret

00002c7e <__fp_zero>:
    2c7e:	e8 94       	clt

00002c80 <__fp_szero>:
    2c80:	bb 27       	eor	r27, r27
    2c82:	66 27       	eor	r22, r22
    2c84:	77 27       	eor	r23, r23
    2c86:	cb 01       	movw	r24, r22
    2c88:	97 f9       	bld	r25, 7
    2c8a:	08 95       	ret

00002c8c <__gesf2>:
    2c8c:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <__fp_cmp>
    2c90:	08 f4       	brcc	.+2      	; 0x2c94 <__gesf2+0x8>
    2c92:	8f ef       	ldi	r24, 0xFF	; 255
    2c94:	08 95       	ret

00002c96 <__mulsf3>:
    2c96:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__mulsf3x>
    2c9a:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__fp_round>
    2c9e:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__fp_pscA>
    2ca2:	38 f0       	brcs	.+14     	; 0x2cb2 <__mulsf3+0x1c>
    2ca4:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__fp_pscB>
    2ca8:	20 f0       	brcs	.+8      	; 0x2cb2 <__mulsf3+0x1c>
    2caa:	95 23       	and	r25, r21
    2cac:	11 f0       	breq	.+4      	; 0x2cb2 <__mulsf3+0x1c>
    2cae:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__fp_inf>
    2cb2:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__fp_nan>
    2cb6:	11 24       	eor	r1, r1
    2cb8:	0c 94 40 16 	jmp	0x2c80	; 0x2c80 <__fp_szero>

00002cbc <__mulsf3x>:
    2cbc:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <__fp_split3>
    2cc0:	70 f3       	brcs	.-36     	; 0x2c9e <__mulsf3+0x8>

00002cc2 <__mulsf3_pse>:
    2cc2:	95 9f       	mul	r25, r21
    2cc4:	c1 f3       	breq	.-16     	; 0x2cb6 <__mulsf3+0x20>
    2cc6:	95 0f       	add	r25, r21
    2cc8:	50 e0       	ldi	r21, 0x00	; 0
    2cca:	55 1f       	adc	r21, r21
    2ccc:	62 9f       	mul	r22, r18
    2cce:	f0 01       	movw	r30, r0
    2cd0:	72 9f       	mul	r23, r18
    2cd2:	bb 27       	eor	r27, r27
    2cd4:	f0 0d       	add	r31, r0
    2cd6:	b1 1d       	adc	r27, r1
    2cd8:	63 9f       	mul	r22, r19
    2cda:	aa 27       	eor	r26, r26
    2cdc:	f0 0d       	add	r31, r0
    2cde:	b1 1d       	adc	r27, r1
    2ce0:	aa 1f       	adc	r26, r26
    2ce2:	64 9f       	mul	r22, r20
    2ce4:	66 27       	eor	r22, r22
    2ce6:	b0 0d       	add	r27, r0
    2ce8:	a1 1d       	adc	r26, r1
    2cea:	66 1f       	adc	r22, r22
    2cec:	82 9f       	mul	r24, r18
    2cee:	22 27       	eor	r18, r18
    2cf0:	b0 0d       	add	r27, r0
    2cf2:	a1 1d       	adc	r26, r1
    2cf4:	62 1f       	adc	r22, r18
    2cf6:	73 9f       	mul	r23, r19
    2cf8:	b0 0d       	add	r27, r0
    2cfa:	a1 1d       	adc	r26, r1
    2cfc:	62 1f       	adc	r22, r18
    2cfe:	83 9f       	mul	r24, r19
    2d00:	a0 0d       	add	r26, r0
    2d02:	61 1d       	adc	r22, r1
    2d04:	22 1f       	adc	r18, r18
    2d06:	74 9f       	mul	r23, r20
    2d08:	33 27       	eor	r19, r19
    2d0a:	a0 0d       	add	r26, r0
    2d0c:	61 1d       	adc	r22, r1
    2d0e:	23 1f       	adc	r18, r19
    2d10:	84 9f       	mul	r24, r20
    2d12:	60 0d       	add	r22, r0
    2d14:	21 1d       	adc	r18, r1
    2d16:	82 2f       	mov	r24, r18
    2d18:	76 2f       	mov	r23, r22
    2d1a:	6a 2f       	mov	r22, r26
    2d1c:	11 24       	eor	r1, r1
    2d1e:	9f 57       	subi	r25, 0x7F	; 127
    2d20:	50 40       	sbci	r21, 0x00	; 0
    2d22:	9a f0       	brmi	.+38     	; 0x2d4a <__mulsf3_pse+0x88>
    2d24:	f1 f0       	breq	.+60     	; 0x2d62 <__mulsf3_pse+0xa0>
    2d26:	88 23       	and	r24, r24
    2d28:	4a f0       	brmi	.+18     	; 0x2d3c <__mulsf3_pse+0x7a>
    2d2a:	ee 0f       	add	r30, r30
    2d2c:	ff 1f       	adc	r31, r31
    2d2e:	bb 1f       	adc	r27, r27
    2d30:	66 1f       	adc	r22, r22
    2d32:	77 1f       	adc	r23, r23
    2d34:	88 1f       	adc	r24, r24
    2d36:	91 50       	subi	r25, 0x01	; 1
    2d38:	50 40       	sbci	r21, 0x00	; 0
    2d3a:	a9 f7       	brne	.-22     	; 0x2d26 <__mulsf3_pse+0x64>
    2d3c:	9e 3f       	cpi	r25, 0xFE	; 254
    2d3e:	51 05       	cpc	r21, r1
    2d40:	80 f0       	brcs	.+32     	; 0x2d62 <__mulsf3_pse+0xa0>
    2d42:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__fp_inf>
    2d46:	0c 94 40 16 	jmp	0x2c80	; 0x2c80 <__fp_szero>
    2d4a:	5f 3f       	cpi	r21, 0xFF	; 255
    2d4c:	e4 f3       	brlt	.-8      	; 0x2d46 <__mulsf3_pse+0x84>
    2d4e:	98 3e       	cpi	r25, 0xE8	; 232
    2d50:	d4 f3       	brlt	.-12     	; 0x2d46 <__mulsf3_pse+0x84>
    2d52:	86 95       	lsr	r24
    2d54:	77 95       	ror	r23
    2d56:	67 95       	ror	r22
    2d58:	b7 95       	ror	r27
    2d5a:	f7 95       	ror	r31
    2d5c:	e7 95       	ror	r30
    2d5e:	9f 5f       	subi	r25, 0xFF	; 255
    2d60:	c1 f7       	brne	.-16     	; 0x2d52 <__mulsf3_pse+0x90>
    2d62:	fe 2b       	or	r31, r30
    2d64:	88 0f       	add	r24, r24
    2d66:	91 1d       	adc	r25, r1
    2d68:	96 95       	lsr	r25
    2d6a:	87 95       	ror	r24
    2d6c:	97 f9       	bld	r25, 7
    2d6e:	08 95       	ret

00002d70 <__umulhisi3>:
    2d70:	a2 9f       	mul	r26, r18
    2d72:	b0 01       	movw	r22, r0
    2d74:	b3 9f       	mul	r27, r19
    2d76:	c0 01       	movw	r24, r0
    2d78:	a3 9f       	mul	r26, r19
    2d7a:	70 0d       	add	r23, r0
    2d7c:	81 1d       	adc	r24, r1
    2d7e:	11 24       	eor	r1, r1
    2d80:	91 1d       	adc	r25, r1
    2d82:	b2 9f       	mul	r27, r18
    2d84:	70 0d       	add	r23, r0
    2d86:	81 1d       	adc	r24, r1
    2d88:	11 24       	eor	r1, r1
    2d8a:	91 1d       	adc	r25, r1
    2d8c:	08 95       	ret

00002d8e <atoi>:
    2d8e:	fc 01       	movw	r30, r24
    2d90:	88 27       	eor	r24, r24
    2d92:	99 27       	eor	r25, r25
    2d94:	e8 94       	clt
    2d96:	21 91       	ld	r18, Z+
    2d98:	20 32       	cpi	r18, 0x20	; 32
    2d9a:	e9 f3       	breq	.-6      	; 0x2d96 <atoi+0x8>
    2d9c:	29 30       	cpi	r18, 0x09	; 9
    2d9e:	10 f0       	brcs	.+4      	; 0x2da4 <atoi+0x16>
    2da0:	2e 30       	cpi	r18, 0x0E	; 14
    2da2:	c8 f3       	brcs	.-14     	; 0x2d96 <atoi+0x8>
    2da4:	2b 32       	cpi	r18, 0x2B	; 43
    2da6:	41 f0       	breq	.+16     	; 0x2db8 <atoi+0x2a>
    2da8:	2d 32       	cpi	r18, 0x2D	; 45
    2daa:	39 f4       	brne	.+14     	; 0x2dba <atoi+0x2c>
    2dac:	68 94       	set
    2dae:	04 c0       	rjmp	.+8      	; 0x2db8 <atoi+0x2a>
    2db0:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <__mulhi_const_10>
    2db4:	82 0f       	add	r24, r18
    2db6:	91 1d       	adc	r25, r1
    2db8:	21 91       	ld	r18, Z+
    2dba:	20 53       	subi	r18, 0x30	; 48
    2dbc:	2a 30       	cpi	r18, 0x0A	; 10
    2dbe:	c0 f3       	brcs	.-16     	; 0x2db0 <atoi+0x22>
    2dc0:	1e f4       	brtc	.+6      	; 0x2dc8 <atoi+0x3a>
    2dc2:	90 95       	com	r25
    2dc4:	81 95       	neg	r24
    2dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc8:	08 95       	ret

00002dca <itoa>:
    2dca:	45 32       	cpi	r20, 0x25	; 37
    2dcc:	51 05       	cpc	r21, r1
    2dce:	20 f4       	brcc	.+8      	; 0x2dd8 <itoa+0xe>
    2dd0:	42 30       	cpi	r20, 0x02	; 2
    2dd2:	10 f0       	brcs	.+4      	; 0x2dd8 <itoa+0xe>
    2dd4:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <__itoa_ncheck>
    2dd8:	fb 01       	movw	r30, r22
    2dda:	10 82       	st	Z, r1
    2ddc:	cb 01       	movw	r24, r22
    2dde:	08 95       	ret

00002de0 <__itoa_ncheck>:
    2de0:	bb 27       	eor	r27, r27
    2de2:	4a 30       	cpi	r20, 0x0A	; 10
    2de4:	31 f4       	brne	.+12     	; 0x2df2 <__itoa_ncheck+0x12>
    2de6:	99 23       	and	r25, r25
    2de8:	22 f4       	brpl	.+8      	; 0x2df2 <__itoa_ncheck+0x12>
    2dea:	bd e2       	ldi	r27, 0x2D	; 45
    2dec:	90 95       	com	r25
    2dee:	81 95       	neg	r24
    2df0:	9f 4f       	sbci	r25, 0xFF	; 255
    2df2:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__utoa_common>

00002df6 <__mulhi_const_10>:
    2df6:	7a e0       	ldi	r23, 0x0A	; 10
    2df8:	97 9f       	mul	r25, r23
    2dfa:	90 2d       	mov	r25, r0
    2dfc:	87 9f       	mul	r24, r23
    2dfe:	80 2d       	mov	r24, r0
    2e00:	91 0d       	add	r25, r1
    2e02:	11 24       	eor	r1, r1
    2e04:	08 95       	ret

00002e06 <__utoa_ncheck>:
    2e06:	bb 27       	eor	r27, r27

00002e08 <__utoa_common>:
    2e08:	fb 01       	movw	r30, r22
    2e0a:	55 27       	eor	r21, r21
    2e0c:	aa 27       	eor	r26, r26
    2e0e:	88 0f       	add	r24, r24
    2e10:	99 1f       	adc	r25, r25
    2e12:	aa 1f       	adc	r26, r26
    2e14:	a4 17       	cp	r26, r20
    2e16:	10 f0       	brcs	.+4      	; 0x2e1c <__utoa_common+0x14>
    2e18:	a4 1b       	sub	r26, r20
    2e1a:	83 95       	inc	r24
    2e1c:	50 51       	subi	r21, 0x10	; 16
    2e1e:	b9 f7       	brne	.-18     	; 0x2e0e <__utoa_common+0x6>
    2e20:	a0 5d       	subi	r26, 0xD0	; 208
    2e22:	aa 33       	cpi	r26, 0x3A	; 58
    2e24:	08 f0       	brcs	.+2      	; 0x2e28 <__utoa_common+0x20>
    2e26:	a9 5d       	subi	r26, 0xD9	; 217
    2e28:	a1 93       	st	Z+, r26
    2e2a:	00 97       	sbiw	r24, 0x00	; 0
    2e2c:	79 f7       	brne	.-34     	; 0x2e0c <__utoa_common+0x4>
    2e2e:	b1 11       	cpse	r27, r1
    2e30:	b1 93       	st	Z+, r27
    2e32:	11 92       	st	Z+, r1
    2e34:	cb 01       	movw	r24, r22
    2e36:	0c 94 1d 17 	jmp	0x2e3a	; 0x2e3a <strrev>

00002e3a <strrev>:
    2e3a:	dc 01       	movw	r26, r24
    2e3c:	fc 01       	movw	r30, r24
    2e3e:	67 2f       	mov	r22, r23
    2e40:	71 91       	ld	r23, Z+
    2e42:	77 23       	and	r23, r23
    2e44:	e1 f7       	brne	.-8      	; 0x2e3e <strrev+0x4>
    2e46:	32 97       	sbiw	r30, 0x02	; 2
    2e48:	04 c0       	rjmp	.+8      	; 0x2e52 <strrev+0x18>
    2e4a:	7c 91       	ld	r23, X
    2e4c:	6d 93       	st	X+, r22
    2e4e:	70 83       	st	Z, r23
    2e50:	62 91       	ld	r22, -Z
    2e52:	ae 17       	cp	r26, r30
    2e54:	bf 07       	cpc	r27, r31
    2e56:	c8 f3       	brcs	.-14     	; 0x2e4a <strrev+0x10>
    2e58:	08 95       	ret

00002e5a <_exit>:
    2e5a:	f8 94       	cli

00002e5c <__stop_program>:
    2e5c:	ff cf       	rjmp	.-2      	; 0x2e5c <__stop_program>
