
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000372  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000372  000003e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ad3  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076e  00000000  00000000  00000f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e8  00000000  00000000  00001705  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a4  00000000  00000000  00001d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003e3  00000000  00000000  0000212c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000250f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 b7 01 	jmp	0x36e	; 0x36e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:


int main(void)
{
 char msb,lsb;
    DDRC=0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 bb       	out	0x14, r24	; 20
 DDRD=0xFF;
  86:	81 bb       	out	0x11, r24	; 17
 DDRA=0xFF;
  88:	8a bb       	out	0x1a, r24	; 26
 SPI_masterInit();
  8a:	0e 94 81 00 	call	0x102	; 0x102 <SPI_masterInit>
 TC72_Init();
  8e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <TC72_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	82 e5       	ldi	r24, 0x52	; 82
  96:	97 e0       	ldi	r25, 0x07	; 7
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x16>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x20>
  a2:	00 00       	nop
 _delay_ms(150);
    while (1) 
    {
  
  PORTB|=(1<<4);
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	80 61       	ori	r24, 0x10	; 16
  a8:	88 bb       	out	0x18, r24	; 24
  /*Read the MSB*/
  SPI_masterTransmit(0x02);
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	0e 94 96 00 	call	0x12c	; 0x12c <SPI_masterTransmit>
  /*Issue one more clock frame
  to force data out*/
  SPI_masterTransmit(0x00);
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	0e 94 96 00 	call	0x12c	; 0x12c <SPI_masterTransmit>
  PORTB&=~(1<<4);
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	8f 7e       	andi	r24, 0xEF	; 239
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	8f e9       	ldi	r24, 0x9F	; 159
  be:	9f e0       	ldi	r25, 0x0F	; 15
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x3e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x44>
  c6:	00 00       	nop
  
  _delay_ms(1);
  msb=SPI_masterReceive();
  c8:	0e 94 9a 00 	call	0x134	; 0x134 <SPI_masterReceive>
  cc:	c8 2f       	mov	r28, r24
  
  PORTB|=(1<<4);
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	80 61       	ori	r24, 0x10	; 16
  d2:	88 bb       	out	0x18, r24	; 24
  /*Read The LSB*/
  SPI_masterTransmit(0x01);
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 96 00 	call	0x12c	; 0x12c <SPI_masterTransmit>
  /*Issue one more clock frame
  to force data out*/
  SPI_masterTransmit(0x00);
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 96 00 	call	0x12c	; 0x12c <SPI_masterTransmit>
  PORTB&=~(1<<4);
  e0:	88 b3       	in	r24, 0x18	; 24
  e2:	8f 7e       	andi	r24, 0xEF	; 239
  e4:	88 bb       	out	0x18, r24	; 24
  e6:	8f e9       	ldi	r24, 0x9F	; 159
  e8:	9f e0       	ldi	r25, 0x0F	; 15
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x68>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x6e>
  f0:	00 00       	nop
  
  _delay_ms(1);
  lsb=SPI_masterReceive();
  f2:	0e 94 9a 00 	call	0x134	; 0x134 <SPI_masterReceive>
  PORTA=lsb;
  f6:	8b bb       	out	0x1b, r24	; 27
  displayTemperature(msb,lsb);
  f8:	68 2f       	mov	r22, r24
  fa:	8c 2f       	mov	r24, r28
  fc:	0e 94 9e 00 	call	0x13c	; 0x13c <displayTemperature>
 100:	d1 cf       	rjmp	.-94     	; 0xa4 <main+0x22>

00000102 <SPI_masterInit>:


void SPI_masterInit(void){
	
	/*  Enable MOSI, SCK and SS output */
	DDRB = (1<<7)|(1<<5)|(1<<4);
 102:	80 eb       	ldi	r24, 0xB0	; 176
 104:	87 bb       	out	0x17, r24	; 23
	
	/* Enable Master Mode */
	SET_BIT(SPCR,MSTR);
 106:	8d b1       	in	r24, 0x0d	; 13
 108:	80 61       	ori	r24, 0x10	; 16
 10a:	8d b9       	out	0x0d, r24	; 13
	/* Set clock to fosc/16*/
	SET_BIT(SPCR,SPR0);
 10c:	8d b1       	in	r24, 0x0d	; 13
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(SPCR,SPR1);
 112:	8d b1       	in	r24, 0x0d	; 13
 114:	82 60       	ori	r24, 0x02	; 2
 116:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(SPCR,CPHA);
 118:	8d b1       	in	r24, 0x0d	; 13
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	8d b9       	out	0x0d, r24	; 13
	/* Enable SPI */
	SET_BIT(SPCR,SPE);
 11e:	8d b1       	in	r24, 0x0d	; 13
 120:	80 64       	ori	r24, 0x40	; 64
 122:	8d b9       	out	0x0d, r24	; 13
	/* Enable interrupt */
	SET_BIT(SPCR,SPIE);
 124:	8d b1       	in	r24, 0x0d	; 13
 126:	80 68       	ori	r24, 0x80	; 128
 128:	8d b9       	out	0x0d, r24	; 13
 12a:	08 95       	ret

0000012c <SPI_masterTransmit>:
}

void SPI_masterTransmit(char data){
	
	/* Start the transmission */
	SPDR = data;
 12c:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for completion */
	while(!(SPSR&(1<<SPIF)));
 12e:	77 9b       	sbis	0x0e, 7	; 14
 130:	fe cf       	rjmp	.-4      	; 0x12e <SPI_masterTransmit+0x2>
	
}
 132:	08 95       	ret

00000134 <SPI_masterReceive>:

char SPI_masterReceive(void){
	
	/* wait for the SPI buffer's full */
	while(!(SPSR&(1<<SPIF)));
 134:	77 9b       	sbis	0x0e, 7	; 14
 136:	fe cf       	rjmp	.-4      	; 0x134 <SPI_masterReceive>
	/* return SPI buffer */
	return SPDR;
 138:	8f b1       	in	r24, 0x0f	; 15
	
	
}
 13a:	08 95       	ret

0000013c <displayTemperature>:

void displayTemperature(char msb,char lsb){
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	60 97       	sbiw	r28, 0x10	; 16
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
 150:	28 2f       	mov	r18, r24
	char ssd[16]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,
 152:	80 e1       	ldi	r24, 0x10	; 16
 154:	e0 e6       	ldi	r30, 0x60	; 96
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	de 01       	movw	r26, r28
 15a:	11 96       	adiw	r26, 0x01	; 1
 15c:	01 90       	ld	r0, Z+
 15e:	0d 92       	st	X+, r0
 160:	8a 95       	dec	r24
 162:	e1 f7       	brne	.-8      	; 0x15c <displayTemperature+0x20>
	0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71};
	char sign;
	lsb>>=6;
 164:	62 95       	swap	r22
 166:	66 95       	lsr	r22
 168:	66 95       	lsr	r22
 16a:	63 70       	andi	r22, 0x03	; 3

	if(msb&0x80) {
 16c:	22 23       	and	r18, r18
 16e:	54 f4       	brge	.+20     	; 0x184 <displayTemperature+0x48>
		msb=(~msb)+1;
 170:	21 95       	neg	r18
		sign=1;
		if(lsb!=0) lsb=75/lsb;
 172:	66 23       	and	r22, r22
 174:	69 f0       	breq	.+26     	; 0x190 <displayTemperature+0x54>
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	8b e4       	ldi	r24, 0x4B	; 75
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 8f 01 	call	0x31e	; 0x31e <__divmodhi4>
	char sign;
	lsb>>=6;

	if(msb&0x80) {
		msb=(~msb)+1;
		sign=1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	07 c0       	rjmp	.+14     	; 0x192 <displayTemperature+0x56>
		if(lsb!=0) lsb=75/lsb;
	}
	else {
		sign=0;
		lsb*=25;
 184:	89 e1       	ldi	r24, 0x19	; 25
 186:	68 9f       	mul	r22, r24
 188:	60 2d       	mov	r22, r0
 18a:	11 24       	eor	r1, r1
		msb=(~msb)+1;
		sign=1;
		if(lsb!=0) lsb=75/lsb;
	}
	else {
		sign=0;
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	01 c0       	rjmp	.+2      	; 0x192 <displayTemperature+0x56>
	char sign;
	lsb>>=6;

	if(msb&0x80) {
		msb=(~msb)+1;
		sign=1;
 190:	81 e0       	ldi	r24, 0x01	; 1
	else {
		sign=0;
		lsb*=25;
	}

	PORTD=0x00;
 192:	12 ba       	out	0x12, r1	; 18
	if(sign==1) PORTC=0x40;
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	19 f4       	brne	.+6      	; 0x19e <displayTemperature+0x62>
 198:	80 e4       	ldi	r24, 0x40	; 64
 19a:	85 bb       	out	0x15, r24	; 21
 19c:	12 c0       	rjmp	.+36     	; 0x1c2 <displayTemperature+0x86>
	else if(msb>=100) PORTC=ssd[msb/100];
 19e:	24 36       	cpi	r18, 0x64	; 100
 1a0:	78 f0       	brcs	.+30     	; 0x1c0 <displayTemperature+0x84>
 1a2:	89 e2       	ldi	r24, 0x29	; 41
 1a4:	28 9f       	mul	r18, r24
 1a6:	81 2d       	mov	r24, r1
 1a8:	11 24       	eor	r1, r1
 1aa:	82 95       	swap	r24
 1ac:	8f 70       	andi	r24, 0x0F	; 15
 1ae:	e1 e0       	ldi	r30, 0x01	; 1
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	ec 0f       	add	r30, r28
 1b4:	fd 1f       	adc	r31, r29
 1b6:	e8 0f       	add	r30, r24
 1b8:	f1 1d       	adc	r31, r1
 1ba:	80 81       	ld	r24, Z
 1bc:	85 bb       	out	0x15, r24	; 21
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <displayTemperature+0x86>
	else PORTC=0x00;
 1c0:	15 ba       	out	0x15, r1	; 21
	PORTD=(1<<0);
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	82 bb       	out	0x12, r24	; 18
 1c6:	81 ee       	ldi	r24, 0xE1	; 225
 1c8:	94 e0       	ldi	r25, 0x04	; 4
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <displayTemperature+0x8e>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <displayTemperature+0x94>
 1d0:	00 00       	nop
	_delay_ms(5);
	
	PORTD=0x00;
 1d2:	12 ba       	out	0x12, r1	; 18
	if(msb>=10)
 1d4:	2a 30       	cpi	r18, 0x0A	; 10
 1d6:	d8 f0       	brcs	.+54     	; 0x20e <displayTemperature+0xd2>
	PORTC=ssd[(msb%100)/10];
 1d8:	89 e2       	ldi	r24, 0x29	; 41
 1da:	28 9f       	mul	r18, r24
 1dc:	81 2d       	mov	r24, r1
 1de:	11 24       	eor	r1, r1
 1e0:	82 95       	swap	r24
 1e2:	8f 70       	andi	r24, 0x0F	; 15
 1e4:	e2 2f       	mov	r30, r18
 1e6:	94 e6       	ldi	r25, 0x64	; 100
 1e8:	89 9f       	mul	r24, r25
 1ea:	e0 19       	sub	r30, r0
 1ec:	11 24       	eor	r1, r1
 1ee:	9d ec       	ldi	r25, 0xCD	; 205
 1f0:	e9 9f       	mul	r30, r25
 1f2:	81 2d       	mov	r24, r1
 1f4:	11 24       	eor	r1, r1
 1f6:	86 95       	lsr	r24
 1f8:	86 95       	lsr	r24
 1fa:	86 95       	lsr	r24
 1fc:	e1 e0       	ldi	r30, 0x01	; 1
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	ec 0f       	add	r30, r28
 202:	fd 1f       	adc	r31, r29
 204:	e8 0f       	add	r30, r24
 206:	f1 1d       	adc	r31, r1
 208:	80 81       	ld	r24, Z
 20a:	85 bb       	out	0x15, r24	; 21
 20c:	01 c0       	rjmp	.+2      	; 0x210 <displayTemperature+0xd4>
	else PORTC=0;
 20e:	15 ba       	out	0x15, r1	; 21
	PORTD=(1<<1);
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	82 bb       	out	0x12, r24	; 18
 214:	81 ee       	ldi	r24, 0xE1	; 225
 216:	94 e0       	ldi	r25, 0x04	; 4
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <displayTemperature+0xdc>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <displayTemperature+0xe2>
 21e:	00 00       	nop
	_delay_ms(5);

	PORTD=0x00;
 220:	12 ba       	out	0x12, r1	; 18
	PORTC=ssd[msb%10]|0x80;
 222:	8d ec       	ldi	r24, 0xCD	; 205
 224:	28 9f       	mul	r18, r24
 226:	91 2d       	mov	r25, r1
 228:	11 24       	eor	r1, r1
 22a:	96 95       	lsr	r25
 22c:	96 95       	lsr	r25
 22e:	96 95       	lsr	r25
 230:	99 0f       	add	r25, r25
 232:	39 2f       	mov	r19, r25
 234:	33 0f       	add	r19, r19
 236:	33 0f       	add	r19, r19
 238:	93 0f       	add	r25, r19
 23a:	29 1b       	sub	r18, r25
 23c:	e1 e0       	ldi	r30, 0x01	; 1
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	ec 0f       	add	r30, r28
 242:	fd 1f       	adc	r31, r29
 244:	e2 0f       	add	r30, r18
 246:	f1 1d       	adc	r31, r1
 248:	90 81       	ld	r25, Z
 24a:	90 68       	ori	r25, 0x80	; 128
 24c:	95 bb       	out	0x15, r25	; 21
	PORTD=(1<<2);
 24e:	94 e0       	ldi	r25, 0x04	; 4
 250:	92 bb       	out	0x12, r25	; 18
 252:	e1 ee       	ldi	r30, 0xE1	; 225
 254:	f4 e0       	ldi	r31, 0x04	; 4
 256:	31 97       	sbiw	r30, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <displayTemperature+0x11a>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <displayTemperature+0x120>
 25c:	00 00       	nop
	_delay_ms(5);

	PORTD=0x00;
 25e:	12 ba       	out	0x12, r1	; 18
	PORTC=ssd[lsb/10];
 260:	68 9f       	mul	r22, r24
 262:	81 2d       	mov	r24, r1
 264:	11 24       	eor	r1, r1
 266:	86 95       	lsr	r24
 268:	86 95       	lsr	r24
 26a:	86 95       	lsr	r24
 26c:	e1 e0       	ldi	r30, 0x01	; 1
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	ec 0f       	add	r30, r28
 272:	fd 1f       	adc	r31, r29
 274:	e8 0f       	add	r30, r24
 276:	f1 1d       	adc	r31, r1
 278:	90 81       	ld	r25, Z
 27a:	95 bb       	out	0x15, r25	; 21
	PORTD=(1<<3);
 27c:	98 e0       	ldi	r25, 0x08	; 8
 27e:	92 bb       	out	0x12, r25	; 18
 280:	e1 ee       	ldi	r30, 0xE1	; 225
 282:	f4 e0       	ldi	r31, 0x04	; 4
 284:	31 97       	sbiw	r30, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <displayTemperature+0x148>
 288:	00 c0       	rjmp	.+0      	; 0x28a <displayTemperature+0x14e>
 28a:	00 00       	nop
	_delay_ms(5);

	PORTD=0x00;
 28c:	12 ba       	out	0x12, r1	; 18
	PORTC=ssd[lsb%10];
 28e:	88 0f       	add	r24, r24
 290:	98 2f       	mov	r25, r24
 292:	99 0f       	add	r25, r25
 294:	99 0f       	add	r25, r25
 296:	89 0f       	add	r24, r25
 298:	68 1b       	sub	r22, r24
 29a:	e1 e0       	ldi	r30, 0x01	; 1
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	ec 0f       	add	r30, r28
 2a0:	fd 1f       	adc	r31, r29
 2a2:	e6 0f       	add	r30, r22
 2a4:	f1 1d       	adc	r31, r1
 2a6:	80 81       	ld	r24, Z
 2a8:	85 bb       	out	0x15, r24	; 21
	PORTD=(1<<4);
 2aa:	80 e1       	ldi	r24, 0x10	; 16
 2ac:	82 bb       	out	0x12, r24	; 18
 2ae:	81 ee       	ldi	r24, 0xE1	; 225
 2b0:	94 e0       	ldi	r25, 0x04	; 4
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <displayTemperature+0x176>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <displayTemperature+0x17c>
 2b8:	00 00       	nop
	_delay_ms(5);

	PORTD=0x00;
 2ba:	12 ba       	out	0x12, r1	; 18
	PORTC=0x63;
 2bc:	83 e6       	ldi	r24, 0x63	; 99
 2be:	85 bb       	out	0x15, r24	; 21
	PORTD=(1<<5);
 2c0:	80 e2       	ldi	r24, 0x20	; 32
 2c2:	82 bb       	out	0x12, r24	; 18
 2c4:	e1 ee       	ldi	r30, 0xE1	; 225
 2c6:	f4 e0       	ldi	r31, 0x04	; 4
 2c8:	31 97       	sbiw	r30, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <displayTemperature+0x18c>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <displayTemperature+0x192>
 2ce:	00 00       	nop
	_delay_ms(5);

	PORTD=0x00;
 2d0:	12 ba       	out	0x12, r1	; 18
	PORTC=ssd[12];
 2d2:	8d 85       	ldd	r24, Y+13	; 0x0d
 2d4:	85 bb       	out	0x15, r24	; 21
	PORTD=(1<<6);
 2d6:	80 e4       	ldi	r24, 0x40	; 64
 2d8:	82 bb       	out	0x12, r24	; 18
 2da:	81 ee       	ldi	r24, 0xE1	; 225
 2dc:	94 e0       	ldi	r25, 0x04	; 4
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <displayTemperature+0x1a2>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <displayTemperature+0x1a8>
 2e4:	00 00       	nop
	_delay_ms(5);
}
 2e6:	60 96       	adiw	r28, 0x10	; 16
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	f8 94       	cli
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	cd bf       	out	0x3d, r28	; 61
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <TC72_Init>:


void TC72_Init(void){
	
	SET_BIT(PORTB,4);
 2f8:	88 b3       	in	r24, 0x18	; 24
 2fa:	80 61       	ori	r24, 0x10	; 16
 2fc:	88 bb       	out	0x18, r24	; 24
	/* Select control register */
	SPI_masterTransmit(0x80);
 2fe:	80 e8       	ldi	r24, 0x80	; 128
 300:	0e 94 96 00 	call	0x12c	; 0x12c <SPI_masterTransmit>
	
	/* Select Continous temperature conversion */
	SPI_masterTransmit(0x04);
 304:	84 e0       	ldi	r24, 0x04	; 4
 306:	0e 94 96 00 	call	0x12c	; 0x12c <SPI_masterTransmit>
	CLR_BIT(PORTB,4);
 30a:	88 b3       	in	r24, 0x18	; 24
 30c:	8f 7e       	andi	r24, 0xEF	; 239
 30e:	88 bb       	out	0x18, r24	; 24
 310:	8b e7       	ldi	r24, 0x7B	; 123
 312:	92 e9       	ldi	r25, 0x92	; 146
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <TC72_Init+0x1c>
 318:	00 c0       	rjmp	.+0      	; 0x31a <TC72_Init+0x22>
 31a:	00 00       	nop
 31c:	08 95       	ret

0000031e <__divmodhi4>:
 31e:	97 fb       	bst	r25, 7
 320:	07 2e       	mov	r0, r23
 322:	16 f4       	brtc	.+4      	; 0x328 <__divmodhi4+0xa>
 324:	00 94       	com	r0
 326:	07 d0       	rcall	.+14     	; 0x336 <__divmodhi4_neg1>
 328:	77 fd       	sbrc	r23, 7
 32a:	09 d0       	rcall	.+18     	; 0x33e <__divmodhi4_neg2>
 32c:	0e 94 a3 01 	call	0x346	; 0x346 <__udivmodhi4>
 330:	07 fc       	sbrc	r0, 7
 332:	05 d0       	rcall	.+10     	; 0x33e <__divmodhi4_neg2>
 334:	3e f4       	brtc	.+14     	; 0x344 <__divmodhi4_exit>

00000336 <__divmodhi4_neg1>:
 336:	90 95       	com	r25
 338:	81 95       	neg	r24
 33a:	9f 4f       	sbci	r25, 0xFF	; 255
 33c:	08 95       	ret

0000033e <__divmodhi4_neg2>:
 33e:	70 95       	com	r23
 340:	61 95       	neg	r22
 342:	7f 4f       	sbci	r23, 0xFF	; 255

00000344 <__divmodhi4_exit>:
 344:	08 95       	ret

00000346 <__udivmodhi4>:
 346:	aa 1b       	sub	r26, r26
 348:	bb 1b       	sub	r27, r27
 34a:	51 e1       	ldi	r21, 0x11	; 17
 34c:	07 c0       	rjmp	.+14     	; 0x35c <__udivmodhi4_ep>

0000034e <__udivmodhi4_loop>:
 34e:	aa 1f       	adc	r26, r26
 350:	bb 1f       	adc	r27, r27
 352:	a6 17       	cp	r26, r22
 354:	b7 07       	cpc	r27, r23
 356:	10 f0       	brcs	.+4      	; 0x35c <__udivmodhi4_ep>
 358:	a6 1b       	sub	r26, r22
 35a:	b7 0b       	sbc	r27, r23

0000035c <__udivmodhi4_ep>:
 35c:	88 1f       	adc	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	5a 95       	dec	r21
 362:	a9 f7       	brne	.-22     	; 0x34e <__udivmodhi4_loop>
 364:	80 95       	com	r24
 366:	90 95       	com	r25
 368:	bc 01       	movw	r22, r24
 36a:	cd 01       	movw	r24, r26
 36c:	08 95       	ret

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>
