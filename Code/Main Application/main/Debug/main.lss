
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000004a8  0000051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010d8  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000801  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000934  00000000  00000000  00001f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000178  00000000  00000000  00002878  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b6  00000000  00000000  000029f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bd6  00000000  00000000  00002ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003a7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 3c 02 	call	0x478	; 0x478 <main>
  7a:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_vsetPINDir>:
			PORTC &= 0xf0;
			PORTC |= value;
			break;
		case 'D':
			PORTD &= 0xf0;
			PORTD |= value;
  82:	82 34       	cpi	r24, 0x42	; 66
  84:	19 f1       	breq	.+70     	; 0xcc <DIO_vsetPINDir+0x4a>
  86:	18 f4       	brcc	.+6      	; 0x8e <DIO_vsetPINDir+0xc>
  88:	81 34       	cpi	r24, 0x41	; 65
  8a:	39 f0       	breq	.+14     	; 0x9a <DIO_vsetPINDir+0x18>
  8c:	08 95       	ret
  8e:	83 34       	cpi	r24, 0x43	; 67
  90:	b1 f1       	breq	.+108    	; 0xfe <DIO_vsetPINDir+0x7c>
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_vsetPINDir+0x16>
  96:	4c c0       	rjmp	.+152    	; 0x130 <DIO_vsetPINDir+0xae>
  98:	08 95       	ret
  9a:	41 30       	cpi	r20, 0x01	; 1
  9c:	59 f4       	brne	.+22     	; 0xb4 <DIO_vsetPINDir+0x32>
  9e:	2a b3       	in	r18, 0x1a	; 26
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_vsetPINDir+0x28>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_vsetPINDir+0x24>
  ae:	82 2b       	or	r24, r18
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	08 95       	ret
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_vsetPINDir+0x3e>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_vsetPINDir+0x3a>
  c4:	80 95       	com	r24
  c6:	82 23       	and	r24, r18
  c8:	8a bb       	out	0x1a, r24	; 26
  ca:	08 95       	ret
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	59 f4       	brne	.+22     	; 0xe6 <DIO_vsetPINDir+0x64>
  d0:	27 b3       	in	r18, 0x17	; 23
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_vsetPINDir+0x5a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_vsetPINDir+0x56>
  e0:	82 2b       	or	r24, r18
  e2:	87 bb       	out	0x17, r24	; 23
  e4:	08 95       	ret
  e6:	27 b3       	in	r18, 0x17	; 23
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_vsetPINDir+0x70>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_vsetPINDir+0x6c>
  f6:	80 95       	com	r24
  f8:	82 23       	and	r24, r18
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	08 95       	ret
  fe:	41 30       	cpi	r20, 0x01	; 1
 100:	59 f4       	brne	.+22     	; 0x118 <DIO_vsetPINDir+0x96>
 102:	24 b3       	in	r18, 0x14	; 20
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_vsetPINDir+0x8c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_vsetPINDir+0x88>
 112:	82 2b       	or	r24, r18
 114:	84 bb       	out	0x14, r24	; 20
 116:	08 95       	ret
 118:	24 b3       	in	r18, 0x14	; 20
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_vsetPINDir+0xa2>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_vsetPINDir+0x9e>
 128:	80 95       	com	r24
 12a:	82 23       	and	r24, r18
 12c:	84 bb       	out	0x14, r24	; 20
 12e:	08 95       	ret
 130:	41 30       	cpi	r20, 0x01	; 1
 132:	59 f4       	brne	.+22     	; 0x14a <DIO_vsetPINDir+0xc8>
 134:	21 b3       	in	r18, 0x11	; 17
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_vsetPINDir+0xbe>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_vsetPINDir+0xba>
 144:	82 2b       	or	r24, r18
 146:	81 bb       	out	0x11, r24	; 17
 148:	08 95       	ret
 14a:	21 b3       	in	r18, 0x11	; 17
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_vsetPINDir+0xd4>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_vsetPINDir+0xd0>
 15a:	80 95       	com	r24
 15c:	82 23       	and	r24, r18
 15e:	81 bb       	out	0x11, r24	; 17
 160:	08 95       	ret

00000162 <DIO_write>:
 162:	82 34       	cpi	r24, 0x42	; 66
 164:	19 f1       	breq	.+70     	; 0x1ac <DIO_write+0x4a>
 166:	18 f4       	brcc	.+6      	; 0x16e <DIO_write+0xc>
 168:	81 34       	cpi	r24, 0x41	; 65
 16a:	39 f0       	breq	.+14     	; 0x17a <DIO_write+0x18>
 16c:	08 95       	ret
 16e:	83 34       	cpi	r24, 0x43	; 67
 170:	b1 f1       	breq	.+108    	; 0x1de <DIO_write+0x7c>
 172:	84 34       	cpi	r24, 0x44	; 68
 174:	09 f4       	brne	.+2      	; 0x178 <DIO_write+0x16>
 176:	4c c0       	rjmp	.+152    	; 0x210 <DIO_write+0xae>
 178:	08 95       	ret
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	59 f4       	brne	.+22     	; 0x194 <DIO_write+0x32>
 17e:	2b b3       	in	r18, 0x1b	; 27
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_write+0x28>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_write+0x24>
 18e:	82 2b       	or	r24, r18
 190:	8b bb       	out	0x1b, r24	; 27
 192:	08 95       	ret
 194:	2b b3       	in	r18, 0x1b	; 27
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_write+0x3e>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_write+0x3a>
 1a4:	80 95       	com	r24
 1a6:	82 23       	and	r24, r18
 1a8:	8b bb       	out	0x1b, r24	; 27
 1aa:	08 95       	ret
 1ac:	41 30       	cpi	r20, 0x01	; 1
 1ae:	59 f4       	brne	.+22     	; 0x1c6 <DIO_write+0x64>
 1b0:	28 b3       	in	r18, 0x18	; 24
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_write+0x5a>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_write+0x56>
 1c0:	82 2b       	or	r24, r18
 1c2:	88 bb       	out	0x18, r24	; 24
 1c4:	08 95       	ret
 1c6:	28 b3       	in	r18, 0x18	; 24
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_write+0x70>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_write+0x6c>
 1d6:	80 95       	com	r24
 1d8:	82 23       	and	r24, r18
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	08 95       	ret
 1de:	41 30       	cpi	r20, 0x01	; 1
 1e0:	59 f4       	brne	.+22     	; 0x1f8 <DIO_write+0x96>
 1e2:	25 b3       	in	r18, 0x15	; 21
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_write+0x8c>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_write+0x88>
 1f2:	82 2b       	or	r24, r18
 1f4:	85 bb       	out	0x15, r24	; 21
 1f6:	08 95       	ret
 1f8:	25 b3       	in	r18, 0x15	; 21
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_write+0xa2>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_write+0x9e>
 208:	80 95       	com	r24
 20a:	82 23       	and	r24, r18
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	08 95       	ret
 210:	41 30       	cpi	r20, 0x01	; 1
 212:	59 f4       	brne	.+22     	; 0x22a <DIO_write+0xc8>
 214:	22 b3       	in	r18, 0x12	; 18
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_write+0xbe>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_write+0xba>
 224:	82 2b       	or	r24, r18
 226:	82 bb       	out	0x12, r24	; 18
 228:	08 95       	ret
 22a:	22 b3       	in	r18, 0x12	; 18
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_write+0xd4>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_write+0xd0>
 23a:	80 95       	com	r24
 23c:	82 23       	and	r24, r18
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret

00000242 <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname, unsigned char value)
{
	value <<= 4;
 242:	62 95       	swap	r22
 244:	60 7f       	andi	r22, 0xF0	; 240
	
	switch(portname)
 246:	82 34       	cpi	r24, 0x42	; 66
 248:	81 f0       	breq	.+32     	; 0x26a <write_high_nibble+0x28>
 24a:	18 f4       	brcc	.+6      	; 0x252 <write_high_nibble+0x10>
 24c:	81 34       	cpi	r24, 0x41	; 65
 24e:	31 f0       	breq	.+12     	; 0x25c <write_high_nibble+0x1a>
 250:	08 95       	ret
 252:	83 34       	cpi	r24, 0x43	; 67
 254:	89 f0       	breq	.+34     	; 0x278 <write_high_nibble+0x36>
 256:	84 34       	cpi	r24, 0x44	; 68
 258:	b1 f0       	breq	.+44     	; 0x286 <write_high_nibble+0x44>
 25a:	08 95       	ret
	{
		case 'A':
			PORTA &= 0x0f;
 25c:	8b b3       	in	r24, 0x1b	; 27
 25e:	8f 70       	andi	r24, 0x0F	; 15
 260:	8b bb       	out	0x1b, r24	; 27
			PORTA |= value;
 262:	8b b3       	in	r24, 0x1b	; 27
 264:	68 2b       	or	r22, r24
 266:	6b bb       	out	0x1b, r22	; 27
			break;
 268:	08 95       	ret
		case 'B':
			PORTB &= 0x0f;
 26a:	88 b3       	in	r24, 0x18	; 24
 26c:	8f 70       	andi	r24, 0x0F	; 15
 26e:	88 bb       	out	0x18, r24	; 24
			PORTB |= value;
 270:	88 b3       	in	r24, 0x18	; 24
 272:	68 2b       	or	r22, r24
 274:	68 bb       	out	0x18, r22	; 24
			break;
 276:	08 95       	ret
		case 'C':
			PORTC &= 0x0f;
 278:	85 b3       	in	r24, 0x15	; 21
 27a:	8f 70       	andi	r24, 0x0F	; 15
 27c:	85 bb       	out	0x15, r24	; 21
			PORTC |= value;
 27e:	85 b3       	in	r24, 0x15	; 21
 280:	68 2b       	or	r22, r24
 282:	65 bb       	out	0x15, r22	; 21
			break;
 284:	08 95       	ret
		case 'D':
			PORTD &= 0x0f;
 286:	82 b3       	in	r24, 0x12	; 18
 288:	8f 70       	andi	r24, 0x0F	; 15
 28a:	82 bb       	out	0x12, r24	; 18
			PORTD |= value;
 28c:	82 b3       	in	r24, 0x12	; 18
 28e:	68 2b       	or	r22, r24
 290:	62 bb       	out	0x12, r22	; 18
 292:	08 95       	ret

00000294 <send_falling_edge>:
	#endif
}

static void send_falling_edge(void)
{
	DIO_write('B', EN, 1);
 294:	41 e0       	ldi	r20, 0x01	; 1
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	82 e4       	ldi	r24, 0x42	; 66
 29a:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29e:	8f e3       	ldi	r24, 0x3F	; 63
 2a0:	9f e1       	ldi	r25, 0x1F	; 31
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <send_falling_edge+0xe>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <send_falling_edge+0x14>
 2a8:	00 00       	nop
	_delay_ms(2);
	DIO_write('B', EN, 0);
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	82 e4       	ldi	r24, 0x42	; 66
 2b0:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_write>
 2b4:	8f e3       	ldi	r24, 0x3F	; 63
 2b6:	9f e1       	ldi	r25, 0x1F	; 31
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <send_falling_edge+0x24>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <send_falling_edge+0x2a>
 2be:	00 00       	nop
 2c0:	08 95       	ret

000002c2 <LCD_vSend_cmd>:
	_delay_ms(2);
}

void LCD_vSend_cmd(char cmd)
{
 2c2:	cf 93       	push	r28
 2c4:	c8 2f       	mov	r28, r24
		DIO_write('B', RS, 0);
		send_falling_edge();
	
	/* We will work on 4-bis Mode */
	#elif defined four_bits_mode
		write_high_nibble('A', cmd >> 4);
 2c6:	68 2f       	mov	r22, r24
 2c8:	62 95       	swap	r22
 2ca:	6f 70       	andi	r22, 0x0F	; 15
 2cc:	81 e4       	ldi	r24, 0x41	; 65
 2ce:	0e 94 21 01 	call	0x242	; 0x242 <write_high_nibble>
		DIO_write('B', RS, 0);
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	82 e4       	ldi	r24, 0x42	; 66
 2d8:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_write>
		send_falling_edge();
 2dc:	0e 94 4a 01 	call	0x294	; 0x294 <send_falling_edge>
		write_high_nibble('A', cmd);
 2e0:	6c 2f       	mov	r22, r28
 2e2:	81 e4       	ldi	r24, 0x41	; 65
 2e4:	0e 94 21 01 	call	0x242	; 0x242 <write_high_nibble>
		DIO_write('B', RS, 0);
 2e8:	40 e0       	ldi	r20, 0x00	; 0
 2ea:	61 e0       	ldi	r22, 0x01	; 1
 2ec:	82 e4       	ldi	r24, 0x42	; 66
 2ee:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_write>
		send_falling_edge();
 2f2:	0e 94 4a 01 	call	0x294	; 0x294 <send_falling_edge>
 2f6:	8f e9       	ldi	r24, 0x9F	; 159
 2f8:	9f e0       	ldi	r25, 0x0F	; 15
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCD_vSend_cmd+0x38>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCD_vSend_cmd+0x3e>
 300:	00 00       	nop

	#endif
	_delay_ms(1);
}
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <LCD_vInit>:
 306:	2f ef       	ldi	r18, 0xFF	; 255
 308:	83 ec       	ldi	r24, 0xC3	; 195
 30a:	99 e0       	ldi	r25, 0x09	; 9
 30c:	21 50       	subi	r18, 0x01	; 1
 30e:	80 40       	sbci	r24, 0x00	; 0
 310:	90 40       	sbci	r25, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <LCD_vInit+0x6>
 314:	00 c0       	rjmp	.+0      	; 0x316 <LCD_vInit+0x10>
 316:	00 00       	nop
		LCD_vSend_cmd(ENTRY_MODE); /* Entry Mode */
		_delay_ms(1);
	
	/* We will work on 4-bis Mode */
	#elif defined four_bits_mode
		DIO_vsetPINDir('A', 4, 1);
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	64 e0       	ldi	r22, 0x04	; 4
 31c:	81 e4       	ldi	r24, 0x41	; 65
 31e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
		DIO_vsetPINDir('A', 5, 1);
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	65 e0       	ldi	r22, 0x05	; 5
 326:	81 e4       	ldi	r24, 0x41	; 65
 328:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
		DIO_vsetPINDir('A', 6, 1);
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	66 e0       	ldi	r22, 0x06	; 6
 330:	81 e4       	ldi	r24, 0x41	; 65
 332:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
		DIO_vsetPINDir('A', 7, 1);
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	67 e0       	ldi	r22, 0x07	; 7
 33a:	81 e4       	ldi	r24, 0x41	; 65
 33c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
		DIO_vsetPINDir('B', EN, 1);
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	82 e4       	ldi	r24, 0x42	; 66
 346:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
		DIO_vsetPINDir('B', RW, 1);
 34a:	41 e0       	ldi	r20, 0x01	; 1
 34c:	62 e0       	ldi	r22, 0x02	; 2
 34e:	82 e4       	ldi	r24, 0x42	; 66
 350:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
		DIO_vsetPINDir('B', RS, 1);
 354:	41 e0       	ldi	r20, 0x01	; 1
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	82 e4       	ldi	r24, 0x42	; 66
 35a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
   		DIO_write('B', RW, 0);
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	62 e0       	ldi	r22, 0x02	; 2
 362:	82 e4       	ldi	r24, 0x42	; 66
 364:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_write>
		LCD_vSend_cmd(RETURN_HOME); /* Return Home (row: 0, col: 0) */
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_vSend_cmd>
 36e:	8f e3       	ldi	r24, 0x3F	; 63
 370:	9c e9       	ldi	r25, 0x9C	; 156
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <LCD_vInit+0x6c>
 376:	00 c0       	rjmp	.+0      	; 0x378 <LCD_vInit+0x72>
 378:	00 00       	nop
		_delay_ms(10);
		LCD_vSend_cmd(FOUR_BITS); /* 4-bits Mode */
 37a:	88 e2       	ldi	r24, 0x28	; 40
 37c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_vSend_cmd>
 380:	8f e9       	ldi	r24, 0x9F	; 159
 382:	9f e0       	ldi	r25, 0x0F	; 15
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <LCD_vInit+0x7e>
 388:	00 c0       	rjmp	.+0      	; 0x38a <LCD_vInit+0x84>
 38a:	00 00       	nop
		_delay_ms(1);
		LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON); /* Display ON Cursor ON */
 38c:	8e e0       	ldi	r24, 0x0E	; 14
 38e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_vSend_cmd>
 392:	8f e9       	ldi	r24, 0x9F	; 159
 394:	9f e0       	ldi	r25, 0x0F	; 15
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <LCD_vInit+0x90>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <LCD_vInit+0x96>
 39c:	00 00       	nop
		_delay_ms(1);
		LCD_vSend_cmd(CLR_SCREEN); /* Clear Screen */
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_vSend_cmd>
 3a4:	8f e3       	ldi	r24, 0x3F	; 63
 3a6:	9c e9       	ldi	r25, 0x9C	; 156
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <LCD_vInit+0xa2>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <LCD_vInit+0xa8>
 3ae:	00 00       	nop
		_delay_ms(10);
		LCD_vSend_cmd(ENTRY_MODE); /* Entry Mode */
 3b0:	86 e0       	ldi	r24, 0x06	; 6
 3b2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_vSend_cmd>
 3b6:	8f e9       	ldi	r24, 0x9F	; 159
 3b8:	9f e0       	ldi	r25, 0x0F	; 15
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <LCD_vInit+0xb4>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <LCD_vInit+0xba>
 3c0:	00 00       	nop
 3c2:	08 95       	ret

000003c4 <LCD_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD_vSend_char(char data)
{
 3c4:	cf 93       	push	r28
 3c6:	c8 2f       	mov	r28, r24
		DIO_write('B', RS, 1);
		send_falling_edge();
	
	/* We will work on 4-bis Mode */
	#elif defined four_bits_mode
		write_high_nibble('A', (data >> 4));
 3c8:	68 2f       	mov	r22, r24
 3ca:	62 95       	swap	r22
 3cc:	6f 70       	andi	r22, 0x0F	; 15
 3ce:	81 e4       	ldi	r24, 0x41	; 65
 3d0:	0e 94 21 01 	call	0x242	; 0x242 <write_high_nibble>
		DIO_write('B', RS, 1);
 3d4:	41 e0       	ldi	r20, 0x01	; 1
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	82 e4       	ldi	r24, 0x42	; 66
 3da:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_write>
		send_falling_edge();
 3de:	0e 94 4a 01 	call	0x294	; 0x294 <send_falling_edge>
		write_high_nibble('A', data);
 3e2:	6c 2f       	mov	r22, r28
 3e4:	81 e4       	ldi	r24, 0x41	; 65
 3e6:	0e 94 21 01 	call	0x242	; 0x242 <write_high_nibble>
		DIO_write('B', RS, 1);
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	82 e4       	ldi	r24, 0x42	; 66
 3f0:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_write>
		send_falling_edge();
 3f4:	0e 94 4a 01 	call	0x294	; 0x294 <send_falling_edge>
 3f8:	8f e9       	ldi	r24, 0x9F	; 159
 3fa:	9f e0       	ldi	r25, 0x0F	; 15
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <LCD_vSend_char+0x38>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 402:	00 00       	nop

	#endif
	_delay_ms(1);
}
 404:	cf 91       	pop	r28
 406:	08 95       	ret

00000408 <LCD_vSend_string>:

void LCD_vSend_string(char *data)
{
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	ec 01       	movw	r28, r24
	/* (*data): Pointer to first char of string */
	while((*data) != '\0')
 40e:	03 c0       	rjmp	.+6      	; 0x416 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
 410:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_vSend_char>
		data = data + 1; /* To next char */
 414:	21 96       	adiw	r28, 0x01	; 1
}

void LCD_vSend_string(char *data)
{
	/* (*data): Pointer to first char of string */
	while((*data) != '\0')
 416:	88 81       	ld	r24, Y
 418:	81 11       	cpse	r24, r1
 41a:	fa cf       	rjmp	.-12     	; 0x410 <LCD_vSend_string+0x8>
	{
		LCD_vSend_char(*data);
		data = data + 1; /* To next char */
	}
}
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <LCD_clearscreen>:

void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_vSend_cmd>
 428:	8f e3       	ldi	r24, 0x3F	; 63
 42a:	9c e9       	ldi	r25, 0x9C	; 156
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <LCD_clearscreen+0xa>
 430:	00 c0       	rjmp	.+0      	; 0x432 <LCD_clearscreen+0x10>
 432:	00 00       	nop
 434:	08 95       	ret

00000436 <LCD_movecursor>:

void LCD_movecursor(char row, char coloumn)
{
	char data;
	
	if (row > 2 || row < 1 || coloumn > 16 || coloumn < 1)
 436:	9f ef       	ldi	r25, 0xFF	; 255
 438:	98 0f       	add	r25, r24
 43a:	92 30       	cpi	r25, 0x02	; 2
 43c:	70 f4       	brcc	.+28     	; 0x45a <LCD_movecursor+0x24>
 43e:	61 31       	cpi	r22, 0x11	; 17
 440:	70 f4       	brcc	.+28     	; 0x45e <LCD_movecursor+0x28>
 442:	66 23       	and	r22, r22
 444:	71 f0       	breq	.+28     	; 0x462 <LCD_movecursor+0x2c>
	{
		data = 0x80;
	}
	else if (row == 1)
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	19 f4       	brne	.+6      	; 0x450 <LCD_movecursor+0x1a>
	{
		data = 0x80 + coloumn - 1;
 44a:	2f e7       	ldi	r18, 0x7F	; 127
 44c:	26 0f       	add	r18, r22
 44e:	0a c0       	rjmp	.+20     	; 0x464 <LCD_movecursor+0x2e>
	}
	else if (row == 2)
 450:	82 30       	cpi	r24, 0x02	; 2
 452:	41 f4       	brne	.+16     	; 0x464 <LCD_movecursor+0x2e>
	{
		data = 0xc0 + coloumn - 1;
 454:	2f eb       	ldi	r18, 0xBF	; 191
 456:	26 0f       	add	r18, r22
 458:	05 c0       	rjmp	.+10     	; 0x464 <LCD_movecursor+0x2e>
{
	char data;
	
	if (row > 2 || row < 1 || coloumn > 16 || coloumn < 1)
	{
		data = 0x80;
 45a:	20 e8       	ldi	r18, 0x80	; 128
 45c:	03 c0       	rjmp	.+6      	; 0x464 <LCD_movecursor+0x2e>
 45e:	20 e8       	ldi	r18, 0x80	; 128
 460:	01 c0       	rjmp	.+2      	; 0x464 <LCD_movecursor+0x2e>
 462:	20 e8       	ldi	r18, 0x80	; 128
	else if (row == 2)
	{
		data = 0xc0 + coloumn - 1;
	}
	
	LCD_vSend_cmd(data);
 464:	82 2f       	mov	r24, r18
 466:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_vSend_cmd>
 46a:	8f e9       	ldi	r24, 0x9F	; 159
 46c:	9f e0       	ldi	r25, 0x0F	; 15
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <LCD_movecursor+0x38>
 472:	00 c0       	rjmp	.+0      	; 0x474 <LCD_movecursor+0x3e>
 474:	00 00       	nop
 476:	08 95       	ret

00000478 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	LCD_vInit();
 478:	0e 94 83 01 	call	0x306	; 0x306 <LCD_vInit>
	uchar_t col = 8;
	
    /* Replace with your application code */
    while (1) 
    {
		LCD_vSend_string("WELCOME");
 47c:	80 e6       	ldi	r24, 0x60	; 96
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 04 02 	call	0x408	; 0x408 <LCD_vSend_string>
		LCD_movecursor(row, col);
 484:	68 e0       	ldi	r22, 0x08	; 8
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	0e 94 1b 02 	call	0x436	; 0x436 <LCD_movecursor>
 48c:	2f ef       	ldi	r18, 0xFF	; 255
 48e:	81 ee       	ldi	r24, 0xE1	; 225
 490:	94 e0       	ldi	r25, 0x04	; 4
 492:	21 50       	subi	r18, 0x01	; 1
 494:	80 40       	sbci	r24, 0x00	; 0
 496:	90 40       	sbci	r25, 0x00	; 0
 498:	e1 f7       	brne	.-8      	; 0x492 <main+0x1a>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <main+0x24>
 49c:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();
 49e:	0e 94 11 02 	call	0x422	; 0x422 <LCD_clearscreen>
 4a2:	ec cf       	rjmp	.-40     	; 0x47c <main+0x4>

000004a4 <_exit>:
 4a4:	f8 94       	cli

000004a6 <__stop_program>:
 4a6:	ff cf       	rjmp	.-2      	; 0x4a6 <__stop_program>
