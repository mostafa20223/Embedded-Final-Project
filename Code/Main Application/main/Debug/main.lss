
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000c8c  00000d20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000a0  008000a0  00000d60  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002245  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e3a  00000000  00000000  000032a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000152f  00000000  00000000  000040e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004cc  00000000  00000000  00005614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000853  00000000  00000000  00005ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012c8  00000000  00000000  00006333  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  000075fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3a       	cpi	r26, 0xAD	; 173
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ef 04 	call	0x9de	; 0x9de <main>
  8a:	0c 94 44 06 	jmp	0xc88	; 0xc88 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Init>:
#include "app.h"
static u8 shift = 0;

void Init(void)
{
	LCD_vInit();
  92:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_vInit>
	keypad_vInit();
  96:	0e 94 2f 02 	call	0x45e	; 0x45e <keypad_vInit>
	SPI_masterInit();
  9a:	0e 94 bf 04 	call	0x97e	; 0x97e <SPI_masterInit>
	TC72_Init();
  9e:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <TC72_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	82 e5       	ldi	r24, 0x52	; 82
  a6:	97 e0       	ldi	r25, 0x07	; 7
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <Init+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <Init+0x20>
  b2:	00 00       	nop
	_delay_ms(150);
	initADC0();
  b4:	0e 94 9c 03 	call	0x738	; 0x738 <initADC0>
  b8:	08 95       	ret

000000ba <Welcome_Screen>:
}

void Welcome_Screen(void)
{
	LCD_vSend_cmd(0x0c);
  ba:	8c e0       	ldi	r24, 0x0C	; 12
  bc:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_vSend_cmd>
	LCD_movecursor(1, 1);
  c0:	61 e0       	ldi	r22, 0x01	; 1
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_movecursor>
	
	for (shift = 1; shift < 16; ++shift)
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
  ce:	19 c0       	rjmp	.+50     	; 0x102 <Welcome_Screen+0x48>
	{
		LCD_clearscreen();
  d0:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_clearscreen>
		LCD_SendStringRowCol(1, shift, "WELCOME");
  d4:	41 e6       	ldi	r20, 0x61	; 97
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end>
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 82 03 	call	0x704	; 0x704 <LCD_SendStringRowCol>
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	81 ee       	ldi	r24, 0xE1	; 225
  e6:	94 e0       	ldi	r25, 0x04	; 4
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <Welcome_Screen+0x2e>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <Welcome_Screen+0x38>
  f2:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();
  f4:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_clearscreen>
void Welcome_Screen(void)
{
	LCD_vSend_cmd(0x0c);
	LCD_movecursor(1, 1);
	
	for (shift = 1; shift < 16; ++shift)
  f8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
  fc:	8f 5f       	subi	r24, 0xFF	; 255
  fe:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
 102:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 106:	80 31       	cpi	r24, 0x10	; 16
 108:	18 f3       	brcs	.-58     	; 0xd0 <Welcome_Screen+0x16>
		LCD_SendStringRowCol(1, shift, "WELCOME");
		_delay_ms(100);
		LCD_clearscreen();
	}

	for (shift = 16; shift > 0; --shift)
 10a:	80 e1       	ldi	r24, 0x10	; 16
 10c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
 110:	19 c0       	rjmp	.+50     	; 0x144 <Welcome_Screen+0x8a>
	{
		LCD_clearscreen();
 112:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_clearscreen>
		LCD_SendStringRowCol(1, shift, "WELCOME");
 116:	41 e6       	ldi	r20, 0x61	; 97
 118:	50 e0       	ldi	r21, 0x00	; 0
 11a:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end>
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	0e 94 82 03 	call	0x704	; 0x704 <LCD_SendStringRowCol>
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	81 ee       	ldi	r24, 0xE1	; 225
 128:	94 e0       	ldi	r25, 0x04	; 4
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <Welcome_Screen+0x70>
 132:	00 c0       	rjmp	.+0      	; 0x134 <Welcome_Screen+0x7a>
 134:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();
 136:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_clearscreen>
		LCD_SendStringRowCol(1, shift, "WELCOME");
		_delay_ms(100);
		LCD_clearscreen();
	}

	for (shift = 16; shift > 0; --shift)
 13a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 13e:	81 50       	subi	r24, 0x01	; 1
 140:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
 144:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 148:	81 11       	cpse	r24, r1
 14a:	e3 cf       	rjmp	.-58     	; 0x112 <Welcome_Screen+0x58>
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	84 e3       	ldi	r24, 0x34	; 52
 150:	9c e0       	ldi	r25, 0x0C	; 12
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <Welcome_Screen+0x98>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <Welcome_Screen+0xa2>
 15c:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();
	}
	
	_delay_ms(250);
	LCD_clearscreen();
 15e:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_clearscreen>
 162:	08 95       	ret

00000164 <IDLE_Screen>:
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	89 ef       	ldi	r24, 0xF9	; 249
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <IDLE_Screen+0x6>
 172:	00 c0       	rjmp	.+0      	; 0x174 <IDLE_Screen+0x10>
 174:	00 00       	nop
}

void IDLE_Screen(void)
{
	_delay_ms(20);
	LCD_SendStringRowCol(1, 1, "SET:25");
 176:	49 e6       	ldi	r20, 0x69	; 105
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 82 03 	call	0x704	; 0x704 <LCD_SendStringRowCol>
	LCD_SendStringRowCol(1, 11, "CRT:");
 182:	40 e7       	ldi	r20, 0x70	; 112
 184:	50 e0       	ldi	r21, 0x00	; 0
 186:	6b e0       	ldi	r22, 0x0B	; 11
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 82 03 	call	0x704	; 0x704 <LCD_SendStringRowCol>
	LCD_SendStringRowCol(2, 1, "STATE:STANDBY");
 18e:	45 e7       	ldi	r20, 0x75	; 117
 190:	50 e0       	ldi	r21, 0x00	; 0
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	0e 94 82 03 	call	0x704	; 0x704 <LCD_SendStringRowCol>
 19a:	08 95       	ret

0000019c <tc72_read>:
    c8 MSB = 0;
	
	while(1)
	{
		/* MSB */
		PORTB |= (1 << SS);
 19c:	88 b3       	in	r24, 0x18	; 24
 19e:	80 61       	ori	r24, 0x10	; 16
 1a0:	88 bb       	out	0x18, r24	; 24
		SPI_masterTransmit(0x02);            /* Read will be from MSB temperature register */
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <SPI_masterTransmit>
		SPI_masterTransmit(0x00);
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <SPI_masterTransmit>
		PORTB &= ~(1 << SS);
 1ae:	88 b3       	in	r24, 0x18	; 24
 1b0:	8f 7e       	andi	r24, 0xEF	; 239
 1b2:	88 bb       	out	0x18, r24	; 24
 1b4:	8f e9       	ldi	r24, 0x9F	; 159
 1b6:	9f e0       	ldi	r25, 0x0F	; 15
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <tc72_read+0x1c>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <tc72_read+0x22>
 1be:	00 00       	nop

		_delay_ms(1);
		MSB = SPI_masterReceive();
 1c0:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <SPI_masterReceive>
		
		return MSB;
	}
}
 1c4:	08 95       	ret

000001c6 <CRT_Temp>:
	//LCD_movecursor(1, 5);
	//LCD_vSend_string(val);
//}

void CRT_Temp(void)
{
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <CRT_Temp+0x6>
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		c8 CurrentTempString[2];
		c8 MSB = tc72_read();
 1d0:	0e 94 ce 00 	call	0x19c	; 0x19c <tc72_read>
		itoa(MSB, CurrentTempString, 10);
 1d4:	4a e0       	ldi	r20, 0x0A	; 10
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	be 01       	movw	r22, r28
 1da:	6f 5f       	subi	r22, 0xFF	; 255
 1dc:	7f 4f       	sbci	r23, 0xFF	; 255
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 04 06 	call	0xc08	; 0xc08 <itoa>
	
		LCD_movecursor(1, 15);
 1e4:	6f e0       	ldi	r22, 0x0F	; 15
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_movecursor>
		LCD_vSend_string(CurrentTempString);
 1ec:	ce 01       	movw	r24, r28
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_vSend_string>
 1f4:	ed cf       	rjmp	.-38     	; 0x1d0 <CRT_Temp+0xa>

000001f6 <StartApp>:
	LCD_SendStringRowCol(2, 1, "STATE:STANDBY");
}

void StartApp(void)
{
	LCD_SendStringRowCol(2, 1, "STATE:OPERATION");
 1f6:	43 e8       	ldi	r20, 0x83	; 131
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	0e 94 82 03 	call	0x704	; 0x704 <LCD_SendStringRowCol>
	CRT_Temp();
 202:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <CRT_Temp>

00000206 <UsrGetVal>:

void UsrGetVal(void)
{
	u8 val = 0;
	static u8 col = 5;
	LCD_movecursor(1, col);
 206:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_movecursor>
	val = getKey();
 210:	0e 94 77 02 	call	0x4ee	; 0x4ee <getKey>
	if (val != '*' && val != '#')
 214:	8a 32       	cpi	r24, 0x2A	; 42
 216:	a9 f0       	breq	.+42     	; 0x242 <UsrGetVal+0x3c>
 218:	83 32       	cpi	r24, 0x23	; 35
 21a:	99 f0       	breq	.+38     	; 0x242 <UsrGetVal+0x3c>
	{
		LCD_vSend_char(val);
 21c:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_vSend_char>
 220:	2f ef       	ldi	r18, 0xFF	; 255
 222:	81 ee       	ldi	r24, 0xE1	; 225
 224:	94 e0       	ldi	r25, 0x04	; 4
 226:	21 50       	subi	r18, 0x01	; 1
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <UsrGetVal+0x20>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <UsrGetVal+0x2a>
 230:	00 00       	nop
		_delay_ms(100);
		col = col + 1;
 232:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 236:	8f 5f       	subi	r24, 0xFF	; 255
 238:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		UsrGetVal();
 23c:	0e 94 03 01 	call	0x206	; 0x206 <UsrGetVal>
	else
	{
		/* Do nothing */
		StartApp();
	}
}
 240:	08 95       	ret
		UsrGetVal();
	}
	else
	{
		/* Do nothing */
		StartApp();
 242:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <StartApp>

00000246 <getADCVal>:
	}
}

float64_t getADCVal(void)
{
	u32 result = adc_read();
 246:	0e 94 a3 03 	call	0x746	; 0x746 <adc_read>
	float64_t Vr = sampleToVolts(result);
 24a:	0e 94 ad 03 	call	0x75a	; 0x75a <sampleToVolts>
	
	return Vr;
 24e:	08 95       	ret

00000250 <setCountMinutes>:
	;
}

// TODO implement this
void drivePWM(void)
{
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <countMinutes>
 256:	08 95       	ret

00000258 <setCheckTemp>:
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <checkTemp>
 25e:	08 95       	ret

00000260 <setVoltModule>:
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <voltModule>
 266:	08 95       	ret

00000268 <setOverHeating>:
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <overHeating>
 26e:	08 95       	ret

00000270 <clearCountMinutes>:
 270:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <countMinutes>
 274:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <minute_counter+0x1>
 278:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <minute_counter>
 27c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <minutes_elapsed>
 280:	08 95       	ret

00000282 <clearCheckTemp>:
 282:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <checkTemp>
 286:	08 95       	ret

00000288 <clearVoltModule>:
 288:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <voltModule>
 28c:	08 95       	ret

0000028e <clearOverHeating>:
 28e:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <overHeating>
 292:	08 95       	ret

00000294 <schedule>:

static int index = 0;

void schedule(void)
{
	ms_elapsed += 1;
 294:	40 91 a8 00 	lds	r20, 0x00A8	; 0x8000a8 <ms_elapsed>
 298:	50 91 a9 00 	lds	r21, 0x00A9	; 0x8000a9 <ms_elapsed+0x1>
 29c:	4f 5f       	subi	r20, 0xFF	; 255
 29e:	5f 4f       	sbci	r21, 0xFF	; 255
 2a0:	50 93 a9 00 	sts	0x00A9, r21	; 0x8000a9 <ms_elapsed+0x1>
 2a4:	40 93 a8 00 	sts	0x00A8, r20	; 0x8000a8 <ms_elapsed>

	if (ms_elapsed % 50)
 2a8:	9a 01       	movw	r18, r20
 2aa:	36 95       	lsr	r19
 2ac:	27 95       	ror	r18
 2ae:	ab e7       	ldi	r26, 0x7B	; 123
 2b0:	b4 e1       	ldi	r27, 0x14	; 20
 2b2:	0e 94 f5 05 	call	0xbea	; 0xbea <__umulhisi3>
 2b6:	96 95       	lsr	r25
 2b8:	87 95       	ror	r24
 2ba:	62 e3       	ldi	r22, 0x32	; 50
 2bc:	68 9f       	mul	r22, r24
 2be:	90 01       	movw	r18, r0
 2c0:	69 9f       	mul	r22, r25
 2c2:	30 0d       	add	r19, r0
 2c4:	11 24       	eor	r1, r1
 2c6:	42 17       	cp	r20, r18
 2c8:	53 07       	cpc	r21, r19
 2ca:	11 f0       	breq	.+4      	; 0x2d0 <schedule+0x3c>
	{
		setState();
 2cc:	0e 94 c1 01 	call	0x382	; 0x382 <setState>
			drivePWM();
		}

	}

	if (minutes_elapsed % 3)
 2d0:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <minutes_elapsed>
 2d4:	8b ea       	ldi	r24, 0xAB	; 171
 2d6:	98 9f       	mul	r25, r24
 2d8:	81 2d       	mov	r24, r1
 2da:	11 24       	eor	r1, r1
 2dc:	86 95       	lsr	r24
 2de:	28 2f       	mov	r18, r24
 2e0:	22 0f       	add	r18, r18
 2e2:	82 0f       	add	r24, r18
 2e4:	98 17       	cp	r25, r24
 2e6:	29 f0       	breq	.+10     	; 0x2f2 <schedule+0x5e>
	{
		if (overHeating)
 2e8:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <overHeating>
 2ec:	81 11       	cpse	r24, r1
		{
			setErrorFlag();
 2ee:	0e 94 bb 01 	call	0x376	; 0x376 <setErrorFlag>
		}
	}

	// ______________________

	if (countMinutes)
 2f2:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <countMinutes>
 2f6:	88 23       	and	r24, r24
 2f8:	49 f0       	breq	.+18     	; 0x30c <schedule+0x78>
	{
		minute_counter += 1;
 2fa:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <minute_counter>
 2fe:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <minute_counter+0x1>
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <minute_counter+0x1>
 308:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <minute_counter>
	}
	if (minute_counter >= 60000)
 30c:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <minute_counter>
 310:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <minute_counter+0x1>
 314:	80 36       	cpi	r24, 0x60	; 96
 316:	9a 4e       	sbci	r25, 0xEA	; 234
 318:	48 f0       	brcs	.+18     	; 0x32c <schedule+0x98>
	{
		minute_counter = 0;
 31a:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <minute_counter+0x1>
 31e:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <minute_counter>
		minutes_elapsed += 1;
 322:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <minutes_elapsed>
 326:	8f 5f       	subi	r24, 0xFF	; 255
 328:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <minutes_elapsed>
 32c:	08 95       	ret

0000032e <__vector_4>:

// ______________________


ISR(TIMER2_COMP_vect)
{
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	2f 93       	push	r18
 33a:	3f 93       	push	r19
 33c:	4f 93       	push	r20
 33e:	5f 93       	push	r21
 340:	6f 93       	push	r22
 342:	7f 93       	push	r23
 344:	8f 93       	push	r24
 346:	9f 93       	push	r25
 348:	af 93       	push	r26
 34a:	bf 93       	push	r27
 34c:	ef 93       	push	r30
 34e:	ff 93       	push	r31
	schedule();
 350:	0e 94 4a 01 	call	0x294	; 0x294 <schedule>
}
 354:	ff 91       	pop	r31
 356:	ef 91       	pop	r30
 358:	bf 91       	pop	r27
 35a:	af 91       	pop	r26
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	7f 91       	pop	r23
 362:	6f 91       	pop	r22
 364:	5f 91       	pop	r21
 366:	4f 91       	pop	r20
 368:	3f 91       	pop	r19
 36a:	2f 91       	pop	r18
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <setErrorFlag>:
static char hash_pressed = 0;
static char errorFlag = 0;

void setErrorFlag(void)
{
	errorFlag = 1;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <errorFlag>
 37c:	08 95       	ret

0000037e <getCurrentTemp>:

// TODO
int getCurrentTemp(void)
{
	;
}
 37e:	08 95       	ret

00000380 <getSetTemp>:
int getSetTemp(void)
{
	;
}
 380:	08 95       	ret

00000382 <setState>:

void setState(void)
{
 382:	0f 93       	push	r16
 384:	1f 93       	push	r17
 386:	cf 93       	push	r28
	switch (curState)
 388:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <curState>
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	69 f0       	breq	.+26     	; 0x3aa <setState+0x28>
 390:	38 f0       	brcs	.+14     	; 0x3a0 <setState+0x1e>
 392:	82 30       	cpi	r24, 0x02	; 2
 394:	09 f4       	brne	.+2      	; 0x398 <setState+0x16>
 396:	56 c0       	rjmp	.+172    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 398:	83 30       	cpi	r24, 0x03	; 3
 39a:	09 f4       	brne	.+2      	; 0x39e <setState+0x1c>
 39c:	58 c0       	rjmp	.+176    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 39e:	5b c0       	rjmp	.+182    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
	{
		case STANDBY:
		{
			clearVoltModule();
 3a0:	0e 94 44 01 	call	0x288	; 0x288 <clearVoltModule>
			clearCheckTemp();
 3a4:	0e 94 41 01 	call	0x282	; 0x282 <clearCheckTemp>
 3a8:	56 c0       	rjmp	.+172    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			break;
		}

		case OPERATION:
		{
			setCheckTemp();
 3aa:	0e 94 2c 01 	call	0x258	; 0x258 <setCheckTemp>
			setVoltModule();
 3ae:	0e 94 30 01 	call	0x260	; 0x260 <setVoltModule>

			u8 currentTemp = getCurrentTemp();
 3b2:	0e 94 bf 01 	call	0x37e	; 0x37e <getCurrentTemp>
 3b6:	8c 01       	movw	r16, r24
 3b8:	c8 2f       	mov	r28, r24
			u8 setTemp = getSetTemp();
 3ba:	0e 94 c0 01 	call	0x380	; 0x380 <getSetTemp>
 3be:	28 2f       	mov	r18, r24
			if ((currentTemp > setTemp) && ((currentTemp - setTemp) <= 5))
 3c0:	80 17       	cp	r24, r16
 3c2:	78 f4       	brcc	.+30     	; 0x3e2 <setState+0x60>
 3c4:	a8 01       	movw	r20, r16
 3c6:	55 27       	eor	r21, r21
 3c8:	48 1b       	sub	r20, r24
 3ca:	51 09       	sbc	r21, r1
 3cc:	46 30       	cpi	r20, 0x06	; 6
 3ce:	51 05       	cpc	r21, r1
 3d0:	44 f4       	brge	.+16     	; 0x3e2 <setState+0x60>
			{
				curState = NORMAL;
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <curState>
				clearCountMinutes();
 3d8:	0e 94 38 01 	call	0x270	; 0x270 <clearCountMinutes>
				clearOverHeating();
 3dc:	0e 94 47 01 	call	0x28e	; 0x28e <clearOverHeating>
 3e0:	29 c0       	rjmp	.+82     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
			}
			else if ((currentTemp < setTemp) && ((setTemp - currentTemp) <= 5))
 3e2:	c2 17       	cp	r28, r18
 3e4:	78 f4       	brcc	.+30     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3e6:	ac 01       	movw	r20, r24
 3e8:	55 27       	eor	r21, r21
 3ea:	40 1b       	sub	r20, r16
 3ec:	51 09       	sbc	r21, r1
 3ee:	46 30       	cpi	r20, 0x06	; 6
 3f0:	51 05       	cpc	r21, r1
 3f2:	44 f4       	brge	.+16     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
			{
				curState = NORMAL;
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <curState>
				clearCountMinutes();
 3fa:	0e 94 38 01 	call	0x270	; 0x270 <clearCountMinutes>
				clearOverHeating();
 3fe:	0e 94 47 01 	call	0x28e	; 0x28e <clearOverHeating>
 402:	18 c0       	rjmp	.+48     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
			}
			else if((currentTemp > setTemp) && ((currentTemp - setTemp) > 10))
 404:	2c 17       	cp	r18, r28
 406:	58 f4       	brcc	.+22     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 408:	a8 01       	movw	r20, r16
 40a:	55 27       	eor	r21, r21
 40c:	48 1b       	sub	r20, r24
 40e:	51 09       	sbc	r21, r1
 410:	4b 30       	cpi	r20, 0x0B	; 11
 412:	51 05       	cpc	r21, r1
 414:	24 f0       	brlt	.+8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
			{
				curState = ERROR;
 416:	83 e0       	ldi	r24, 0x03	; 3
 418:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <curState>
 41c:	0b c0       	rjmp	.+22     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
			}
			else if ((setTemp > currentTemp) && ((setTemp - currentTemp) > 5))
 41e:	c2 17       	cp	r28, r18
 420:	48 f4       	brcc	.+18     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 422:	99 27       	eor	r25, r25
 424:	80 1b       	sub	r24, r16
 426:	91 09       	sbc	r25, r1
 428:	06 97       	sbiw	r24, 0x06	; 6
 42a:	24 f0       	brlt	.+8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
			{
				setCountMinutes();
 42c:	0e 94 28 01 	call	0x250	; 0x250 <setCountMinutes>
				setOverHeating();
 430:	0e 94 34 01 	call	0x268	; 0x268 <setOverHeating>

			if (hash_pressed == 1)
			{
				curState = STANDBY;
			}
			if(errorFlag)
 434:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <errorFlag>
 438:	88 23       	and	r24, r24
 43a:	69 f0       	breq	.+26     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			{
				curState = ERROR;
 43c:	83 e0       	ldi	r24, 0x03	; 3
 43e:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <curState>
 442:	09 c0       	rjmp	.+18     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			break;
		}

		case NORMAL:
		{
			setCheckTemp();
 444:	0e 94 2c 01 	call	0x258	; 0x258 <setCheckTemp>
			clearVoltModule();
 448:	0e 94 44 01 	call	0x288	; 0x288 <clearVoltModule>
			break;
 44c:	04 c0       	rjmp	.+8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
		}

		case ERROR:
		{
			clearCheckTemp();
 44e:	0e 94 41 01 	call	0x282	; 0x282 <clearCheckTemp>
			clearVoltModule();
 452:	0e 94 44 01 	call	0x288	; 0x288 <clearVoltModule>
		}
		
		default:
			break;
	}
 456:	cf 91       	pop	r28
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	08 95       	ret

0000045e <keypad_vInit>:
	{'*', '0', '#'}
};

void keypad_vInit(void)
{
	DDRC = 0x0f;
 45e:	8f e0       	ldi	r24, 0x0F	; 15
 460:	84 bb       	out	0x14, r24	; 20
	CLR_BIT(SFIOR, PUD);
 462:	80 b7       	in	r24, 0x30	; 48
 464:	8b 7f       	andi	r24, 0xFB	; 251
 466:	80 bf       	out	0x30, r24	; 48
	PORTC = 0xff;
 468:	8f ef       	ldi	r24, 0xFF	; 255
 46a:	85 bb       	out	0x15, r24	; 21
 46c:	08 95       	ret

0000046e <Keypad_u8Scan>:
u8 Keypad_u8Scan(void)
{
	u8 row = 0;
	u8 column = 0;
	u8 scan = 0;
	u8 buttonPressed = 0;
 46e:	80 e0       	ldi	r24, 0x00	; 0

	for(row = 0; row < N_Row; ++row)
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	3a c0       	rjmp	.+116    	; 0x4e8 <Keypad_u8Scan+0x7a>
	{
		PORTC |= 0x0f;
 474:	95 b3       	in	r25, 0x15	; 21
 476:	9f 60       	ori	r25, 0x0F	; 15
 478:	95 bb       	out	0x15, r25	; 21
		CLR_BIT(PORTC, row);
 47a:	95 b3       	in	r25, 0x15	; 21
 47c:	a7 2f       	mov	r26, r23
 47e:	b0 e0       	ldi	r27, 0x00	; 0
 480:	21 e0       	ldi	r18, 0x01	; 1
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	07 2e       	mov	r0, r23
 486:	02 c0       	rjmp	.+4      	; 0x48c <Keypad_u8Scan+0x1e>
 488:	22 0f       	add	r18, r18
 48a:	33 1f       	adc	r19, r19
 48c:	0a 94       	dec	r0
 48e:	e2 f7       	brpl	.-8      	; 0x488 <Keypad_u8Scan+0x1a>
 490:	20 95       	com	r18
 492:	29 23       	and	r18, r25
 494:	25 bb       	out	0x15, r18	; 21
		for(column = 4; column < (N_Row + N_Col); ++column)
 496:	94 e0       	ldi	r25, 0x04	; 4
 498:	24 c0       	rjmp	.+72     	; 0x4e2 <Keypad_u8Scan+0x74>
		{
			scan = READ_BIT(PINC, column);
 49a:	63 b3       	in	r22, 0x13	; 19
 49c:	e9 2f       	mov	r30, r25
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	21 e0       	ldi	r18, 0x01	; 1
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	a9 01       	movw	r20, r18
 4a6:	09 2e       	mov	r0, r25
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <Keypad_u8Scan+0x40>
 4aa:	44 0f       	add	r20, r20
 4ac:	55 1f       	adc	r21, r21
 4ae:	0a 94       	dec	r0
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <Keypad_u8Scan+0x3c>
 4b2:	26 2f       	mov	r18, r22
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	24 23       	and	r18, r20
 4b8:	35 23       	and	r19, r21
 4ba:	09 2e       	mov	r0, r25
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <Keypad_u8Scan+0x54>
 4be:	35 95       	asr	r19
 4c0:	27 95       	ror	r18
 4c2:	0a 94       	dec	r0
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <Keypad_u8Scan+0x50>
			if(scan == 0)
 4c6:	21 11       	cpse	r18, r1
 4c8:	0b c0       	rjmp	.+22     	; 0x4e0 <Keypad_u8Scan+0x72>
			{
				buttonPressed = kp[row][column - 4];
 4ca:	34 97       	sbiw	r30, 0x04	; 4
 4cc:	9d 01       	movw	r18, r26
 4ce:	22 0f       	add	r18, r18
 4d0:	33 1f       	adc	r19, r19
 4d2:	2a 0f       	add	r18, r26
 4d4:	3b 1f       	adc	r19, r27
 4d6:	2d 56       	subi	r18, 0x6D	; 109
 4d8:	3f 4f       	sbci	r19, 0xFF	; 255
 4da:	e2 0f       	add	r30, r18
 4dc:	f3 1f       	adc	r31, r19
 4de:	80 81       	ld	r24, Z

	for(row = 0; row < N_Row; ++row)
	{
		PORTC |= 0x0f;
		CLR_BIT(PORTC, row);
		for(column = 4; column < (N_Row + N_Col); ++column)
 4e0:	9f 5f       	subi	r25, 0xFF	; 255
 4e2:	97 30       	cpi	r25, 0x07	; 7
 4e4:	d0 f2       	brcs	.-76     	; 0x49a <Keypad_u8Scan+0x2c>
	u8 row = 0;
	u8 column = 0;
	u8 scan = 0;
	u8 buttonPressed = 0;

	for(row = 0; row < N_Row; ++row)
 4e6:	7f 5f       	subi	r23, 0xFF	; 255
 4e8:	74 30       	cpi	r23, 0x04	; 4
 4ea:	20 f2       	brcs	.-120    	; 0x474 <Keypad_u8Scan+0x6>
			}
		}
	}
	
	return buttonPressed;
}
 4ec:	08 95       	ret

000004ee <getKey>:
u8 getKey(void)
{
	u8 key = 0;

	/* Wait for key release if pressed on entry */
	while(Keypad_u8Scan() != 0)
 4ee:	06 c0       	rjmp	.+12     	; 0x4fc <getKey+0xe>
 4f0:	83 ec       	ldi	r24, 0xC3	; 195
 4f2:	99 e0       	ldi	r25, 0x09	; 9
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <getKey+0x6>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <getKey+0xc>
 4fa:	00 00       	nop
 4fc:	0e 94 37 02 	call	0x46e	; 0x46e <Keypad_u8Scan>
 500:	81 11       	cpse	r24, r1
 502:	f6 cf       	rjmp	.-20     	; 0x4f0 <getKey+0x2>
	}

	/* Wait for new key press */
	do
	{
		key = Keypad_u8Scan();
 504:	0e 94 37 02 	call	0x46e	; 0x46e <Keypad_u8Scan>

	} while(key == 0);
 508:	88 23       	and	r24, r24
 50a:	e1 f3       	breq	.-8      	; 0x504 <getKey+0x16>

	return key;
 50c:	08 95       	ret

0000050e <send_falling_edge>:
	#endif
}

void send_falling_edge(void)
{
	DIO_write(EN_PORT, EN_PIN, 1);
 50e:	41 e0       	ldi	r20, 0x01	; 1
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	81 e4       	ldi	r24, 0x41	; 65
 514:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_write>
 518:	83 ef       	ldi	r24, 0xF3	; 243
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	01 97       	sbiw	r24, 0x01	; 1
 51e:	f1 f7       	brne	.-4      	; 0x51c <send_falling_edge+0xe>
 520:	00 c0       	rjmp	.+0      	; 0x522 <send_falling_edge+0x14>
 522:	00 00       	nop
	_delay_ms(2);
	DIO_write(EN_PORT, EN_PIN, 0);
 524:	40 e0       	ldi	r20, 0x00	; 0
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	81 e4       	ldi	r24, 0x41	; 65
 52a:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_write>
 52e:	83 ef       	ldi	r24, 0xF3	; 243
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <send_falling_edge+0x24>
 536:	00 c0       	rjmp	.+0      	; 0x538 <send_falling_edge+0x2a>
 538:	00 00       	nop
 53a:	08 95       	ret

0000053c <LCD_vSend_cmd>:
	_delay_ms(2);
}

void LCD_vSend_cmd(c8 cmd)
{
 53c:	cf 93       	push	r28
 53e:	c8 2f       	mov	r28, r24
		DIO_write(RS_PORT, RS_PIN, 0);
		send_falling_edge();
	
	/* We will work on 4-bis Mode */
	#elif defined four_bits_mode
		write_high_nibble(LCD_PORT, cmd >> 4);
 540:	68 2f       	mov	r22, r24
 542:	62 95       	swap	r22
 544:	6f 70       	andi	r22, 0x0F	; 15
 546:	84 e4       	ldi	r24, 0x44	; 68
 548:	0e 94 96 04 	call	0x92c	; 0x92c <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 0);
 54c:	40 e0       	ldi	r20, 0x00	; 0
 54e:	61 e0       	ldi	r22, 0x01	; 1
 550:	81 e4       	ldi	r24, 0x41	; 65
 552:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_write>
		send_falling_edge();
 556:	0e 94 87 02 	call	0x50e	; 0x50e <send_falling_edge>
		write_high_nibble(LCD_PORT, cmd);
 55a:	6c 2f       	mov	r22, r28
 55c:	84 e4       	ldi	r24, 0x44	; 68
 55e:	0e 94 96 04 	call	0x92c	; 0x92c <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 0);
 562:	40 e0       	ldi	r20, 0x00	; 0
 564:	61 e0       	ldi	r22, 0x01	; 1
 566:	81 e4       	ldi	r24, 0x41	; 65
 568:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_write>
		send_falling_edge();
 56c:	0e 94 87 02 	call	0x50e	; 0x50e <send_falling_edge>
 570:	89 ef       	ldi	r24, 0xF9	; 249
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	01 97       	sbiw	r24, 0x01	; 1
 576:	f1 f7       	brne	.-4      	; 0x574 <LCD_vSend_cmd+0x38>
 578:	00 c0       	rjmp	.+0      	; 0x57a <LCD_vSend_cmd+0x3e>
 57a:	00 00       	nop

	#endif
	_delay_ms(1);
}
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <LCD_vInit>:
 580:	87 e8       	ldi	r24, 0x87	; 135
 582:	93 e1       	ldi	r25, 0x13	; 19
 584:	01 97       	sbiw	r24, 0x01	; 1
 586:	f1 f7       	brne	.-4      	; 0x584 <LCD_vInit+0x4>
 588:	00 c0       	rjmp	.+0      	; 0x58a <LCD_vInit+0xa>
 58a:	00 00       	nop
	#elif defined four_bits_mode
		//for (counter = 4; counter < LCD_NPINs; ++counter)
		//{
			//DIO_vsetPINDir(LCD_PORT, counter, 1);
		//}
		DIO_vsetPINDir(LCD_PORT, 4, 1);
 58c:	41 e0       	ldi	r20, 0x01	; 1
 58e:	64 e0       	ldi	r22, 0x04	; 4
 590:	84 e4       	ldi	r24, 0x44	; 68
 592:	0e 94 b6 03 	call	0x76c	; 0x76c <DIO_vsetPINDir>
		DIO_vsetPINDir(LCD_PORT, 5, 1);
 596:	41 e0       	ldi	r20, 0x01	; 1
 598:	65 e0       	ldi	r22, 0x05	; 5
 59a:	84 e4       	ldi	r24, 0x44	; 68
 59c:	0e 94 b6 03 	call	0x76c	; 0x76c <DIO_vsetPINDir>
		DIO_vsetPINDir(LCD_PORT, 6, 1);
 5a0:	41 e0       	ldi	r20, 0x01	; 1
 5a2:	66 e0       	ldi	r22, 0x06	; 6
 5a4:	84 e4       	ldi	r24, 0x44	; 68
 5a6:	0e 94 b6 03 	call	0x76c	; 0x76c <DIO_vsetPINDir>
		DIO_vsetPINDir(LCD_PORT, 7, 1);
 5aa:	41 e0       	ldi	r20, 0x01	; 1
 5ac:	67 e0       	ldi	r22, 0x07	; 7
 5ae:	84 e4       	ldi	r24, 0x44	; 68
 5b0:	0e 94 b6 03 	call	0x76c	; 0x76c <DIO_vsetPINDir>
		DIO_vsetPINDir(EN_PORT, EN_PIN, 1);
 5b4:	41 e0       	ldi	r20, 0x01	; 1
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	81 e4       	ldi	r24, 0x41	; 65
 5ba:	0e 94 b6 03 	call	0x76c	; 0x76c <DIO_vsetPINDir>
		DIO_vsetPINDir(RW_PORT, RW_PIN, 1);
 5be:	41 e0       	ldi	r20, 0x01	; 1
 5c0:	62 e0       	ldi	r22, 0x02	; 2
 5c2:	81 e4       	ldi	r24, 0x41	; 65
 5c4:	0e 94 b6 03 	call	0x76c	; 0x76c <DIO_vsetPINDir>
		DIO_vsetPINDir(RS_PORT, RS_PIN, 1);
 5c8:	41 e0       	ldi	r20, 0x01	; 1
 5ca:	61 e0       	ldi	r22, 0x01	; 1
 5cc:	81 e4       	ldi	r24, 0x41	; 65
 5ce:	0e 94 b6 03 	call	0x76c	; 0x76c <DIO_vsetPINDir>
   		DIO_write(RW_PORT, RW_PIN, 0);
 5d2:	40 e0       	ldi	r20, 0x00	; 0
 5d4:	62 e0       	ldi	r22, 0x02	; 2
 5d6:	81 e4       	ldi	r24, 0x41	; 65
 5d8:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_write>
		LCD_vSend_cmd(RETURN_HOME); /* Return Home (row: 0, col: 0) */
 5dc:	82 e0       	ldi	r24, 0x02	; 2
 5de:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_vSend_cmd>
 5e2:	83 ec       	ldi	r24, 0xC3	; 195
 5e4:	99 e0       	ldi	r25, 0x09	; 9
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <LCD_vInit+0x66>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <LCD_vInit+0x6c>
 5ec:	00 00       	nop
		_delay_ms(10);
		LCD_vSend_cmd(FOUR_BITS); /* 4-bits Mode */
 5ee:	88 e2       	ldi	r24, 0x28	; 40
 5f0:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_vSend_cmd>
 5f4:	89 ef       	ldi	r24, 0xF9	; 249
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	01 97       	sbiw	r24, 0x01	; 1
 5fa:	f1 f7       	brne	.-4      	; 0x5f8 <LCD_vInit+0x78>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <LCD_vInit+0x7e>
 5fe:	00 00       	nop
		_delay_ms(1);
		//LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON); /* Display ON Cursor ON */
		LCD_vSend_cmd(CURSOR_OFF_DISPLAN_OFF); /* Display OFF Cursor OFF */
 600:	8c e0       	ldi	r24, 0x0C	; 12
 602:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_vSend_cmd>
 606:	89 ef       	ldi	r24, 0xF9	; 249
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	f1 f7       	brne	.-4      	; 0x60a <LCD_vInit+0x8a>
 60e:	00 c0       	rjmp	.+0      	; 0x610 <LCD_vInit+0x90>
 610:	00 00       	nop
		_delay_ms(1);
		LCD_vSend_cmd(CLR_SCREEN); /* Clear Screen */
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_vSend_cmd>
 618:	83 ec       	ldi	r24, 0xC3	; 195
 61a:	99 e0       	ldi	r25, 0x09	; 9
 61c:	01 97       	sbiw	r24, 0x01	; 1
 61e:	f1 f7       	brne	.-4      	; 0x61c <LCD_vInit+0x9c>
 620:	00 c0       	rjmp	.+0      	; 0x622 <LCD_vInit+0xa2>
 622:	00 00       	nop
		_delay_ms(10);
		LCD_vSend_cmd(ENTRY_MODE); /* Entry Mode */
 624:	86 e0       	ldi	r24, 0x06	; 6
 626:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_vSend_cmd>
 62a:	89 ef       	ldi	r24, 0xF9	; 249
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	01 97       	sbiw	r24, 0x01	; 1
 630:	f1 f7       	brne	.-4      	; 0x62e <LCD_vInit+0xae>
 632:	00 c0       	rjmp	.+0      	; 0x634 <LCD_vInit+0xb4>
 634:	00 00       	nop
 636:	08 95       	ret

00000638 <LCD_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD_vSend_char(c8 data)
{
 638:	cf 93       	push	r28
 63a:	c8 2f       	mov	r28, r24
		DIO_write(RS_PORT, RS_PIN, 1);
		send_falling_edge();
	
	/* We will work on 4-bis Mode */
	#elif defined four_bits_mode
		write_high_nibble(LCD_PORT, (data >> 4));
 63c:	68 2f       	mov	r22, r24
 63e:	62 95       	swap	r22
 640:	6f 70       	andi	r22, 0x0F	; 15
 642:	84 e4       	ldi	r24, 0x44	; 68
 644:	0e 94 96 04 	call	0x92c	; 0x92c <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 1);
 648:	41 e0       	ldi	r20, 0x01	; 1
 64a:	61 e0       	ldi	r22, 0x01	; 1
 64c:	81 e4       	ldi	r24, 0x41	; 65
 64e:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_write>
		send_falling_edge();
 652:	0e 94 87 02 	call	0x50e	; 0x50e <send_falling_edge>
		write_high_nibble(LCD_PORT, data);
 656:	6c 2f       	mov	r22, r28
 658:	84 e4       	ldi	r24, 0x44	; 68
 65a:	0e 94 96 04 	call	0x92c	; 0x92c <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 1);
 65e:	41 e0       	ldi	r20, 0x01	; 1
 660:	61 e0       	ldi	r22, 0x01	; 1
 662:	81 e4       	ldi	r24, 0x41	; 65
 664:	0e 94 26 04 	call	0x84c	; 0x84c <DIO_write>
		send_falling_edge();
 668:	0e 94 87 02 	call	0x50e	; 0x50e <send_falling_edge>
 66c:	89 ef       	ldi	r24, 0xF9	; 249
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	01 97       	sbiw	r24, 0x01	; 1
 672:	f1 f7       	brne	.-4      	; 0x670 <LCD_vSend_char+0x38>
 674:	00 c0       	rjmp	.+0      	; 0x676 <LCD_vSend_char+0x3e>
 676:	00 00       	nop

	#endif
	_delay_ms(1);
}
 678:	cf 91       	pop	r28
 67a:	08 95       	ret

0000067c <LCD_vSend_string>:

void LCD_vSend_string(c8 * data)
{
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	ec 01       	movw	r28, r24
	//{
		//LCD_vSend_char(*data);
		//data = data + 1; /* To next char */
	//}

    for(counter = 0; data[counter] != '\0'; ++counter)
 682:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <counter>
 686:	07 c0       	rjmp	.+14     	; 0x696 <LCD_vSend_string+0x1a>
    {
	    LCD_vSend_char(data[counter]);
 688:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_vSend_char>
	//{
		//LCD_vSend_char(*data);
		//data = data + 1; /* To next char */
	//}

    for(counter = 0; data[counter] != '\0'; ++counter)
 68c:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <counter>
 690:	8f 5f       	subi	r24, 0xFF	; 255
 692:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <counter>
 696:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <counter>
 69a:	fe 01       	movw	r30, r28
 69c:	e8 0f       	add	r30, r24
 69e:	f1 1d       	adc	r31, r1
 6a0:	80 81       	ld	r24, Z
 6a2:	81 11       	cpse	r24, r1
 6a4:	f1 cf       	rjmp	.-30     	; 0x688 <LCD_vSend_string+0xc>
    {
	    LCD_vSend_char(data[counter]);
    }
}
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	08 95       	ret

000006ac <LCD_clearscreen>:

void LCD_clearscreen(void)
{
	LCD_vSend_cmd(CLR_SCREEN);
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_vSend_cmd>
 6b2:	83 ec       	ldi	r24, 0xC3	; 195
 6b4:	99 e0       	ldi	r25, 0x09	; 9
 6b6:	01 97       	sbiw	r24, 0x01	; 1
 6b8:	f1 f7       	brne	.-4      	; 0x6b6 <LCD_clearscreen+0xa>
 6ba:	00 c0       	rjmp	.+0      	; 0x6bc <LCD_clearscreen+0x10>
 6bc:	00 00       	nop
 6be:	08 95       	ret

000006c0 <LCD_movecursor>:

void LCD_movecursor(c8 row, c8 coloumn)
{
	char data = 0;
	
	if (row > 2 || row < 1 || coloumn > 16 || coloumn < 1)
 6c0:	9f ef       	ldi	r25, 0xFF	; 255
 6c2:	98 0f       	add	r25, r24
 6c4:	92 30       	cpi	r25, 0x02	; 2
 6c6:	70 f4       	brcc	.+28     	; 0x6e4 <LCD_movecursor+0x24>
 6c8:	61 31       	cpi	r22, 0x11	; 17
 6ca:	70 f4       	brcc	.+28     	; 0x6e8 <LCD_movecursor+0x28>
 6cc:	66 23       	and	r22, r22
 6ce:	71 f0       	breq	.+28     	; 0x6ec <LCD_movecursor+0x2c>
	{
		data = 0x80;
	}
	else if (row == 1)
 6d0:	81 30       	cpi	r24, 0x01	; 1
 6d2:	19 f4       	brne	.+6      	; 0x6da <LCD_movecursor+0x1a>
	{
		data = 0x80 + coloumn - 1;
 6d4:	8f e7       	ldi	r24, 0x7F	; 127
 6d6:	86 0f       	add	r24, r22
 6d8:	0c c0       	rjmp	.+24     	; 0x6f2 <LCD_movecursor+0x32>
	}
	else if (row == 2)
 6da:	82 30       	cpi	r24, 0x02	; 2
 6dc:	49 f4       	brne	.+18     	; 0x6f0 <LCD_movecursor+0x30>
	{
		data = 0xc0 + coloumn - 1;
 6de:	8f eb       	ldi	r24, 0xBF	; 191
 6e0:	86 0f       	add	r24, r22
 6e2:	07 c0       	rjmp	.+14     	; 0x6f2 <LCD_movecursor+0x32>
{
	char data = 0;
	
	if (row > 2 || row < 1 || coloumn > 16 || coloumn < 1)
	{
		data = 0x80;
 6e4:	80 e8       	ldi	r24, 0x80	; 128
 6e6:	05 c0       	rjmp	.+10     	; 0x6f2 <LCD_movecursor+0x32>
 6e8:	80 e8       	ldi	r24, 0x80	; 128
 6ea:	03 c0       	rjmp	.+6      	; 0x6f2 <LCD_movecursor+0x32>
 6ec:	80 e8       	ldi	r24, 0x80	; 128
 6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <LCD_movecursor+0x32>
	_delay_ms(10);
}

void LCD_movecursor(c8 row, c8 coloumn)
{
	char data = 0;
 6f0:	80 e0       	ldi	r24, 0x00	; 0
	else if (row == 2)
	{
		data = 0xc0 + coloumn - 1;
	}
	
	LCD_vSend_cmd(data);
 6f2:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_vSend_cmd>
 6f6:	89 ef       	ldi	r24, 0xF9	; 249
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	01 97       	sbiw	r24, 0x01	; 1
 6fc:	f1 f7       	brne	.-4      	; 0x6fa <LCD_movecursor+0x3a>
 6fe:	00 c0       	rjmp	.+0      	; 0x700 <LCD_movecursor+0x40>
 700:	00 00       	nop
 702:	08 95       	ret

00000704 <LCD_SendStringRowCol>:
	_delay_ms(1);
}

void LCD_SendStringRowCol(u8 row, u8 col, c8 * data)
{
 704:	cf 93       	push	r28
 706:	df 93       	push	r29
 708:	ea 01       	movw	r28, r20
	LCD_movecursor(row, col);
 70a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_movecursor>
    for(counter = 0; data[counter] != '\0'; ++counter)
 70e:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <counter>
 712:	07 c0       	rjmp	.+14     	; 0x722 <LCD_SendStringRowCol+0x1e>
    {
	    LCD_vSend_char(data[counter]);
 714:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_vSend_char>
}

void LCD_SendStringRowCol(u8 row, u8 col, c8 * data)
{
	LCD_movecursor(row, col);
    for(counter = 0; data[counter] != '\0'; ++counter)
 718:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <counter>
 71c:	8f 5f       	subi	r24, 0xFF	; 255
 71e:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <counter>
 722:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <counter>
 726:	fe 01       	movw	r30, r28
 728:	e8 0f       	add	r30, r24
 72a:	f1 1d       	adc	r31, r1
 72c:	80 81       	ld	r24, Z
 72e:	81 11       	cpse	r24, r1
 730:	f1 cf       	rjmp	.-30     	; 0x714 <LCD_SendStringRowCol+0x10>
    {
	    LCD_vSend_char(data[counter]);
    }
}
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	08 95       	ret

00000738 <initADC0>:
#include "ADC.h"

void initADC0(void)
{
	// Select the required channel
	ADMUX = 0x00;
 738:	17 b8       	out	0x07, r1	; 7
	ADMUX |= (1U << REFS0);
 73a:	87 b1       	in	r24, 0x07	; 7
 73c:	80 64       	ori	r24, 0x40	; 64
 73e:	87 b9       	out	0x07, r24	; 7
	// Enable ADC, with a clock prescale of 1/128
	ADCSRA = (1U << ADEN) | (1U << ADPS2) | (1U << ADPS1) | (1U << ADPS0);
 740:	87 e8       	ldi	r24, 0x87	; 135
 742:	86 b9       	out	0x06, r24	; 6
 744:	08 95       	ret

00000746 <adc_read>:
}

u32 adc_read(void)
{
	// start conversion
	ADCSRA |= (1U << ADSC);
 746:	86 b1       	in	r24, 0x06	; 6
 748:	80 64       	ori	r24, 0x40	; 64
 74a:	86 b9       	out	0x06, r24	; 6
	
	// read from ADC, waiting for conversion to finish
	while(ADCSRA & (1U << ADSC))
 74c:	36 99       	sbic	0x06, 6	; 6
 74e:	fe cf       	rjmp	.-4      	; 0x74c <adc_read+0x6>
	{
		/* Do nothing */
	}
	
	return ADC;
 750:	64 b1       	in	r22, 0x04	; 4
 752:	75 b1       	in	r23, 0x05	; 5
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	90 e0       	ldi	r25, 0x00	; 0
}
 758:	08 95       	ret

0000075a <sampleToVolts>:

float64_t sampleToVolts(u32 sample)
{
	return sample * (5.0 / 1023.0);
 75a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__floatunsisf>
 75e:	2a e0       	ldi	r18, 0x0A	; 10
 760:	38 e2       	ldi	r19, 0x28	; 40
 762:	40 ea       	ldi	r20, 0xA0	; 160
 764:	5b e3       	ldi	r21, 0x3B	; 59
 766:	0e 94 88 05 	call	0xb10	; 0xb10 <__mulsf3>
 76a:	08 95       	ret

0000076c <DIO_vsetPINDir>:
			PORTC &= 0xf0;
			PORTC |= value;
			break;
		case 'D':
			PORTD &= 0xf0;
			PORTD |= value;
 76c:	82 34       	cpi	r24, 0x42	; 66
 76e:	19 f1       	breq	.+70     	; 0x7b6 <DIO_vsetPINDir+0x4a>
 770:	18 f4       	brcc	.+6      	; 0x778 <DIO_vsetPINDir+0xc>
 772:	81 34       	cpi	r24, 0x41	; 65
 774:	39 f0       	breq	.+14     	; 0x784 <DIO_vsetPINDir+0x18>
 776:	08 95       	ret
 778:	83 34       	cpi	r24, 0x43	; 67
 77a:	b1 f1       	breq	.+108    	; 0x7e8 <DIO_vsetPINDir+0x7c>
 77c:	84 34       	cpi	r24, 0x44	; 68
 77e:	09 f4       	brne	.+2      	; 0x782 <DIO_vsetPINDir+0x16>
 780:	4c c0       	rjmp	.+152    	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 782:	08 95       	ret
 784:	41 30       	cpi	r20, 0x01	; 1
 786:	59 f4       	brne	.+22     	; 0x79e <DIO_vsetPINDir+0x32>
 788:	2a b3       	in	r18, 0x1a	; 26
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	02 c0       	rjmp	.+4      	; 0x794 <DIO_vsetPINDir+0x28>
 790:	88 0f       	add	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	6a 95       	dec	r22
 796:	e2 f7       	brpl	.-8      	; 0x790 <DIO_vsetPINDir+0x24>
 798:	82 2b       	or	r24, r18
 79a:	8a bb       	out	0x1a, r24	; 26
 79c:	08 95       	ret
 79e:	2a b3       	in	r18, 0x1a	; 26
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <DIO_vsetPINDir+0x3e>
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	6a 95       	dec	r22
 7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <DIO_vsetPINDir+0x3a>
 7ae:	80 95       	com	r24
 7b0:	82 23       	and	r24, r18
 7b2:	8a bb       	out	0x1a, r24	; 26
 7b4:	08 95       	ret
 7b6:	41 30       	cpi	r20, 0x01	; 1
 7b8:	59 f4       	brne	.+22     	; 0x7d0 <DIO_vsetPINDir+0x64>
 7ba:	27 b3       	in	r18, 0x17	; 23
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <DIO_vsetPINDir+0x5a>
 7c2:	88 0f       	add	r24, r24
 7c4:	99 1f       	adc	r25, r25
 7c6:	6a 95       	dec	r22
 7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <DIO_vsetPINDir+0x56>
 7ca:	82 2b       	or	r24, r18
 7cc:	87 bb       	out	0x17, r24	; 23
 7ce:	08 95       	ret
 7d0:	27 b3       	in	r18, 0x17	; 23
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <DIO_vsetPINDir+0x70>
 7d8:	88 0f       	add	r24, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	6a 95       	dec	r22
 7de:	e2 f7       	brpl	.-8      	; 0x7d8 <DIO_vsetPINDir+0x6c>
 7e0:	80 95       	com	r24
 7e2:	82 23       	and	r24, r18
 7e4:	87 bb       	out	0x17, r24	; 23
 7e6:	08 95       	ret
 7e8:	41 30       	cpi	r20, 0x01	; 1
 7ea:	59 f4       	brne	.+22     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7ec:	24 b3       	in	r18, 0x14	; 20
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <DIO_vsetPINDir+0x8c>
 7f4:	88 0f       	add	r24, r24
 7f6:	99 1f       	adc	r25, r25
 7f8:	6a 95       	dec	r22
 7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <DIO_vsetPINDir+0x88>
 7fc:	82 2b       	or	r24, r18
 7fe:	84 bb       	out	0x14, r24	; 20
 800:	08 95       	ret
 802:	24 b3       	in	r18, 0x14	; 20
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	02 c0       	rjmp	.+4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80a:	88 0f       	add	r24, r24
 80c:	99 1f       	adc	r25, r25
 80e:	6a 95       	dec	r22
 810:	e2 f7       	brpl	.-8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 812:	80 95       	com	r24
 814:	82 23       	and	r24, r18
 816:	84 bb       	out	0x14, r24	; 20
 818:	08 95       	ret
 81a:	41 30       	cpi	r20, 0x01	; 1
 81c:	59 f4       	brne	.+22     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 81e:	21 b3       	in	r18, 0x11	; 17
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 826:	88 0f       	add	r24, r24
 828:	99 1f       	adc	r25, r25
 82a:	6a 95       	dec	r22
 82c:	e2 f7       	brpl	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 82e:	82 2b       	or	r24, r18
 830:	81 bb       	out	0x11, r24	; 17
 832:	08 95       	ret
 834:	21 b3       	in	r18, 0x11	; 17
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	02 c0       	rjmp	.+4      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 83c:	88 0f       	add	r24, r24
 83e:	99 1f       	adc	r25, r25
 840:	6a 95       	dec	r22
 842:	e2 f7       	brpl	.-8      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 844:	80 95       	com	r24
 846:	82 23       	and	r24, r18
 848:	81 bb       	out	0x11, r24	; 17
 84a:	08 95       	ret

0000084c <DIO_write>:
 84c:	82 34       	cpi	r24, 0x42	; 66
 84e:	19 f1       	breq	.+70     	; 0x896 <__stack+0x37>
 850:	18 f4       	brcc	.+6      	; 0x858 <DIO_write+0xc>
 852:	81 34       	cpi	r24, 0x41	; 65
 854:	39 f0       	breq	.+14     	; 0x864 <__stack+0x5>
 856:	08 95       	ret
 858:	83 34       	cpi	r24, 0x43	; 67
 85a:	b1 f1       	breq	.+108    	; 0x8c8 <__stack+0x69>
 85c:	84 34       	cpi	r24, 0x44	; 68
 85e:	09 f4       	brne	.+2      	; 0x862 <__stack+0x3>
 860:	4c c0       	rjmp	.+152    	; 0x8fa <__stack+0x9b>
 862:	08 95       	ret
 864:	41 30       	cpi	r20, 0x01	; 1
 866:	59 f4       	brne	.+22     	; 0x87e <__stack+0x1f>
 868:	2b b3       	in	r18, 0x1b	; 27
 86a:	81 e0       	ldi	r24, 0x01	; 1
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	02 c0       	rjmp	.+4      	; 0x874 <__stack+0x15>
 870:	88 0f       	add	r24, r24
 872:	99 1f       	adc	r25, r25
 874:	6a 95       	dec	r22
 876:	e2 f7       	brpl	.-8      	; 0x870 <__stack+0x11>
 878:	82 2b       	or	r24, r18
 87a:	8b bb       	out	0x1b, r24	; 27
 87c:	08 95       	ret
 87e:	2b b3       	in	r18, 0x1b	; 27
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
 886:	88 0f       	add	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	6a 95       	dec	r22
 88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
 88e:	80 95       	com	r24
 890:	82 23       	and	r24, r18
 892:	8b bb       	out	0x1b, r24	; 27
 894:	08 95       	ret
 896:	41 30       	cpi	r20, 0x01	; 1
 898:	59 f4       	brne	.+22     	; 0x8b0 <__stack+0x51>
 89a:	28 b3       	in	r18, 0x18	; 24
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <__stack+0x47>
 8a2:	88 0f       	add	r24, r24
 8a4:	99 1f       	adc	r25, r25
 8a6:	6a 95       	dec	r22
 8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <__stack+0x43>
 8aa:	82 2b       	or	r24, r18
 8ac:	88 bb       	out	0x18, r24	; 24
 8ae:	08 95       	ret
 8b0:	28 b3       	in	r18, 0x18	; 24
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <__stack+0x5d>
 8b8:	88 0f       	add	r24, r24
 8ba:	99 1f       	adc	r25, r25
 8bc:	6a 95       	dec	r22
 8be:	e2 f7       	brpl	.-8      	; 0x8b8 <__stack+0x59>
 8c0:	80 95       	com	r24
 8c2:	82 23       	and	r24, r18
 8c4:	88 bb       	out	0x18, r24	; 24
 8c6:	08 95       	ret
 8c8:	41 30       	cpi	r20, 0x01	; 1
 8ca:	59 f4       	brne	.+22     	; 0x8e2 <__stack+0x83>
 8cc:	25 b3       	in	r18, 0x15	; 21
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <__stack+0x79>
 8d4:	88 0f       	add	r24, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	6a 95       	dec	r22
 8da:	e2 f7       	brpl	.-8      	; 0x8d4 <__stack+0x75>
 8dc:	82 2b       	or	r24, r18
 8de:	85 bb       	out	0x15, r24	; 21
 8e0:	08 95       	ret
 8e2:	25 b3       	in	r18, 0x15	; 21
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <__stack+0x8f>
 8ea:	88 0f       	add	r24, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	6a 95       	dec	r22
 8f0:	e2 f7       	brpl	.-8      	; 0x8ea <__stack+0x8b>
 8f2:	80 95       	com	r24
 8f4:	82 23       	and	r24, r18
 8f6:	85 bb       	out	0x15, r24	; 21
 8f8:	08 95       	ret
 8fa:	41 30       	cpi	r20, 0x01	; 1
 8fc:	59 f4       	brne	.+22     	; 0x914 <__stack+0xb5>
 8fe:	22 b3       	in	r18, 0x12	; 18
 900:	81 e0       	ldi	r24, 0x01	; 1
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	02 c0       	rjmp	.+4      	; 0x90a <__stack+0xab>
 906:	88 0f       	add	r24, r24
 908:	99 1f       	adc	r25, r25
 90a:	6a 95       	dec	r22
 90c:	e2 f7       	brpl	.-8      	; 0x906 <__stack+0xa7>
 90e:	82 2b       	or	r24, r18
 910:	82 bb       	out	0x12, r24	; 18
 912:	08 95       	ret
 914:	22 b3       	in	r18, 0x12	; 18
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0xc1>
 91c:	88 0f       	add	r24, r24
 91e:	99 1f       	adc	r25, r25
 920:	6a 95       	dec	r22
 922:	e2 f7       	brpl	.-8      	; 0x91c <__stack+0xbd>
 924:	80 95       	com	r24
 926:	82 23       	and	r24, r18
 928:	82 bb       	out	0x12, r24	; 18
 92a:	08 95       	ret

0000092c <write_high_nibble>:
	}
}

void write_high_nibble(u8 portname, u8 value)
{
	value <<= 4;
 92c:	62 95       	swap	r22
 92e:	60 7f       	andi	r22, 0xF0	; 240
	
	switch(portname)
 930:	82 34       	cpi	r24, 0x42	; 66
 932:	81 f0       	breq	.+32     	; 0x954 <write_high_nibble+0x28>
 934:	18 f4       	brcc	.+6      	; 0x93c <write_high_nibble+0x10>
 936:	81 34       	cpi	r24, 0x41	; 65
 938:	31 f0       	breq	.+12     	; 0x946 <write_high_nibble+0x1a>
 93a:	08 95       	ret
 93c:	83 34       	cpi	r24, 0x43	; 67
 93e:	89 f0       	breq	.+34     	; 0x962 <write_high_nibble+0x36>
 940:	84 34       	cpi	r24, 0x44	; 68
 942:	b1 f0       	breq	.+44     	; 0x970 <write_high_nibble+0x44>
 944:	08 95       	ret
	{
		case 'A':
			PORTA &= 0x0f;
 946:	8b b3       	in	r24, 0x1b	; 27
 948:	8f 70       	andi	r24, 0x0F	; 15
 94a:	8b bb       	out	0x1b, r24	; 27
			PORTA |= value;
 94c:	8b b3       	in	r24, 0x1b	; 27
 94e:	68 2b       	or	r22, r24
 950:	6b bb       	out	0x1b, r22	; 27
			break;
 952:	08 95       	ret
		case 'B':
			PORTB &= 0x0f;
 954:	88 b3       	in	r24, 0x18	; 24
 956:	8f 70       	andi	r24, 0x0F	; 15
 958:	88 bb       	out	0x18, r24	; 24
			PORTB |= value;
 95a:	88 b3       	in	r24, 0x18	; 24
 95c:	68 2b       	or	r22, r24
 95e:	68 bb       	out	0x18, r22	; 24
			break;
 960:	08 95       	ret
		case 'C':
			PORTC &= 0x0f;
 962:	85 b3       	in	r24, 0x15	; 21
 964:	8f 70       	andi	r24, 0x0F	; 15
 966:	85 bb       	out	0x15, r24	; 21
			PORTC |= value;
 968:	85 b3       	in	r24, 0x15	; 21
 96a:	68 2b       	or	r22, r24
 96c:	65 bb       	out	0x15, r22	; 21
			break;
 96e:	08 95       	ret
		case 'D':
			PORTD &= 0x0f;
 970:	82 b3       	in	r24, 0x12	; 18
 972:	8f 70       	andi	r24, 0x0F	; 15
 974:	82 bb       	out	0x12, r24	; 18
			PORTD |= value;
 976:	82 b3       	in	r24, 0x12	; 18
 978:	68 2b       	or	r22, r24
 97a:	62 bb       	out	0x12, r22	; 18
 97c:	08 95       	ret

0000097e <SPI_masterInit>:
#include "../HAL/LCD.h"

void SPI_masterInit(void)
{
	/* Enable MOSI, SCK and SS Output */
	DDRB = (1 << MOSI) | (1 << SCK) | (1 << SS);
 97e:	80 eb       	ldi	r24, 0xB0	; 176
 980:	87 bb       	out	0x17, r24	; 23
	
	/* Enable Master Mode */
	SET_BIT(SPCR, MSTR);
 982:	8d b1       	in	r24, 0x0d	; 13
 984:	80 61       	ori	r24, 0x10	; 16
 986:	8d b9       	out	0x0d, r24	; 13
	/* Set clock to fosc/16*/
	SET_BIT(SPCR, SPR0);
 988:	8d b1       	in	r24, 0x0d	; 13
 98a:	81 60       	ori	r24, 0x01	; 1
 98c:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(SPCR, SPR1);
 98e:	8d b1       	in	r24, 0x0d	; 13
 990:	82 60       	ori	r24, 0x02	; 2
 992:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(SPCR, CPHA);
 994:	8d b1       	in	r24, 0x0d	; 13
 996:	84 60       	ori	r24, 0x04	; 4
 998:	8d b9       	out	0x0d, r24	; 13
	/* Enable SPI */
	SET_BIT(SPCR, SPE);
 99a:	8d b1       	in	r24, 0x0d	; 13
 99c:	80 64       	ori	r24, 0x40	; 64
 99e:	8d b9       	out	0x0d, r24	; 13
	/* Enable interrupt */
	SET_BIT(SPCR, SPIE);
 9a0:	8d b1       	in	r24, 0x0d	; 13
 9a2:	80 68       	ori	r24, 0x80	; 128
 9a4:	8d b9       	out	0x0d, r24	; 13
 9a6:	08 95       	ret

000009a8 <SPI_masterTransmit>:
}

void SPI_masterTransmit(char data)
{
	/* Start the Transmission */
	SPDR = data;
 9a8:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for Completion */
	while(!(SPSR & (1 << SPIF)));
 9aa:	77 9b       	sbis	0x0e, 7	; 14
 9ac:	fe cf       	rjmp	.-4      	; 0x9aa <SPI_masterTransmit+0x2>
}
 9ae:	08 95       	ret

000009b0 <SPI_masterReceive>:

char SPI_masterReceive(void)
{
	/* wait for the SPI buffer's full */
	while(!(SPSR & (1 << SPIF)));
 9b0:	77 9b       	sbis	0x0e, 7	; 14
 9b2:	fe cf       	rjmp	.-4      	; 0x9b0 <SPI_masterReceive>
	/* return SPI buffer */
	return SPDR;
 9b4:	8f b1       	in	r24, 0x0f	; 15
}
 9b6:	08 95       	ret

000009b8 <TC72_Init>:

void TC72_Init(void)
{
	SET_BIT(SPI_PORT, SS);
 9b8:	88 b3       	in	r24, 0x18	; 24
 9ba:	80 61       	ori	r24, 0x10	; 16
 9bc:	88 bb       	out	0x18, r24	; 24
	/* Select control register */
	SPI_masterTransmit(0x80);
 9be:	80 e8       	ldi	r24, 0x80	; 128
 9c0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <SPI_masterTransmit>
	
	/* Select Continuous temperature conversion */
	SPI_masterTransmit(0x40);
 9c4:	80 e4       	ldi	r24, 0x40	; 64
 9c6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <SPI_masterTransmit>
	CLR_BIT(SPI_PORT, SS);
 9ca:	88 b3       	in	r24, 0x18	; 24
 9cc:	8f 7e       	andi	r24, 0xEF	; 239
 9ce:	88 bb       	out	0x18, r24	; 24
 9d0:	8b e7       	ldi	r24, 0x7B	; 123
 9d2:	92 e9       	ldi	r25, 0x92	; 146
 9d4:	01 97       	sbiw	r24, 0x01	; 1
 9d6:	f1 f7       	brne	.-4      	; 0x9d4 <TC72_Init+0x1c>
 9d8:	00 c0       	rjmp	.+0      	; 0x9da <TC72_Init+0x22>
 9da:	00 00       	nop
 9dc:	08 95       	ret

000009de <main>:
#include "APPL/app.h"

int main(void)
{
	Init();
 9de:	0e 94 49 00 	call	0x92	; 0x92 <Init>
	Welcome_Screen();
 9e2:	0e 94 5d 00 	call	0xba	; 0xba <Welcome_Screen>
	IDLE_Screen();
 9e6:	0e 94 b2 00 	call	0x164	; 0x164 <IDLE_Screen>
	UsrGetVal();
 9ea:	0e 94 03 01 	call	0x206	; 0x206 <UsrGetVal>
		//T0delay();
		//LCD_vSend_char('B');
		//T0delay();
		
		//CRT_Temp();
		float64_t Vr = getADCVal();
 9ee:	0e 94 23 01 	call	0x246	; 0x246 <getADCVal>
 9f2:	fd cf       	rjmp	.-6      	; 0x9ee <main+0x10>

000009f4 <__floatunsisf>:
 9f4:	e8 94       	clt
 9f6:	09 c0       	rjmp	.+18     	; 0xa0a <__floatsisf+0x12>

000009f8 <__floatsisf>:
 9f8:	97 fb       	bst	r25, 7
 9fa:	3e f4       	brtc	.+14     	; 0xa0a <__floatsisf+0x12>
 9fc:	90 95       	com	r25
 9fe:	80 95       	com	r24
 a00:	70 95       	com	r23
 a02:	61 95       	neg	r22
 a04:	7f 4f       	sbci	r23, 0xFF	; 255
 a06:	8f 4f       	sbci	r24, 0xFF	; 255
 a08:	9f 4f       	sbci	r25, 0xFF	; 255
 a0a:	99 23       	and	r25, r25
 a0c:	a9 f0       	breq	.+42     	; 0xa38 <__floatsisf+0x40>
 a0e:	f9 2f       	mov	r31, r25
 a10:	96 e9       	ldi	r25, 0x96	; 150
 a12:	bb 27       	eor	r27, r27
 a14:	93 95       	inc	r25
 a16:	f6 95       	lsr	r31
 a18:	87 95       	ror	r24
 a1a:	77 95       	ror	r23
 a1c:	67 95       	ror	r22
 a1e:	b7 95       	ror	r27
 a20:	f1 11       	cpse	r31, r1
 a22:	f8 cf       	rjmp	.-16     	; 0xa14 <__floatsisf+0x1c>
 a24:	fa f4       	brpl	.+62     	; 0xa64 <__floatsisf+0x6c>
 a26:	bb 0f       	add	r27, r27
 a28:	11 f4       	brne	.+4      	; 0xa2e <__floatsisf+0x36>
 a2a:	60 ff       	sbrs	r22, 0
 a2c:	1b c0       	rjmp	.+54     	; 0xa64 <__floatsisf+0x6c>
 a2e:	6f 5f       	subi	r22, 0xFF	; 255
 a30:	7f 4f       	sbci	r23, 0xFF	; 255
 a32:	8f 4f       	sbci	r24, 0xFF	; 255
 a34:	9f 4f       	sbci	r25, 0xFF	; 255
 a36:	16 c0       	rjmp	.+44     	; 0xa64 <__floatsisf+0x6c>
 a38:	88 23       	and	r24, r24
 a3a:	11 f0       	breq	.+4      	; 0xa40 <__floatsisf+0x48>
 a3c:	96 e9       	ldi	r25, 0x96	; 150
 a3e:	11 c0       	rjmp	.+34     	; 0xa62 <__floatsisf+0x6a>
 a40:	77 23       	and	r23, r23
 a42:	21 f0       	breq	.+8      	; 0xa4c <__floatsisf+0x54>
 a44:	9e e8       	ldi	r25, 0x8E	; 142
 a46:	87 2f       	mov	r24, r23
 a48:	76 2f       	mov	r23, r22
 a4a:	05 c0       	rjmp	.+10     	; 0xa56 <__floatsisf+0x5e>
 a4c:	66 23       	and	r22, r22
 a4e:	71 f0       	breq	.+28     	; 0xa6c <__floatsisf+0x74>
 a50:	96 e8       	ldi	r25, 0x86	; 134
 a52:	86 2f       	mov	r24, r22
 a54:	70 e0       	ldi	r23, 0x00	; 0
 a56:	60 e0       	ldi	r22, 0x00	; 0
 a58:	2a f0       	brmi	.+10     	; 0xa64 <__floatsisf+0x6c>
 a5a:	9a 95       	dec	r25
 a5c:	66 0f       	add	r22, r22
 a5e:	77 1f       	adc	r23, r23
 a60:	88 1f       	adc	r24, r24
 a62:	da f7       	brpl	.-10     	; 0xa5a <__floatsisf+0x62>
 a64:	88 0f       	add	r24, r24
 a66:	96 95       	lsr	r25
 a68:	87 95       	ror	r24
 a6a:	97 f9       	bld	r25, 7
 a6c:	08 95       	ret

00000a6e <__fp_inf>:
 a6e:	97 f9       	bld	r25, 7
 a70:	9f 67       	ori	r25, 0x7F	; 127
 a72:	80 e8       	ldi	r24, 0x80	; 128
 a74:	70 e0       	ldi	r23, 0x00	; 0
 a76:	60 e0       	ldi	r22, 0x00	; 0
 a78:	08 95       	ret

00000a7a <__fp_nan>:
 a7a:	9f ef       	ldi	r25, 0xFF	; 255
 a7c:	80 ec       	ldi	r24, 0xC0	; 192
 a7e:	08 95       	ret

00000a80 <__fp_pscA>:
 a80:	00 24       	eor	r0, r0
 a82:	0a 94       	dec	r0
 a84:	16 16       	cp	r1, r22
 a86:	17 06       	cpc	r1, r23
 a88:	18 06       	cpc	r1, r24
 a8a:	09 06       	cpc	r0, r25
 a8c:	08 95       	ret

00000a8e <__fp_pscB>:
 a8e:	00 24       	eor	r0, r0
 a90:	0a 94       	dec	r0
 a92:	12 16       	cp	r1, r18
 a94:	13 06       	cpc	r1, r19
 a96:	14 06       	cpc	r1, r20
 a98:	05 06       	cpc	r0, r21
 a9a:	08 95       	ret

00000a9c <__fp_round>:
 a9c:	09 2e       	mov	r0, r25
 a9e:	03 94       	inc	r0
 aa0:	00 0c       	add	r0, r0
 aa2:	11 f4       	brne	.+4      	; 0xaa8 <__fp_round+0xc>
 aa4:	88 23       	and	r24, r24
 aa6:	52 f0       	brmi	.+20     	; 0xabc <__fp_round+0x20>
 aa8:	bb 0f       	add	r27, r27
 aaa:	40 f4       	brcc	.+16     	; 0xabc <__fp_round+0x20>
 aac:	bf 2b       	or	r27, r31
 aae:	11 f4       	brne	.+4      	; 0xab4 <__fp_round+0x18>
 ab0:	60 ff       	sbrs	r22, 0
 ab2:	04 c0       	rjmp	.+8      	; 0xabc <__fp_round+0x20>
 ab4:	6f 5f       	subi	r22, 0xFF	; 255
 ab6:	7f 4f       	sbci	r23, 0xFF	; 255
 ab8:	8f 4f       	sbci	r24, 0xFF	; 255
 aba:	9f 4f       	sbci	r25, 0xFF	; 255
 abc:	08 95       	ret

00000abe <__fp_split3>:
 abe:	57 fd       	sbrc	r21, 7
 ac0:	90 58       	subi	r25, 0x80	; 128
 ac2:	44 0f       	add	r20, r20
 ac4:	55 1f       	adc	r21, r21
 ac6:	59 f0       	breq	.+22     	; 0xade <__fp_splitA+0x10>
 ac8:	5f 3f       	cpi	r21, 0xFF	; 255
 aca:	71 f0       	breq	.+28     	; 0xae8 <__fp_splitA+0x1a>
 acc:	47 95       	ror	r20

00000ace <__fp_splitA>:
 ace:	88 0f       	add	r24, r24
 ad0:	97 fb       	bst	r25, 7
 ad2:	99 1f       	adc	r25, r25
 ad4:	61 f0       	breq	.+24     	; 0xaee <__fp_splitA+0x20>
 ad6:	9f 3f       	cpi	r25, 0xFF	; 255
 ad8:	79 f0       	breq	.+30     	; 0xaf8 <__fp_splitA+0x2a>
 ada:	87 95       	ror	r24
 adc:	08 95       	ret
 ade:	12 16       	cp	r1, r18
 ae0:	13 06       	cpc	r1, r19
 ae2:	14 06       	cpc	r1, r20
 ae4:	55 1f       	adc	r21, r21
 ae6:	f2 cf       	rjmp	.-28     	; 0xacc <__fp_split3+0xe>
 ae8:	46 95       	lsr	r20
 aea:	f1 df       	rcall	.-30     	; 0xace <__fp_splitA>
 aec:	08 c0       	rjmp	.+16     	; 0xafe <__fp_splitA+0x30>
 aee:	16 16       	cp	r1, r22
 af0:	17 06       	cpc	r1, r23
 af2:	18 06       	cpc	r1, r24
 af4:	99 1f       	adc	r25, r25
 af6:	f1 cf       	rjmp	.-30     	; 0xada <__fp_splitA+0xc>
 af8:	86 95       	lsr	r24
 afa:	71 05       	cpc	r23, r1
 afc:	61 05       	cpc	r22, r1
 afe:	08 94       	sec
 b00:	08 95       	ret

00000b02 <__fp_zero>:
 b02:	e8 94       	clt

00000b04 <__fp_szero>:
 b04:	bb 27       	eor	r27, r27
 b06:	66 27       	eor	r22, r22
 b08:	77 27       	eor	r23, r23
 b0a:	cb 01       	movw	r24, r22
 b0c:	97 f9       	bld	r25, 7
 b0e:	08 95       	ret

00000b10 <__mulsf3>:
 b10:	0e 94 9b 05 	call	0xb36	; 0xb36 <__mulsf3x>
 b14:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_round>
 b18:	0e 94 40 05 	call	0xa80	; 0xa80 <__fp_pscA>
 b1c:	38 f0       	brcs	.+14     	; 0xb2c <__mulsf3+0x1c>
 b1e:	0e 94 47 05 	call	0xa8e	; 0xa8e <__fp_pscB>
 b22:	20 f0       	brcs	.+8      	; 0xb2c <__mulsf3+0x1c>
 b24:	95 23       	and	r25, r21
 b26:	11 f0       	breq	.+4      	; 0xb2c <__mulsf3+0x1c>
 b28:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__fp_inf>
 b2c:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_nan>
 b30:	11 24       	eor	r1, r1
 b32:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_szero>

00000b36 <__mulsf3x>:
 b36:	0e 94 5f 05 	call	0xabe	; 0xabe <__fp_split3>
 b3a:	70 f3       	brcs	.-36     	; 0xb18 <__mulsf3+0x8>

00000b3c <__mulsf3_pse>:
 b3c:	95 9f       	mul	r25, r21
 b3e:	c1 f3       	breq	.-16     	; 0xb30 <__mulsf3+0x20>
 b40:	95 0f       	add	r25, r21
 b42:	50 e0       	ldi	r21, 0x00	; 0
 b44:	55 1f       	adc	r21, r21
 b46:	62 9f       	mul	r22, r18
 b48:	f0 01       	movw	r30, r0
 b4a:	72 9f       	mul	r23, r18
 b4c:	bb 27       	eor	r27, r27
 b4e:	f0 0d       	add	r31, r0
 b50:	b1 1d       	adc	r27, r1
 b52:	63 9f       	mul	r22, r19
 b54:	aa 27       	eor	r26, r26
 b56:	f0 0d       	add	r31, r0
 b58:	b1 1d       	adc	r27, r1
 b5a:	aa 1f       	adc	r26, r26
 b5c:	64 9f       	mul	r22, r20
 b5e:	66 27       	eor	r22, r22
 b60:	b0 0d       	add	r27, r0
 b62:	a1 1d       	adc	r26, r1
 b64:	66 1f       	adc	r22, r22
 b66:	82 9f       	mul	r24, r18
 b68:	22 27       	eor	r18, r18
 b6a:	b0 0d       	add	r27, r0
 b6c:	a1 1d       	adc	r26, r1
 b6e:	62 1f       	adc	r22, r18
 b70:	73 9f       	mul	r23, r19
 b72:	b0 0d       	add	r27, r0
 b74:	a1 1d       	adc	r26, r1
 b76:	62 1f       	adc	r22, r18
 b78:	83 9f       	mul	r24, r19
 b7a:	a0 0d       	add	r26, r0
 b7c:	61 1d       	adc	r22, r1
 b7e:	22 1f       	adc	r18, r18
 b80:	74 9f       	mul	r23, r20
 b82:	33 27       	eor	r19, r19
 b84:	a0 0d       	add	r26, r0
 b86:	61 1d       	adc	r22, r1
 b88:	23 1f       	adc	r18, r19
 b8a:	84 9f       	mul	r24, r20
 b8c:	60 0d       	add	r22, r0
 b8e:	21 1d       	adc	r18, r1
 b90:	82 2f       	mov	r24, r18
 b92:	76 2f       	mov	r23, r22
 b94:	6a 2f       	mov	r22, r26
 b96:	11 24       	eor	r1, r1
 b98:	9f 57       	subi	r25, 0x7F	; 127
 b9a:	50 40       	sbci	r21, 0x00	; 0
 b9c:	9a f0       	brmi	.+38     	; 0xbc4 <__mulsf3_pse+0x88>
 b9e:	f1 f0       	breq	.+60     	; 0xbdc <__mulsf3_pse+0xa0>
 ba0:	88 23       	and	r24, r24
 ba2:	4a f0       	brmi	.+18     	; 0xbb6 <__mulsf3_pse+0x7a>
 ba4:	ee 0f       	add	r30, r30
 ba6:	ff 1f       	adc	r31, r31
 ba8:	bb 1f       	adc	r27, r27
 baa:	66 1f       	adc	r22, r22
 bac:	77 1f       	adc	r23, r23
 bae:	88 1f       	adc	r24, r24
 bb0:	91 50       	subi	r25, 0x01	; 1
 bb2:	50 40       	sbci	r21, 0x00	; 0
 bb4:	a9 f7       	brne	.-22     	; 0xba0 <__mulsf3_pse+0x64>
 bb6:	9e 3f       	cpi	r25, 0xFE	; 254
 bb8:	51 05       	cpc	r21, r1
 bba:	80 f0       	brcs	.+32     	; 0xbdc <__mulsf3_pse+0xa0>
 bbc:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__fp_inf>
 bc0:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_szero>
 bc4:	5f 3f       	cpi	r21, 0xFF	; 255
 bc6:	e4 f3       	brlt	.-8      	; 0xbc0 <__mulsf3_pse+0x84>
 bc8:	98 3e       	cpi	r25, 0xE8	; 232
 bca:	d4 f3       	brlt	.-12     	; 0xbc0 <__mulsf3_pse+0x84>
 bcc:	86 95       	lsr	r24
 bce:	77 95       	ror	r23
 bd0:	67 95       	ror	r22
 bd2:	b7 95       	ror	r27
 bd4:	f7 95       	ror	r31
 bd6:	e7 95       	ror	r30
 bd8:	9f 5f       	subi	r25, 0xFF	; 255
 bda:	c1 f7       	brne	.-16     	; 0xbcc <__mulsf3_pse+0x90>
 bdc:	fe 2b       	or	r31, r30
 bde:	88 0f       	add	r24, r24
 be0:	91 1d       	adc	r25, r1
 be2:	96 95       	lsr	r25
 be4:	87 95       	ror	r24
 be6:	97 f9       	bld	r25, 7
 be8:	08 95       	ret

00000bea <__umulhisi3>:
 bea:	a2 9f       	mul	r26, r18
 bec:	b0 01       	movw	r22, r0
 bee:	b3 9f       	mul	r27, r19
 bf0:	c0 01       	movw	r24, r0
 bf2:	a3 9f       	mul	r26, r19
 bf4:	70 0d       	add	r23, r0
 bf6:	81 1d       	adc	r24, r1
 bf8:	11 24       	eor	r1, r1
 bfa:	91 1d       	adc	r25, r1
 bfc:	b2 9f       	mul	r27, r18
 bfe:	70 0d       	add	r23, r0
 c00:	81 1d       	adc	r24, r1
 c02:	11 24       	eor	r1, r1
 c04:	91 1d       	adc	r25, r1
 c06:	08 95       	ret

00000c08 <itoa>:
 c08:	45 32       	cpi	r20, 0x25	; 37
 c0a:	51 05       	cpc	r21, r1
 c0c:	20 f4       	brcc	.+8      	; 0xc16 <itoa+0xe>
 c0e:	42 30       	cpi	r20, 0x02	; 2
 c10:	10 f0       	brcs	.+4      	; 0xc16 <itoa+0xe>
 c12:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__itoa_ncheck>
 c16:	fb 01       	movw	r30, r22
 c18:	10 82       	st	Z, r1
 c1a:	cb 01       	movw	r24, r22
 c1c:	08 95       	ret

00000c1e <__itoa_ncheck>:
 c1e:	bb 27       	eor	r27, r27
 c20:	4a 30       	cpi	r20, 0x0A	; 10
 c22:	31 f4       	brne	.+12     	; 0xc30 <__itoa_ncheck+0x12>
 c24:	99 23       	and	r25, r25
 c26:	22 f4       	brpl	.+8      	; 0xc30 <__itoa_ncheck+0x12>
 c28:	bd e2       	ldi	r27, 0x2D	; 45
 c2a:	90 95       	com	r25
 c2c:	81 95       	neg	r24
 c2e:	9f 4f       	sbci	r25, 0xFF	; 255
 c30:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__utoa_common>

00000c34 <__utoa_ncheck>:
 c34:	bb 27       	eor	r27, r27

00000c36 <__utoa_common>:
 c36:	fb 01       	movw	r30, r22
 c38:	55 27       	eor	r21, r21
 c3a:	aa 27       	eor	r26, r26
 c3c:	88 0f       	add	r24, r24
 c3e:	99 1f       	adc	r25, r25
 c40:	aa 1f       	adc	r26, r26
 c42:	a4 17       	cp	r26, r20
 c44:	10 f0       	brcs	.+4      	; 0xc4a <__utoa_common+0x14>
 c46:	a4 1b       	sub	r26, r20
 c48:	83 95       	inc	r24
 c4a:	50 51       	subi	r21, 0x10	; 16
 c4c:	b9 f7       	brne	.-18     	; 0xc3c <__utoa_common+0x6>
 c4e:	a0 5d       	subi	r26, 0xD0	; 208
 c50:	aa 33       	cpi	r26, 0x3A	; 58
 c52:	08 f0       	brcs	.+2      	; 0xc56 <__utoa_common+0x20>
 c54:	a9 5d       	subi	r26, 0xD9	; 217
 c56:	a1 93       	st	Z+, r26
 c58:	00 97       	sbiw	r24, 0x00	; 0
 c5a:	79 f7       	brne	.-34     	; 0xc3a <__utoa_common+0x4>
 c5c:	b1 11       	cpse	r27, r1
 c5e:	b1 93       	st	Z+, r27
 c60:	11 92       	st	Z+, r1
 c62:	cb 01       	movw	r24, r22
 c64:	0c 94 34 06 	jmp	0xc68	; 0xc68 <strrev>

00000c68 <strrev>:
 c68:	dc 01       	movw	r26, r24
 c6a:	fc 01       	movw	r30, r24
 c6c:	67 2f       	mov	r22, r23
 c6e:	71 91       	ld	r23, Z+
 c70:	77 23       	and	r23, r23
 c72:	e1 f7       	brne	.-8      	; 0xc6c <strrev+0x4>
 c74:	32 97       	sbiw	r30, 0x02	; 2
 c76:	04 c0       	rjmp	.+8      	; 0xc80 <strrev+0x18>
 c78:	7c 91       	ld	r23, X
 c7a:	6d 93       	st	X+, r22
 c7c:	70 83       	st	Z, r23
 c7e:	62 91       	ld	r22, -Z
 c80:	ae 17       	cp	r26, r30
 c82:	bf 07       	cpc	r27, r31
 c84:	c8 f3       	brcs	.-14     	; 0xc78 <strrev+0x10>
 c86:	08 95       	ret

00000c88 <_exit>:
 c88:	f8 94       	cli

00000c8a <__stop_program>:
 c8a:	ff cf       	rjmp	.-2      	; 0xc8a <__stop_program>
