
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000084a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  0000084a  000008de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080009e  0080009e  0000091c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000094c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c05  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bda  00000000  00000000  0000271d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fc2  00000000  00000000  000032f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  000042bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000614  00000000  00000000  0000457c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011e9  00000000  00000000  00004b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00005d79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 39       	cpi	r26, 0x9E	; 158
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e9       	ldi	r26, 0x9E	; 158
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3a       	cpi	r26, 0xA0	; 160
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9c 03 	call	0x738	; 0x738 <main>
  8a:	0c 94 23 04 	jmp	0x846	; 0x846 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Init>:
#include <avr/io.h>
static u8 shift = 0;

void Init(void)
{
	LCD_vInit();
  92:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_vInit>
	keypad_vInit();
  96:	0e 94 2f 02 	call	0x45e	; 0x45e <keypad_vInit>
	SPI_masterInit();
  9a:	0e 94 b3 03 	call	0x766	; 0x766 <SPI_masterInit>
	TC72_Init();
  9e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <TC72_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	82 e5       	ldi	r24, 0x52	; 82
  a6:	97 e0       	ldi	r25, 0x07	; 7
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <Init+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <Init+0x20>
  b2:	00 00       	nop
  b4:	08 95       	ret

000000b6 <Welcome_Screen>:
	_delay_ms(150);
}

void Welcome_Screen(void)
{
	LCD_movecursor(1, 1);
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_movecursor>
	
	for (shift = 1; shift < 16; ++shift)
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <Welcome_Screen+0x42>
	{
		LCD_clearscreen();
  c6:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_clearscreen>
		LCD_SendStringRowCol(1, shift, "WELCOME");
  ca:	40 e6       	ldi	r20, 0x60	; 96
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	60 91 9e 00 	lds	r22, 0x009E	; 0x80009e <__data_end>
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 82 03 	call	0x704	; 0x704 <LCD_SendStringRowCol>
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	81 ee       	ldi	r24, 0xE1	; 225
  dc:	94 e0       	ldi	r25, 0x04	; 4
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <Welcome_Screen+0x28>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <Welcome_Screen+0x32>
  e8:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();
  ea:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_clearscreen>

void Welcome_Screen(void)
{
	LCD_movecursor(1, 1);
	
	for (shift = 1; shift < 16; ++shift)
  ee:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
  f2:	8f 5f       	subi	r24, 0xFF	; 255
  f4:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
  f8:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
  fc:	80 31       	cpi	r24, 0x10	; 16
  fe:	18 f3       	brcs	.-58     	; 0xc6 <Welcome_Screen+0x10>
		LCD_SendStringRowCol(1, shift, "WELCOME");
		_delay_ms(100);
		LCD_clearscreen();
	}

	for (shift = 16; shift > 0; --shift)
 100:	80 e1       	ldi	r24, 0x10	; 16
 102:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
 106:	19 c0       	rjmp	.+50     	; 0x13a <Welcome_Screen+0x84>
	{
		LCD_clearscreen();
 108:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_clearscreen>
		LCD_SendStringRowCol(1, shift, "WELCOME");
 10c:	40 e6       	ldi	r20, 0x60	; 96
 10e:	50 e0       	ldi	r21, 0x00	; 0
 110:	60 91 9e 00 	lds	r22, 0x009E	; 0x80009e <__data_end>
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 82 03 	call	0x704	; 0x704 <LCD_SendStringRowCol>
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	81 ee       	ldi	r24, 0xE1	; 225
 11e:	94 e0       	ldi	r25, 0x04	; 4
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <Welcome_Screen+0x6a>
 128:	00 c0       	rjmp	.+0      	; 0x12a <Welcome_Screen+0x74>
 12a:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();
 12c:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_clearscreen>
		LCD_SendStringRowCol(1, shift, "WELCOME");
		_delay_ms(100);
		LCD_clearscreen();
	}

	for (shift = 16; shift > 0; --shift)
 130:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
 134:	81 50       	subi	r24, 0x01	; 1
 136:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
 13a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
 13e:	81 11       	cpse	r24, r1
 140:	e3 cf       	rjmp	.-58     	; 0x108 <Welcome_Screen+0x52>
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	84 e3       	ldi	r24, 0x34	; 52
 146:	9c e0       	ldi	r25, 0x0C	; 12
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <Welcome_Screen+0x92>
 150:	00 c0       	rjmp	.+0      	; 0x152 <Welcome_Screen+0x9c>
 152:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();
	}
	
	_delay_ms(250);
	LCD_clearscreen();
 154:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_clearscreen>
 158:	08 95       	ret

0000015a <IDLE_Screen>:
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	89 ef       	ldi	r24, 0xF9	; 249
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <IDLE_Screen+0x6>
 168:	00 c0       	rjmp	.+0      	; 0x16a <IDLE_Screen+0x10>
 16a:	00 00       	nop
}

void IDLE_Screen(void)
{
	_delay_ms(20);
	LCD_SendStringRowCol(1, 1, "SET:25");
 16c:	48 e6       	ldi	r20, 0x68	; 104
 16e:	50 e0       	ldi	r21, 0x00	; 0
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 82 03 	call	0x704	; 0x704 <LCD_SendStringRowCol>
	LCD_SendStringRowCol(1, 11, "CRT:");
 178:	4f e6       	ldi	r20, 0x6F	; 111
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	6b e0       	ldi	r22, 0x0B	; 11
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 82 03 	call	0x704	; 0x704 <LCD_SendStringRowCol>
	LCD_SendStringRowCol(2, 1, "STATE:STANDBY");
 184:	44 e7       	ldi	r20, 0x74	; 116
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	0e 94 82 03 	call	0x704	; 0x704 <LCD_SendStringRowCol>
 190:	08 95       	ret

00000192 <UsrGetVal>:
}

u8 UsrGetVal(void)
{
 192:	cf 93       	push	r28
	u8 keypadPress = getKey();
 194:	0e 94 77 02 	call	0x4ee	; 0x4ee <getKey>
 198:	c8 2f       	mov	r28, r24
	
	if (keypadPress == '#')
 19a:	83 32       	cpi	r24, 0x23	; 35
 19c:	51 f4       	brne	.+20     	; 0x1b2 <UsrGetVal+0x20>
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	89 ef       	ldi	r24, 0xF9	; 249
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <UsrGetVal+0x12>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <UsrGetVal+0x1c>
 1ae:	00 00       	nop
 1b0:	0b c0       	rjmp	.+22     	; 0x1c8 <UsrGetVal+0x36>
	{
		_delay_ms(20);
	}
	else
	{
		LCD_vSend_char(keypadPress);
 1b2:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_vSend_char>
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	89 ef       	ldi	r24, 0xF9	; 249
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <UsrGetVal+0x2a>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <UsrGetVal+0x34>
 1c6:	00 00       	nop
		_delay_ms(20);		
	}
	
	return keypadPress;
}
 1c8:	8c 2f       	mov	r24, r28
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <tc72_read>:
		////LCD_vSend_char(TempVal);
		//_delay_ms(20);
	}
}*/

void tc72_read(void){
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	00 d0       	rcall	.+0      	; 0x1d4 <tc72_read+0x6>
 1d4:	00 d0       	rcall	.+0      	; 0x1d6 <tc72_read+0x8>
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
    char MSB = 0;
	char CurrentTempString[4];
    char tempValue = 0;
    /* ----------- LSB ---------- */
	while(1){
    PORTB |= (1 << 4);
 1da:	88 b3       	in	r24, 0x18	; 24
 1dc:	80 61       	ori	r24, 0x10	; 16
 1de:	88 bb       	out	0x18, r24	; 24
    SPI_masterTransmit(0x01);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 c8 03 	call	0x790	; 0x790 <SPI_masterTransmit>
    SPI_masterTransmit(0x00);
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 c8 03 	call	0x790	; 0x790 <SPI_masterTransmit>
    PORTB &= ~(1 << 4);
 1ec:	88 b3       	in	r24, 0x18	; 24
 1ee:	8f 7e       	andi	r24, 0xEF	; 239
 1f0:	88 bb       	out	0x18, r24	; 24
 1f2:	8f e9       	ldi	r24, 0x9F	; 159
 1f4:	9f e0       	ldi	r25, 0x0F	; 15
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <tc72_read+0x28>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <tc72_read+0x2e>
 1fc:	00 00       	nop

    _delay_ms(1);
    LSB = SPI_masterReceive();
 1fe:	0e 94 cc 03 	call	0x798	; 0x798 <SPI_masterReceive>

    /* ----------- MSB ---------- */

    PORTB |= (1 << 4);
 202:	88 b3       	in	r24, 0x18	; 24
 204:	80 61       	ori	r24, 0x10	; 16
 206:	88 bb       	out	0x18, r24	; 24
    SPI_masterTransmit(0x02);            /* read will be from MSB temperature register */
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	0e 94 c8 03 	call	0x790	; 0x790 <SPI_masterTransmit>
    SPI_masterTransmit(0x00);
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	0e 94 c8 03 	call	0x790	; 0x790 <SPI_masterTransmit>
    PORTB &= ~(1 << 4);
 214:	88 b3       	in	r24, 0x18	; 24
 216:	8f 7e       	andi	r24, 0xEF	; 239
 218:	88 bb       	out	0x18, r24	; 24
 21a:	8f e9       	ldi	r24, 0x9F	; 159
 21c:	9f e0       	ldi	r25, 0x0F	; 15
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <tc72_read+0x50>
 222:	00 c0       	rjmp	.+0      	; 0x224 <tc72_read+0x56>
 224:	00 00       	nop

    _delay_ms(1);
    MSB = SPI_masterReceive();
 226:	0e 94 cc 03 	call	0x798	; 0x798 <SPI_masterReceive>

    LSB >>= 7;
    //MSB <<= 1;
    tempValue = MSB | LSB;
	
	itoa(MSB,CurrentTempString,10);
 22a:	4a e0       	ldi	r20, 0x0A	; 10
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	be 01       	movw	r22, r28
 230:	6f 5f       	subi	r22, 0xFF	; 255
 232:	7f 4f       	sbci	r23, 0xFF	; 255
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <itoa>
    LCD_movecursor(1, 15);
 23a:	6f e0       	ldi	r22, 0x0F	; 15
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_movecursor>
    LCD_vSend_string(CurrentTempString);
 242:	ce 01       	movw	r24, r28
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_vSend_string>
 24a:	c7 cf       	rjmp	.-114    	; 0x1da <tc72_read+0xc>

0000024c <DIO_vsetPINDir>:
			PORTC &= 0xf0;
			PORTC |= value;
			break;
		case 'D':
			PORTD &= 0xf0;
			PORTD |= value;
 24c:	82 34       	cpi	r24, 0x42	; 66
 24e:	19 f1       	breq	.+70     	; 0x296 <DIO_vsetPINDir+0x4a>
 250:	18 f4       	brcc	.+6      	; 0x258 <DIO_vsetPINDir+0xc>
 252:	81 34       	cpi	r24, 0x41	; 65
 254:	39 f0       	breq	.+14     	; 0x264 <DIO_vsetPINDir+0x18>
 256:	08 95       	ret
 258:	83 34       	cpi	r24, 0x43	; 67
 25a:	b1 f1       	breq	.+108    	; 0x2c8 <DIO_vsetPINDir+0x7c>
 25c:	84 34       	cpi	r24, 0x44	; 68
 25e:	09 f4       	brne	.+2      	; 0x262 <DIO_vsetPINDir+0x16>
 260:	4c c0       	rjmp	.+152    	; 0x2fa <DIO_vsetPINDir+0xae>
 262:	08 95       	ret
 264:	41 30       	cpi	r20, 0x01	; 1
 266:	59 f4       	brne	.+22     	; 0x27e <DIO_vsetPINDir+0x32>
 268:	2a b3       	in	r18, 0x1a	; 26
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_vsetPINDir+0x28>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_vsetPINDir+0x24>
 278:	82 2b       	or	r24, r18
 27a:	8a bb       	out	0x1a, r24	; 26
 27c:	08 95       	ret
 27e:	2a b3       	in	r18, 0x1a	; 26
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_vsetPINDir+0x3e>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_vsetPINDir+0x3a>
 28e:	80 95       	com	r24
 290:	82 23       	and	r24, r18
 292:	8a bb       	out	0x1a, r24	; 26
 294:	08 95       	ret
 296:	41 30       	cpi	r20, 0x01	; 1
 298:	59 f4       	brne	.+22     	; 0x2b0 <DIO_vsetPINDir+0x64>
 29a:	27 b3       	in	r18, 0x17	; 23
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_vsetPINDir+0x5a>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_vsetPINDir+0x56>
 2aa:	82 2b       	or	r24, r18
 2ac:	87 bb       	out	0x17, r24	; 23
 2ae:	08 95       	ret
 2b0:	27 b3       	in	r18, 0x17	; 23
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_vsetPINDir+0x70>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_vsetPINDir+0x6c>
 2c0:	80 95       	com	r24
 2c2:	82 23       	and	r24, r18
 2c4:	87 bb       	out	0x17, r24	; 23
 2c6:	08 95       	ret
 2c8:	41 30       	cpi	r20, 0x01	; 1
 2ca:	59 f4       	brne	.+22     	; 0x2e2 <DIO_vsetPINDir+0x96>
 2cc:	24 b3       	in	r18, 0x14	; 20
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_vsetPINDir+0x8c>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_vsetPINDir+0x88>
 2dc:	82 2b       	or	r24, r18
 2de:	84 bb       	out	0x14, r24	; 20
 2e0:	08 95       	ret
 2e2:	24 b3       	in	r18, 0x14	; 20
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_vsetPINDir+0xa2>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_vsetPINDir+0x9e>
 2f2:	80 95       	com	r24
 2f4:	82 23       	and	r24, r18
 2f6:	84 bb       	out	0x14, r24	; 20
 2f8:	08 95       	ret
 2fa:	41 30       	cpi	r20, 0x01	; 1
 2fc:	59 f4       	brne	.+22     	; 0x314 <DIO_vsetPINDir+0xc8>
 2fe:	21 b3       	in	r18, 0x11	; 17
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_vsetPINDir+0xbe>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_vsetPINDir+0xba>
 30e:	82 2b       	or	r24, r18
 310:	81 bb       	out	0x11, r24	; 17
 312:	08 95       	ret
 314:	21 b3       	in	r18, 0x11	; 17
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_vsetPINDir+0xd4>
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_vsetPINDir+0xd0>
 324:	80 95       	com	r24
 326:	82 23       	and	r24, r18
 328:	81 bb       	out	0x11, r24	; 17
 32a:	08 95       	ret

0000032c <DIO_write>:
 32c:	82 34       	cpi	r24, 0x42	; 66
 32e:	19 f1       	breq	.+70     	; 0x376 <DIO_write+0x4a>
 330:	18 f4       	brcc	.+6      	; 0x338 <DIO_write+0xc>
 332:	81 34       	cpi	r24, 0x41	; 65
 334:	39 f0       	breq	.+14     	; 0x344 <DIO_write+0x18>
 336:	08 95       	ret
 338:	83 34       	cpi	r24, 0x43	; 67
 33a:	b1 f1       	breq	.+108    	; 0x3a8 <DIO_write+0x7c>
 33c:	84 34       	cpi	r24, 0x44	; 68
 33e:	09 f4       	brne	.+2      	; 0x342 <DIO_write+0x16>
 340:	4c c0       	rjmp	.+152    	; 0x3da <DIO_write+0xae>
 342:	08 95       	ret
 344:	41 30       	cpi	r20, 0x01	; 1
 346:	59 f4       	brne	.+22     	; 0x35e <DIO_write+0x32>
 348:	2b b3       	in	r18, 0x1b	; 27
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_write+0x28>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_write+0x24>
 358:	82 2b       	or	r24, r18
 35a:	8b bb       	out	0x1b, r24	; 27
 35c:	08 95       	ret
 35e:	2b b3       	in	r18, 0x1b	; 27
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_write+0x3e>
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_write+0x3a>
 36e:	80 95       	com	r24
 370:	82 23       	and	r24, r18
 372:	8b bb       	out	0x1b, r24	; 27
 374:	08 95       	ret
 376:	41 30       	cpi	r20, 0x01	; 1
 378:	59 f4       	brne	.+22     	; 0x390 <DIO_write+0x64>
 37a:	28 b3       	in	r18, 0x18	; 24
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_write+0x5a>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_write+0x56>
 38a:	82 2b       	or	r24, r18
 38c:	88 bb       	out	0x18, r24	; 24
 38e:	08 95       	ret
 390:	28 b3       	in	r18, 0x18	; 24
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_write+0x70>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_write+0x6c>
 3a0:	80 95       	com	r24
 3a2:	82 23       	and	r24, r18
 3a4:	88 bb       	out	0x18, r24	; 24
 3a6:	08 95       	ret
 3a8:	41 30       	cpi	r20, 0x01	; 1
 3aa:	59 f4       	brne	.+22     	; 0x3c2 <DIO_write+0x96>
 3ac:	25 b3       	in	r18, 0x15	; 21
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_write+0x8c>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_write+0x88>
 3bc:	82 2b       	or	r24, r18
 3be:	85 bb       	out	0x15, r24	; 21
 3c0:	08 95       	ret
 3c2:	25 b3       	in	r18, 0x15	; 21
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_write+0xa2>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	6a 95       	dec	r22
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_write+0x9e>
 3d2:	80 95       	com	r24
 3d4:	82 23       	and	r24, r18
 3d6:	85 bb       	out	0x15, r24	; 21
 3d8:	08 95       	ret
 3da:	41 30       	cpi	r20, 0x01	; 1
 3dc:	59 f4       	brne	.+22     	; 0x3f4 <DIO_write+0xc8>
 3de:	22 b3       	in	r18, 0x12	; 18
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_write+0xbe>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_write+0xba>
 3ee:	82 2b       	or	r24, r18
 3f0:	82 bb       	out	0x12, r24	; 18
 3f2:	08 95       	ret
 3f4:	22 b3       	in	r18, 0x12	; 18
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_write+0xd0>
 404:	80 95       	com	r24
 406:	82 23       	and	r24, r18
 408:	82 bb       	out	0x12, r24	; 18
 40a:	08 95       	ret

0000040c <write_high_nibble>:
	}
}

void write_high_nibble(u8 portname, u8 value)
{
	value <<= 4;
 40c:	62 95       	swap	r22
 40e:	60 7f       	andi	r22, 0xF0	; 240
	
	switch(portname)
 410:	82 34       	cpi	r24, 0x42	; 66
 412:	81 f0       	breq	.+32     	; 0x434 <write_high_nibble+0x28>
 414:	18 f4       	brcc	.+6      	; 0x41c <write_high_nibble+0x10>
 416:	81 34       	cpi	r24, 0x41	; 65
 418:	31 f0       	breq	.+12     	; 0x426 <write_high_nibble+0x1a>
 41a:	08 95       	ret
 41c:	83 34       	cpi	r24, 0x43	; 67
 41e:	89 f0       	breq	.+34     	; 0x442 <write_high_nibble+0x36>
 420:	84 34       	cpi	r24, 0x44	; 68
 422:	b1 f0       	breq	.+44     	; 0x450 <write_high_nibble+0x44>
 424:	08 95       	ret
	{
		case 'A':
			PORTA &= 0x0f;
 426:	8b b3       	in	r24, 0x1b	; 27
 428:	8f 70       	andi	r24, 0x0F	; 15
 42a:	8b bb       	out	0x1b, r24	; 27
			PORTA |= value;
 42c:	8b b3       	in	r24, 0x1b	; 27
 42e:	68 2b       	or	r22, r24
 430:	6b bb       	out	0x1b, r22	; 27
			break;
 432:	08 95       	ret
		case 'B':
			PORTB &= 0x0f;
 434:	88 b3       	in	r24, 0x18	; 24
 436:	8f 70       	andi	r24, 0x0F	; 15
 438:	88 bb       	out	0x18, r24	; 24
			PORTB |= value;
 43a:	88 b3       	in	r24, 0x18	; 24
 43c:	68 2b       	or	r22, r24
 43e:	68 bb       	out	0x18, r22	; 24
			break;
 440:	08 95       	ret
		case 'C':
			PORTC &= 0x0f;
 442:	85 b3       	in	r24, 0x15	; 21
 444:	8f 70       	andi	r24, 0x0F	; 15
 446:	85 bb       	out	0x15, r24	; 21
			PORTC |= value;
 448:	85 b3       	in	r24, 0x15	; 21
 44a:	68 2b       	or	r22, r24
 44c:	65 bb       	out	0x15, r22	; 21
			break;
 44e:	08 95       	ret
		case 'D':
			PORTD &= 0x0f;
 450:	82 b3       	in	r24, 0x12	; 18
 452:	8f 70       	andi	r24, 0x0F	; 15
 454:	82 bb       	out	0x12, r24	; 18
			PORTD |= value;
 456:	82 b3       	in	r24, 0x12	; 18
 458:	68 2b       	or	r22, r24
 45a:	62 bb       	out	0x12, r22	; 18
 45c:	08 95       	ret

0000045e <keypad_vInit>:
	{'*', '0', '#'}
};

void keypad_vInit(void)
{
	DDRC = 0x0f;
 45e:	8f e0       	ldi	r24, 0x0F	; 15
 460:	84 bb       	out	0x14, r24	; 20
	CLR_BIT(SFIOR, PUD);
 462:	80 b7       	in	r24, 0x30	; 48
 464:	8b 7f       	andi	r24, 0xFB	; 251
 466:	80 bf       	out	0x30, r24	; 48
	PORTC = 0xff;
 468:	8f ef       	ldi	r24, 0xFF	; 255
 46a:	85 bb       	out	0x15, r24	; 21
 46c:	08 95       	ret

0000046e <Keypad_u8Scan>:
u8 Keypad_u8Scan(void)
{
	u8 row = 0;
	u8 column = 0;
	u8 scan = 0;
	u8 buttonPressed = 0;
 46e:	80 e0       	ldi	r24, 0x00	; 0

	for(row = 0; row < N_Row; ++row)
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	3a c0       	rjmp	.+116    	; 0x4e8 <Keypad_u8Scan+0x7a>
	{
		PORTC |= 0x0f;
 474:	95 b3       	in	r25, 0x15	; 21
 476:	9f 60       	ori	r25, 0x0F	; 15
 478:	95 bb       	out	0x15, r25	; 21
		CLR_BIT(PORTC, row);
 47a:	95 b3       	in	r25, 0x15	; 21
 47c:	a7 2f       	mov	r26, r23
 47e:	b0 e0       	ldi	r27, 0x00	; 0
 480:	21 e0       	ldi	r18, 0x01	; 1
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	07 2e       	mov	r0, r23
 486:	02 c0       	rjmp	.+4      	; 0x48c <Keypad_u8Scan+0x1e>
 488:	22 0f       	add	r18, r18
 48a:	33 1f       	adc	r19, r19
 48c:	0a 94       	dec	r0
 48e:	e2 f7       	brpl	.-8      	; 0x488 <Keypad_u8Scan+0x1a>
 490:	20 95       	com	r18
 492:	29 23       	and	r18, r25
 494:	25 bb       	out	0x15, r18	; 21
		for(column = 4; column < (N_Row + N_Col); ++column)
 496:	94 e0       	ldi	r25, 0x04	; 4
 498:	24 c0       	rjmp	.+72     	; 0x4e2 <Keypad_u8Scan+0x74>
		{
			scan = READ_BIT(PINC, column);
 49a:	63 b3       	in	r22, 0x13	; 19
 49c:	e9 2f       	mov	r30, r25
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	21 e0       	ldi	r18, 0x01	; 1
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	a9 01       	movw	r20, r18
 4a6:	09 2e       	mov	r0, r25
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <Keypad_u8Scan+0x40>
 4aa:	44 0f       	add	r20, r20
 4ac:	55 1f       	adc	r21, r21
 4ae:	0a 94       	dec	r0
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <Keypad_u8Scan+0x3c>
 4b2:	26 2f       	mov	r18, r22
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	24 23       	and	r18, r20
 4b8:	35 23       	and	r19, r21
 4ba:	09 2e       	mov	r0, r25
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <Keypad_u8Scan+0x54>
 4be:	35 95       	asr	r19
 4c0:	27 95       	ror	r18
 4c2:	0a 94       	dec	r0
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <Keypad_u8Scan+0x50>
			if(scan == 0)
 4c6:	21 11       	cpse	r18, r1
 4c8:	0b c0       	rjmp	.+22     	; 0x4e0 <Keypad_u8Scan+0x72>
			{
				buttonPressed = kp[row][column - 4];
 4ca:	34 97       	sbiw	r30, 0x04	; 4
 4cc:	9d 01       	movw	r18, r26
 4ce:	22 0f       	add	r18, r18
 4d0:	33 1f       	adc	r19, r19
 4d2:	2a 0f       	add	r18, r26
 4d4:	3b 1f       	adc	r19, r27
 4d6:	2e 57       	subi	r18, 0x7E	; 126
 4d8:	3f 4f       	sbci	r19, 0xFF	; 255
 4da:	e2 0f       	add	r30, r18
 4dc:	f3 1f       	adc	r31, r19
 4de:	80 81       	ld	r24, Z

	for(row = 0; row < N_Row; ++row)
	{
		PORTC |= 0x0f;
		CLR_BIT(PORTC, row);
		for(column = 4; column < (N_Row + N_Col); ++column)
 4e0:	9f 5f       	subi	r25, 0xFF	; 255
 4e2:	97 30       	cpi	r25, 0x07	; 7
 4e4:	d0 f2       	brcs	.-76     	; 0x49a <Keypad_u8Scan+0x2c>
	u8 row = 0;
	u8 column = 0;
	u8 scan = 0;
	u8 buttonPressed = 0;

	for(row = 0; row < N_Row; ++row)
 4e6:	7f 5f       	subi	r23, 0xFF	; 255
 4e8:	74 30       	cpi	r23, 0x04	; 4
 4ea:	20 f2       	brcs	.-120    	; 0x474 <Keypad_u8Scan+0x6>
			}
		}
	}
	
	return buttonPressed;
}
 4ec:	08 95       	ret

000004ee <getKey>:
u8 getKey(void)
{
	u8 key = 0;

	/* Wait for key release if pressed on entry */
	while(Keypad_u8Scan() != 0)
 4ee:	06 c0       	rjmp	.+12     	; 0x4fc <getKey+0xe>
 4f0:	83 ec       	ldi	r24, 0xC3	; 195
 4f2:	99 e0       	ldi	r25, 0x09	; 9
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <getKey+0x6>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <getKey+0xc>
 4fa:	00 00       	nop
 4fc:	0e 94 37 02 	call	0x46e	; 0x46e <Keypad_u8Scan>
 500:	81 11       	cpse	r24, r1
 502:	f6 cf       	rjmp	.-20     	; 0x4f0 <getKey+0x2>
	}

	/* Wait for new key press */
	do
	{
		key = Keypad_u8Scan();
 504:	0e 94 37 02 	call	0x46e	; 0x46e <Keypad_u8Scan>

	} while(key == 0);
 508:	88 23       	and	r24, r24
 50a:	e1 f3       	breq	.-8      	; 0x504 <getKey+0x16>

	return key;
 50c:	08 95       	ret

0000050e <send_falling_edge>:
	#endif
}

void send_falling_edge(void)
{
	DIO_write(EN_PORT, EN_PIN, 1);
 50e:	41 e0       	ldi	r20, 0x01	; 1
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	81 e4       	ldi	r24, 0x41	; 65
 514:	0e 94 96 01 	call	0x32c	; 0x32c <DIO_write>
 518:	83 ef       	ldi	r24, 0xF3	; 243
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	01 97       	sbiw	r24, 0x01	; 1
 51e:	f1 f7       	brne	.-4      	; 0x51c <send_falling_edge+0xe>
 520:	00 c0       	rjmp	.+0      	; 0x522 <send_falling_edge+0x14>
 522:	00 00       	nop
	_delay_ms(2);
	DIO_write(EN_PORT, EN_PIN, 0);
 524:	40 e0       	ldi	r20, 0x00	; 0
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	81 e4       	ldi	r24, 0x41	; 65
 52a:	0e 94 96 01 	call	0x32c	; 0x32c <DIO_write>
 52e:	83 ef       	ldi	r24, 0xF3	; 243
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <send_falling_edge+0x24>
 536:	00 c0       	rjmp	.+0      	; 0x538 <send_falling_edge+0x2a>
 538:	00 00       	nop
 53a:	08 95       	ret

0000053c <LCD_vSend_cmd>:
	_delay_ms(2);
}

void LCD_vSend_cmd(c8 cmd)
{
 53c:	cf 93       	push	r28
 53e:	c8 2f       	mov	r28, r24
		DIO_write(RS_PORT, RS_PIN, 0);
		send_falling_edge();
	
	/* We will work on 4-bis Mode */
	#elif defined four_bits_mode
		write_high_nibble(LCD_PORT, cmd >> 4);
 540:	68 2f       	mov	r22, r24
 542:	62 95       	swap	r22
 544:	6f 70       	andi	r22, 0x0F	; 15
 546:	84 e4       	ldi	r24, 0x44	; 68
 548:	0e 94 06 02 	call	0x40c	; 0x40c <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 0);
 54c:	40 e0       	ldi	r20, 0x00	; 0
 54e:	61 e0       	ldi	r22, 0x01	; 1
 550:	81 e4       	ldi	r24, 0x41	; 65
 552:	0e 94 96 01 	call	0x32c	; 0x32c <DIO_write>
		send_falling_edge();
 556:	0e 94 87 02 	call	0x50e	; 0x50e <send_falling_edge>
		write_high_nibble(LCD_PORT, cmd);
 55a:	6c 2f       	mov	r22, r28
 55c:	84 e4       	ldi	r24, 0x44	; 68
 55e:	0e 94 06 02 	call	0x40c	; 0x40c <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 0);
 562:	40 e0       	ldi	r20, 0x00	; 0
 564:	61 e0       	ldi	r22, 0x01	; 1
 566:	81 e4       	ldi	r24, 0x41	; 65
 568:	0e 94 96 01 	call	0x32c	; 0x32c <DIO_write>
		send_falling_edge();
 56c:	0e 94 87 02 	call	0x50e	; 0x50e <send_falling_edge>
 570:	89 ef       	ldi	r24, 0xF9	; 249
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	01 97       	sbiw	r24, 0x01	; 1
 576:	f1 f7       	brne	.-4      	; 0x574 <LCD_vSend_cmd+0x38>
 578:	00 c0       	rjmp	.+0      	; 0x57a <LCD_vSend_cmd+0x3e>
 57a:	00 00       	nop

	#endif
	_delay_ms(1);
}
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <LCD_vInit>:
 580:	87 e8       	ldi	r24, 0x87	; 135
 582:	93 e1       	ldi	r25, 0x13	; 19
 584:	01 97       	sbiw	r24, 0x01	; 1
 586:	f1 f7       	brne	.-4      	; 0x584 <LCD_vInit+0x4>
 588:	00 c0       	rjmp	.+0      	; 0x58a <LCD_vInit+0xa>
 58a:	00 00       	nop
	#elif defined four_bits_mode
		//for (counter = 4; counter < LCD_NPINs; ++counter)
		//{
			//DIO_vsetPINDir(LCD_PORT, counter, 1);
		//}
		DIO_vsetPINDir(LCD_PORT, 4, 1);
 58c:	41 e0       	ldi	r20, 0x01	; 1
 58e:	64 e0       	ldi	r22, 0x04	; 4
 590:	84 e4       	ldi	r24, 0x44	; 68
 592:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_vsetPINDir>
		DIO_vsetPINDir(LCD_PORT, 5, 1);
 596:	41 e0       	ldi	r20, 0x01	; 1
 598:	65 e0       	ldi	r22, 0x05	; 5
 59a:	84 e4       	ldi	r24, 0x44	; 68
 59c:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_vsetPINDir>
		DIO_vsetPINDir(LCD_PORT, 6, 1);
 5a0:	41 e0       	ldi	r20, 0x01	; 1
 5a2:	66 e0       	ldi	r22, 0x06	; 6
 5a4:	84 e4       	ldi	r24, 0x44	; 68
 5a6:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_vsetPINDir>
		DIO_vsetPINDir(LCD_PORT, 7, 1);
 5aa:	41 e0       	ldi	r20, 0x01	; 1
 5ac:	67 e0       	ldi	r22, 0x07	; 7
 5ae:	84 e4       	ldi	r24, 0x44	; 68
 5b0:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_vsetPINDir>
		DIO_vsetPINDir(EN_PORT, EN_PIN, 1);
 5b4:	41 e0       	ldi	r20, 0x01	; 1
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	81 e4       	ldi	r24, 0x41	; 65
 5ba:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_vsetPINDir>
		DIO_vsetPINDir(RW_PORT, RW_PIN, 1);
 5be:	41 e0       	ldi	r20, 0x01	; 1
 5c0:	62 e0       	ldi	r22, 0x02	; 2
 5c2:	81 e4       	ldi	r24, 0x41	; 65
 5c4:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_vsetPINDir>
		DIO_vsetPINDir(RS_PORT, RS_PIN, 1);
 5c8:	41 e0       	ldi	r20, 0x01	; 1
 5ca:	61 e0       	ldi	r22, 0x01	; 1
 5cc:	81 e4       	ldi	r24, 0x41	; 65
 5ce:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_vsetPINDir>
   		DIO_write(RW_PORT, RW_PIN, 0);
 5d2:	40 e0       	ldi	r20, 0x00	; 0
 5d4:	62 e0       	ldi	r22, 0x02	; 2
 5d6:	81 e4       	ldi	r24, 0x41	; 65
 5d8:	0e 94 96 01 	call	0x32c	; 0x32c <DIO_write>
		LCD_vSend_cmd(RETURN_HOME); /* Return Home (row: 0, col: 0) */
 5dc:	82 e0       	ldi	r24, 0x02	; 2
 5de:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_vSend_cmd>
 5e2:	83 ec       	ldi	r24, 0xC3	; 195
 5e4:	99 e0       	ldi	r25, 0x09	; 9
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <LCD_vInit+0x66>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <LCD_vInit+0x6c>
 5ec:	00 00       	nop
		_delay_ms(10);
		LCD_vSend_cmd(FOUR_BITS); /* 4-bits Mode */
 5ee:	88 e2       	ldi	r24, 0x28	; 40
 5f0:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_vSend_cmd>
 5f4:	89 ef       	ldi	r24, 0xF9	; 249
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	01 97       	sbiw	r24, 0x01	; 1
 5fa:	f1 f7       	brne	.-4      	; 0x5f8 <LCD_vInit+0x78>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <LCD_vInit+0x7e>
 5fe:	00 00       	nop
		_delay_ms(1);
		LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON); /* Display ON Cursor ON */
 600:	8e e0       	ldi	r24, 0x0E	; 14
 602:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_vSend_cmd>
 606:	89 ef       	ldi	r24, 0xF9	; 249
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	f1 f7       	brne	.-4      	; 0x60a <LCD_vInit+0x8a>
 60e:	00 c0       	rjmp	.+0      	; 0x610 <LCD_vInit+0x90>
 610:	00 00       	nop
		_delay_ms(1);
		LCD_vSend_cmd(CLR_SCREEN); /* Clear Screen */
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_vSend_cmd>
 618:	83 ec       	ldi	r24, 0xC3	; 195
 61a:	99 e0       	ldi	r25, 0x09	; 9
 61c:	01 97       	sbiw	r24, 0x01	; 1
 61e:	f1 f7       	brne	.-4      	; 0x61c <LCD_vInit+0x9c>
 620:	00 c0       	rjmp	.+0      	; 0x622 <LCD_vInit+0xa2>
 622:	00 00       	nop
		_delay_ms(10);
		LCD_vSend_cmd(ENTRY_MODE); /* Entry Mode */
 624:	86 e0       	ldi	r24, 0x06	; 6
 626:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_vSend_cmd>
 62a:	89 ef       	ldi	r24, 0xF9	; 249
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	01 97       	sbiw	r24, 0x01	; 1
 630:	f1 f7       	brne	.-4      	; 0x62e <LCD_vInit+0xae>
 632:	00 c0       	rjmp	.+0      	; 0x634 <LCD_vInit+0xb4>
 634:	00 00       	nop
 636:	08 95       	ret

00000638 <LCD_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD_vSend_char(c8 data)
{
 638:	cf 93       	push	r28
 63a:	c8 2f       	mov	r28, r24
		DIO_write(RS_PORT, RS_PIN, 1);
		send_falling_edge();
	
	/* We will work on 4-bis Mode */
	#elif defined four_bits_mode
		write_high_nibble(LCD_PORT, (data >> 4));
 63c:	68 2f       	mov	r22, r24
 63e:	62 95       	swap	r22
 640:	6f 70       	andi	r22, 0x0F	; 15
 642:	84 e4       	ldi	r24, 0x44	; 68
 644:	0e 94 06 02 	call	0x40c	; 0x40c <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 1);
 648:	41 e0       	ldi	r20, 0x01	; 1
 64a:	61 e0       	ldi	r22, 0x01	; 1
 64c:	81 e4       	ldi	r24, 0x41	; 65
 64e:	0e 94 96 01 	call	0x32c	; 0x32c <DIO_write>
		send_falling_edge();
 652:	0e 94 87 02 	call	0x50e	; 0x50e <send_falling_edge>
		write_high_nibble(LCD_PORT, data);
 656:	6c 2f       	mov	r22, r28
 658:	84 e4       	ldi	r24, 0x44	; 68
 65a:	0e 94 06 02 	call	0x40c	; 0x40c <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 1);
 65e:	41 e0       	ldi	r20, 0x01	; 1
 660:	61 e0       	ldi	r22, 0x01	; 1
 662:	81 e4       	ldi	r24, 0x41	; 65
 664:	0e 94 96 01 	call	0x32c	; 0x32c <DIO_write>
		send_falling_edge();
 668:	0e 94 87 02 	call	0x50e	; 0x50e <send_falling_edge>
 66c:	89 ef       	ldi	r24, 0xF9	; 249
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	01 97       	sbiw	r24, 0x01	; 1
 672:	f1 f7       	brne	.-4      	; 0x670 <LCD_vSend_char+0x38>
 674:	00 c0       	rjmp	.+0      	; 0x676 <LCD_vSend_char+0x3e>
 676:	00 00       	nop

	#endif
	_delay_ms(1);
}
 678:	cf 91       	pop	r28
 67a:	08 95       	ret

0000067c <LCD_vSend_string>:

void LCD_vSend_string(c8 * data)
{
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	ec 01       	movw	r28, r24
	//{
		//LCD_vSend_char(*data);
		//data = data + 1; /* To next char */
	//}

    for(counter = 0; data[counter] != '\0'; ++counter)
 682:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <counter>
 686:	07 c0       	rjmp	.+14     	; 0x696 <LCD_vSend_string+0x1a>
    {
	    LCD_vSend_char(data[counter]);
 688:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_vSend_char>
	//{
		//LCD_vSend_char(*data);
		//data = data + 1; /* To next char */
	//}

    for(counter = 0; data[counter] != '\0'; ++counter)
 68c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <counter>
 690:	8f 5f       	subi	r24, 0xFF	; 255
 692:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <counter>
 696:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <counter>
 69a:	fe 01       	movw	r30, r28
 69c:	e8 0f       	add	r30, r24
 69e:	f1 1d       	adc	r31, r1
 6a0:	80 81       	ld	r24, Z
 6a2:	81 11       	cpse	r24, r1
 6a4:	f1 cf       	rjmp	.-30     	; 0x688 <LCD_vSend_string+0xc>
    {
	    LCD_vSend_char(data[counter]);
    }
}
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	08 95       	ret

000006ac <LCD_clearscreen>:

void LCD_clearscreen(void)
{
	LCD_vSend_cmd(CLR_SCREEN);
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_vSend_cmd>
 6b2:	83 ec       	ldi	r24, 0xC3	; 195
 6b4:	99 e0       	ldi	r25, 0x09	; 9
 6b6:	01 97       	sbiw	r24, 0x01	; 1
 6b8:	f1 f7       	brne	.-4      	; 0x6b6 <LCD_clearscreen+0xa>
 6ba:	00 c0       	rjmp	.+0      	; 0x6bc <LCD_clearscreen+0x10>
 6bc:	00 00       	nop
 6be:	08 95       	ret

000006c0 <LCD_movecursor>:

void LCD_movecursor(c8 row, c8 coloumn)
{
	char data = 0;
	
	if (row > 2 || row < 1 || coloumn > 16 || coloumn < 1)
 6c0:	9f ef       	ldi	r25, 0xFF	; 255
 6c2:	98 0f       	add	r25, r24
 6c4:	92 30       	cpi	r25, 0x02	; 2
 6c6:	70 f4       	brcc	.+28     	; 0x6e4 <LCD_movecursor+0x24>
 6c8:	61 31       	cpi	r22, 0x11	; 17
 6ca:	70 f4       	brcc	.+28     	; 0x6e8 <LCD_movecursor+0x28>
 6cc:	66 23       	and	r22, r22
 6ce:	71 f0       	breq	.+28     	; 0x6ec <LCD_movecursor+0x2c>
	{
		data = 0x80;
	}
	else if (row == 1)
 6d0:	81 30       	cpi	r24, 0x01	; 1
 6d2:	19 f4       	brne	.+6      	; 0x6da <LCD_movecursor+0x1a>
	{
		data = 0x80 + coloumn - 1;
 6d4:	8f e7       	ldi	r24, 0x7F	; 127
 6d6:	86 0f       	add	r24, r22
 6d8:	0c c0       	rjmp	.+24     	; 0x6f2 <LCD_movecursor+0x32>
	}
	else if (row == 2)
 6da:	82 30       	cpi	r24, 0x02	; 2
 6dc:	49 f4       	brne	.+18     	; 0x6f0 <LCD_movecursor+0x30>
	{
		data = 0xc0 + coloumn - 1;
 6de:	8f eb       	ldi	r24, 0xBF	; 191
 6e0:	86 0f       	add	r24, r22
 6e2:	07 c0       	rjmp	.+14     	; 0x6f2 <LCD_movecursor+0x32>
{
	char data = 0;
	
	if (row > 2 || row < 1 || coloumn > 16 || coloumn < 1)
	{
		data = 0x80;
 6e4:	80 e8       	ldi	r24, 0x80	; 128
 6e6:	05 c0       	rjmp	.+10     	; 0x6f2 <LCD_movecursor+0x32>
 6e8:	80 e8       	ldi	r24, 0x80	; 128
 6ea:	03 c0       	rjmp	.+6      	; 0x6f2 <LCD_movecursor+0x32>
 6ec:	80 e8       	ldi	r24, 0x80	; 128
 6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <LCD_movecursor+0x32>
	_delay_ms(10);
}

void LCD_movecursor(c8 row, c8 coloumn)
{
	char data = 0;
 6f0:	80 e0       	ldi	r24, 0x00	; 0
	else if (row == 2)
	{
		data = 0xc0 + coloumn - 1;
	}
	
	LCD_vSend_cmd(data);
 6f2:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_vSend_cmd>
 6f6:	89 ef       	ldi	r24, 0xF9	; 249
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	01 97       	sbiw	r24, 0x01	; 1
 6fc:	f1 f7       	brne	.-4      	; 0x6fa <LCD_movecursor+0x3a>
 6fe:	00 c0       	rjmp	.+0      	; 0x700 <LCD_movecursor+0x40>
 700:	00 00       	nop
 702:	08 95       	ret

00000704 <LCD_SendStringRowCol>:
	_delay_ms(1);
}

void LCD_SendStringRowCol(u8 row, u8 col, c8 * data)
{
 704:	cf 93       	push	r28
 706:	df 93       	push	r29
 708:	ea 01       	movw	r28, r20
	LCD_movecursor(row, col);
 70a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_movecursor>
    for(counter = 0; data[counter] != '\0'; ++counter)
 70e:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <counter>
 712:	07 c0       	rjmp	.+14     	; 0x722 <LCD_SendStringRowCol+0x1e>
    {
	    LCD_vSend_char(data[counter]);
 714:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_vSend_char>
}

void LCD_SendStringRowCol(u8 row, u8 col, c8 * data)
{
	LCD_movecursor(row, col);
    for(counter = 0; data[counter] != '\0'; ++counter)
 718:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <counter>
 71c:	8f 5f       	subi	r24, 0xFF	; 255
 71e:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <counter>
 722:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <counter>
 726:	fe 01       	movw	r30, r28
 728:	e8 0f       	add	r30, r24
 72a:	f1 1d       	adc	r31, r1
 72c:	80 81       	ld	r24, Z
 72e:	81 11       	cpse	r24, r1
 730:	f1 cf       	rjmp	.-30     	; 0x714 <LCD_SendStringRowCol+0x10>
    {
	    LCD_vSend_char(data[counter]);
    }
}
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	08 95       	ret

00000738 <main>:
#include "app.h"

int main(void)
{
	Init();
 738:	0e 94 49 00 	call	0x92	; 0x92 <Init>
	Welcome_Screen();
 73c:	0e 94 5b 00 	call	0xb6	; 0xb6 <Welcome_Screen>
	IDLE_Screen();
 740:	0e 94 ad 00 	call	0x15a	; 0x15a <IDLE_Screen>
		//LCD_vSend_char('A');
		//T0delay();
		//LCD_vSend_char('B');
		//T0delay();
		
	    u8 val = UsrGetVal();
 744:	0e 94 c9 00 	call	0x192	; 0x192 <UsrGetVal>
	    
	    if (val == '#')
 748:	83 32       	cpi	r24, 0x23	; 35
 74a:	e1 f7       	brne	.-8      	; 0x744 <main+0xc>
	    {
			LCD_SendStringRowCol(2, 1, "STATE:OPERATION");
 74c:	4e e8       	ldi	r20, 0x8E	; 142
 74e:	50 e0       	ldi	r21, 0x00	; 0
 750:	61 e0       	ldi	r22, 0x01	; 1
 752:	82 e0       	ldi	r24, 0x02	; 2
 754:	0e 94 82 03 	call	0x704	; 0x704 <LCD_SendStringRowCol>
			LCD_movecursor(1, 5);
 758:	65 e0       	ldi	r22, 0x05	; 5
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_movecursor>
			//u8 value = UsrGetVal();
			//Start_Communication();
			tc72_read();
 760:	0e 94 e7 00 	call	0x1ce	; 0x1ce <tc72_read>
 764:	ef cf       	rjmp	.-34     	; 0x744 <main+0xc>

00000766 <SPI_masterInit>:
	//for (counter = 0; counter < SPI_NPINs; ++counter)
	//{
	//DIO_vsetPINDir(SPI_PORT, SPI_PINs[counter], 0xff);
	//}
	
	DDRB = (1 << MOSI) | (1 << SCK) | (1 << SS);
 766:	80 eb       	ldi	r24, 0xB0	; 176
 768:	87 bb       	out	0x17, r24	; 23
	
	/* Enable Master Mode */
	SET_BIT(SPCR, MSTR);
 76a:	8d b1       	in	r24, 0x0d	; 13
 76c:	80 61       	ori	r24, 0x10	; 16
 76e:	8d b9       	out	0x0d, r24	; 13
	/* Set clock to fosc/16*/
	SET_BIT(SPCR, SPR0);
 770:	8d b1       	in	r24, 0x0d	; 13
 772:	81 60       	ori	r24, 0x01	; 1
 774:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(SPCR, SPR1);
 776:	8d b1       	in	r24, 0x0d	; 13
 778:	82 60       	ori	r24, 0x02	; 2
 77a:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(SPCR, CPHA);
 77c:	8d b1       	in	r24, 0x0d	; 13
 77e:	84 60       	ori	r24, 0x04	; 4
 780:	8d b9       	out	0x0d, r24	; 13
	/* Enable SPI */
	SET_BIT(SPCR, SPE);
 782:	8d b1       	in	r24, 0x0d	; 13
 784:	80 64       	ori	r24, 0x40	; 64
 786:	8d b9       	out	0x0d, r24	; 13
	/* Enable interrupt */
	SET_BIT(SPCR, SPIE);
 788:	8d b1       	in	r24, 0x0d	; 13
 78a:	80 68       	ori	r24, 0x80	; 128
 78c:	8d b9       	out	0x0d, r24	; 13
 78e:	08 95       	ret

00000790 <SPI_masterTransmit>:
}

void SPI_masterTransmit(char data)
{
	/* Start the Transmission */
	SPDR = data;
 790:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for Completion */
	while(!(SPSR & (1 << SPIF)));
 792:	77 9b       	sbis	0x0e, 7	; 14
 794:	fe cf       	rjmp	.-4      	; 0x792 <SPI_masterTransmit+0x2>
}
 796:	08 95       	ret

00000798 <SPI_masterReceive>:

char SPI_masterReceive(void)
{
	/* wait for the SPI buffer's full */
	while(!(SPSR & (1 << SPIF)));
 798:	77 9b       	sbis	0x0e, 7	; 14
 79a:	fe cf       	rjmp	.-4      	; 0x798 <SPI_masterReceive>
	/* return SPI buffer */
	return SPDR;
 79c:	8f b1       	in	r24, 0x0f	; 15
}
 79e:	08 95       	ret

000007a0 <TC72_Init>:

void TC72_Init(void)
{
	SET_BIT(PORTB, 4);
 7a0:	88 b3       	in	r24, 0x18	; 24
 7a2:	80 61       	ori	r24, 0x10	; 16
 7a4:	88 bb       	out	0x18, r24	; 24
	/* Select control register */
	SPI_masterTransmit(0x80);
 7a6:	80 e8       	ldi	r24, 0x80	; 128
 7a8:	0e 94 c8 03 	call	0x790	; 0x790 <SPI_masterTransmit>
	
	/* Select Continuous temperature conversion */
	SPI_masterTransmit(0x40);
 7ac:	80 e4       	ldi	r24, 0x40	; 64
 7ae:	0e 94 c8 03 	call	0x790	; 0x790 <SPI_masterTransmit>
	CLR_BIT(PORTB, 4);
 7b2:	88 b3       	in	r24, 0x18	; 24
 7b4:	8f 7e       	andi	r24, 0xEF	; 239
 7b6:	88 bb       	out	0x18, r24	; 24
 7b8:	8b e7       	ldi	r24, 0x7B	; 123
 7ba:	92 e9       	ldi	r25, 0x92	; 146
 7bc:	01 97       	sbiw	r24, 0x01	; 1
 7be:	f1 f7       	brne	.-4      	; 0x7bc <TC72_Init+0x1c>
 7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <TC72_Init+0x22>
 7c2:	00 00       	nop
 7c4:	08 95       	ret

000007c6 <itoa>:
 7c6:	45 32       	cpi	r20, 0x25	; 37
 7c8:	51 05       	cpc	r21, r1
 7ca:	20 f4       	brcc	.+8      	; 0x7d4 <itoa+0xe>
 7cc:	42 30       	cpi	r20, 0x02	; 2
 7ce:	10 f0       	brcs	.+4      	; 0x7d4 <itoa+0xe>
 7d0:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__itoa_ncheck>
 7d4:	fb 01       	movw	r30, r22
 7d6:	10 82       	st	Z, r1
 7d8:	cb 01       	movw	r24, r22
 7da:	08 95       	ret

000007dc <__itoa_ncheck>:
 7dc:	bb 27       	eor	r27, r27
 7de:	4a 30       	cpi	r20, 0x0A	; 10
 7e0:	31 f4       	brne	.+12     	; 0x7ee <__itoa_ncheck+0x12>
 7e2:	99 23       	and	r25, r25
 7e4:	22 f4       	brpl	.+8      	; 0x7ee <__itoa_ncheck+0x12>
 7e6:	bd e2       	ldi	r27, 0x2D	; 45
 7e8:	90 95       	com	r25
 7ea:	81 95       	neg	r24
 7ec:	9f 4f       	sbci	r25, 0xFF	; 255
 7ee:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__utoa_common>

000007f2 <__utoa_ncheck>:
 7f2:	bb 27       	eor	r27, r27

000007f4 <__utoa_common>:
 7f4:	fb 01       	movw	r30, r22
 7f6:	55 27       	eor	r21, r21
 7f8:	aa 27       	eor	r26, r26
 7fa:	88 0f       	add	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	aa 1f       	adc	r26, r26
 800:	a4 17       	cp	r26, r20
 802:	10 f0       	brcs	.+4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 804:	a4 1b       	sub	r26, r20
 806:	83 95       	inc	r24
 808:	50 51       	subi	r21, 0x10	; 16
 80a:	b9 f7       	brne	.-18     	; 0x7fa <__utoa_common+0x6>
 80c:	a0 5d       	subi	r26, 0xD0	; 208
 80e:	aa 33       	cpi	r26, 0x3A	; 58
 810:	08 f0       	brcs	.+2      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 812:	a9 5d       	subi	r26, 0xD9	; 217
 814:	a1 93       	st	Z+, r26
 816:	00 97       	sbiw	r24, 0x00	; 0
 818:	79 f7       	brne	.-34     	; 0x7f8 <__utoa_common+0x4>
 81a:	b1 11       	cpse	r27, r1
 81c:	b1 93       	st	Z+, r27
 81e:	11 92       	st	Z+, r1
 820:	cb 01       	movw	r24, r22
 822:	0c 94 13 04 	jmp	0x826	; 0x826 <strrev>

00000826 <strrev>:
 826:	dc 01       	movw	r26, r24
 828:	fc 01       	movw	r30, r24
 82a:	67 2f       	mov	r22, r23
 82c:	71 91       	ld	r23, Z+
 82e:	77 23       	and	r23, r23
 830:	e1 f7       	brne	.-8      	; 0x82a <strrev+0x4>
 832:	32 97       	sbiw	r30, 0x02	; 2
 834:	04 c0       	rjmp	.+8      	; 0x83e <strrev+0x18>
 836:	7c 91       	ld	r23, X
 838:	6d 93       	st	X+, r22
 83a:	70 83       	st	Z, r23
 83c:	62 91       	ld	r22, -Z
 83e:	ae 17       	cp	r26, r30
 840:	bf 07       	cpc	r27, r31
 842:	c8 f3       	brcs	.-14     	; 0x836 <strrev+0x10>
 844:	08 95       	ret

00000846 <_exit>:
 846:	f8 94       	cli

00000848 <__stop_program>:
 848:	ff cf       	rjmp	.-2      	; 0x848 <__stop_program>
