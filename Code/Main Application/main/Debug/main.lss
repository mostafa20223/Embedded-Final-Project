
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000109a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  0000109a  0000112e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000b8  008000b8  00001186  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001186  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024e8  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f3d  00000000  00000000  00003954  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016bc  00000000  00000000  00004891  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004cc  00000000  00000000  00005f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000835  00000000  00000000  0000641c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000147c  00000000  00000000  00006c51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  000080cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 ac 02 	jmp	0x558	; 0x558 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3b       	cpi	r26, 0xB8	; 184
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 eb       	ldi	r26, 0xB8	; 184
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3c       	cpi	r26, 0xCC	; 204
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cd 05 	call	0xb9a	; 0xb9a <main>
      8a:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Init>:
static char voltModule = 0;
static char overHeating = 0;

void Init(void)
{
	SPI_masterInit();
      92:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SPI_masterInit>
	TC72_Init();
      96:	0e 94 ba 05 	call	0xb74	; 0xb74 <TC72_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      9a:	2f ef       	ldi	r18, 0xFF	; 255
      9c:	82 e5       	ldi	r24, 0x52	; 82
      9e:	97 e0       	ldi	r25, 0x07	; 7
      a0:	21 50       	subi	r18, 0x01	; 1
      a2:	80 40       	sbci	r24, 0x00	; 0
      a4:	90 40       	sbci	r25, 0x00	; 0
      a6:	e1 f7       	brne	.-8      	; 0xa0 <Init+0xe>
      a8:	00 c0       	rjmp	.+0      	; 0xaa <Init+0x18>
      aa:	00 00       	nop
	_delay_ms(150);
	initADC0();
      ac:	0e 94 54 04 	call	0x8a8	; 0x8a8 <initADC0>
	InitPWM();
      b0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <InitPWM>
      b4:	08 95       	ret

000000b6 <Welcome_Screen>:
}

void Welcome_Screen(void)
{
	LCD_vInit();
      b6:	0e 94 92 03 	call	0x724	; 0x724 <LCD_vInit>
	for (shift = 1; shift < 16; ++shift)
      ba:	81 e0       	ldi	r24, 0x01	; 1
      bc:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <shift>
      c0:	1b c0       	rjmp	.+54     	; 0xf8 <Welcome_Screen+0x42>
	{
		LCD_clearscreen();
      c2:	0e 94 28 04 	call	0x850	; 0x850 <LCD_clearscreen>
		LCD_movecursor(1, shift);
      c6:	60 91 ca 00 	lds	r22, 0x00CA	; 0x8000ca <shift>
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	0e 94 32 04 	call	0x864	; 0x864 <LCD_movecursor>
		LCD_vSend_string("WELCOME");
      d0:	80 e6       	ldi	r24, 0x60	; 96
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	0e 94 10 04 	call	0x820	; 0x820 <LCD_vSend_string>
      d8:	2f ef       	ldi	r18, 0xFF	; 255
      da:	84 e6       	ldi	r24, 0x64	; 100
      dc:	94 e0       	ldi	r25, 0x04	; 4
      de:	21 50       	subi	r18, 0x01	; 1
      e0:	80 40       	sbci	r24, 0x00	; 0
      e2:	90 40       	sbci	r25, 0x00	; 0
      e4:	e1 f7       	brne	.-8      	; 0xde <Welcome_Screen+0x28>
      e6:	00 c0       	rjmp	.+0      	; 0xe8 <Welcome_Screen+0x32>
      e8:	00 00       	nop
		_delay_ms(90);
		LCD_clearscreen();
      ea:	0e 94 28 04 	call	0x850	; 0x850 <LCD_clearscreen>
}

void Welcome_Screen(void)
{
	LCD_vInit();
	for (shift = 1; shift < 16; ++shift)
      ee:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <shift>
      f2:	8f 5f       	subi	r24, 0xFF	; 255
      f4:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <shift>
      f8:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <shift>
      fc:	80 31       	cpi	r24, 0x10	; 16
      fe:	08 f3       	brcs	.-62     	; 0xc2 <Welcome_Screen+0xc>
		LCD_vSend_string("WELCOME");
		_delay_ms(90);
		LCD_clearscreen();
	}

	for (shift = 16; shift > 0; --shift)
     100:	80 e1       	ldi	r24, 0x10	; 16
     102:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <shift>
     106:	1b c0       	rjmp	.+54     	; 0x13e <Welcome_Screen+0x88>
	{
		LCD_clearscreen();
     108:	0e 94 28 04 	call	0x850	; 0x850 <LCD_clearscreen>
		LCD_movecursor(1, shift);
     10c:	60 91 ca 00 	lds	r22, 0x00CA	; 0x8000ca <shift>
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	0e 94 32 04 	call	0x864	; 0x864 <LCD_movecursor>
		LCD_vSend_string("WELCOME");
     116:	80 e6       	ldi	r24, 0x60	; 96
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	0e 94 10 04 	call	0x820	; 0x820 <LCD_vSend_string>
     11e:	2f ef       	ldi	r18, 0xFF	; 255
     120:	84 e6       	ldi	r24, 0x64	; 100
     122:	94 e0       	ldi	r25, 0x04	; 4
     124:	21 50       	subi	r18, 0x01	; 1
     126:	80 40       	sbci	r24, 0x00	; 0
     128:	90 40       	sbci	r25, 0x00	; 0
     12a:	e1 f7       	brne	.-8      	; 0x124 <Welcome_Screen+0x6e>
     12c:	00 c0       	rjmp	.+0      	; 0x12e <Welcome_Screen+0x78>
     12e:	00 00       	nop
		_delay_ms(90);
		LCD_clearscreen();
     130:	0e 94 28 04 	call	0x850	; 0x850 <LCD_clearscreen>
		LCD_vSend_string("WELCOME");
		_delay_ms(90);
		LCD_clearscreen();
	}

	for (shift = 16; shift > 0; --shift)
     134:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <shift>
     138:	81 50       	subi	r24, 0x01	; 1
     13a:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <shift>
     13e:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <shift>
     142:	81 11       	cpse	r24, r1
     144:	e1 cf       	rjmp	.-62     	; 0x108 <Welcome_Screen+0x52>
     146:	2f ef       	ldi	r18, 0xFF	; 255
     148:	82 e5       	ldi	r24, 0x52	; 82
     14a:	97 e0       	ldi	r25, 0x07	; 7
     14c:	21 50       	subi	r18, 0x01	; 1
     14e:	80 40       	sbci	r24, 0x00	; 0
     150:	90 40       	sbci	r25, 0x00	; 0
     152:	e1 f7       	brne	.-8      	; 0x14c <Welcome_Screen+0x96>
     154:	00 c0       	rjmp	.+0      	; 0x156 <Welcome_Screen+0xa0>
     156:	00 00       	nop
		_delay_ms(90);
		LCD_clearscreen();
	}
	
	_delay_ms(150);
	LCD_clearscreen();
     158:	0e 94 28 04 	call	0x850	; 0x850 <LCD_clearscreen>
     15c:	08 95       	ret

0000015e <IDLE_Screen>:
}

void IDLE_Screen(void)
{
	LCD_vInit();
     15e:	0e 94 92 03 	call	0x724	; 0x724 <LCD_vInit>
     162:	2f ef       	ldi	r18, 0xFF	; 255
     164:	89 ef       	ldi	r24, 0xF9	; 249
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	21 50       	subi	r18, 0x01	; 1
     16a:	80 40       	sbci	r24, 0x00	; 0
     16c:	90 40       	sbci	r25, 0x00	; 0
     16e:	e1 f7       	brne	.-8      	; 0x168 <IDLE_Screen+0xa>
     170:	00 c0       	rjmp	.+0      	; 0x172 <IDLE_Screen+0x14>
     172:	00 00       	nop
	_delay_ms(20);
	LCD_movecursor(1, 1);
     174:	61 e0       	ldi	r22, 0x01	; 1
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	0e 94 32 04 	call	0x864	; 0x864 <LCD_movecursor>
	LCD_vSend_string("SET:25");
     17c:	88 e6       	ldi	r24, 0x68	; 104
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 10 04 	call	0x820	; 0x820 <LCD_vSend_string>
	LCD_movecursor(1, 11);
     184:	6b e0       	ldi	r22, 0x0B	; 11
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	0e 94 32 04 	call	0x864	; 0x864 <LCD_movecursor>
	LCD_vSend_string("CRT:");
     18c:	8f e6       	ldi	r24, 0x6F	; 111
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	0e 94 10 04 	call	0x820	; 0x820 <LCD_vSend_string>
	LCD_movecursor(2, 1);
     194:	61 e0       	ldi	r22, 0x01	; 1
     196:	82 e0       	ldi	r24, 0x02	; 2
     198:	0e 94 32 04 	call	0x864	; 0x864 <LCD_movecursor>
	LCD_vSend_string("STATE:STANDBY");
     19c:	84 e7       	ldi	r24, 0x74	; 116
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0e 94 10 04 	call	0x820	; 0x820 <LCD_vSend_string>
     1a4:	08 95       	ret

000001a6 <UsrGetVal>:
}
	
void UsrGetVal(void)
{
     1a6:	cf 93       	push	r28
	keypad_vInit();
     1a8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <keypad_vInit>
	u8 val = 0;
	static const u8 col = 5;
	static u8 counter = 0;
	
	LCD_movecursor(1, (counter + col));
     1ac:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <__data_end>
     1b0:	6b 5f       	subi	r22, 0xFB	; 251
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	0e 94 32 04 	call	0x864	; 0x864 <LCD_movecursor>
	val = getKey();
     1b8:	0e 94 49 03 	call	0x692	; 0x692 <getKey>
     1bc:	c8 2f       	mov	r28, r24
	
	if (val != '*' && val != '#')
     1be:	8a 32       	cpi	r24, 0x2A	; 42
     1c0:	d9 f0       	breq	.+54     	; 0x1f8 <UsrGetVal+0x52>
     1c2:	83 32       	cpi	r24, 0x23	; 35
     1c4:	c9 f0       	breq	.+50     	; 0x1f8 <UsrGetVal+0x52>
	{
		LCD_vSend_char(val);
     1c6:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_vSend_char>
     1ca:	2f ef       	ldi	r18, 0xFF	; 255
     1cc:	81 ee       	ldi	r24, 0xE1	; 225
     1ce:	94 e0       	ldi	r25, 0x04	; 4
     1d0:	21 50       	subi	r18, 0x01	; 1
     1d2:	80 40       	sbci	r24, 0x00	; 0
     1d4:	90 40       	sbci	r25, 0x00	; 0
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <UsrGetVal+0x2a>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <UsrGetVal+0x34>
     1da:	00 00       	nop
		_delay_ms(100);
		temp[counter] = val;
     1dc:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end>
     1e0:	e8 2f       	mov	r30, r24
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	ec 53       	subi	r30, 0x3C	; 60
     1e6:	ff 4f       	sbci	r31, 0xFF	; 255
     1e8:	c0 83       	st	Z, r28
		counter = counter + 1;
     1ea:	8f 5f       	subi	r24, 0xFF	; 255
		counter = counter % 2;
     1ec:	81 70       	andi	r24, 0x01	; 1
     1ee:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__data_end>
		UsrGetVal();
     1f2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UsrGetVal>
     1f6:	10 c0       	rjmp	.+32     	; 0x218 <UsrGetVal+0x72>
	}
	else
	{
		SetTemp = atoi(temp);
     1f8:	84 ec       	ldi	r24, 0xC4	; 196
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <atoi>
     200:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <SetTemp+0x1>
     204:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <SetTemp>
		LCD_movecursor(2, 1);
     208:	61 e0       	ldi	r22, 0x01	; 1
     20a:	82 e0       	ldi	r24, 0x02	; 2
     20c:	0e 94 32 04 	call	0x864	; 0x864 <LCD_movecursor>
		LCD_vSend_string("STATE:OPERATION");
     210:	82 e8       	ldi	r24, 0x82	; 130
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 10 04 	call	0x820	; 0x820 <LCD_vSend_string>
	}
}
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <tc72_read>:
    c8 MSB = 0;
	
	while(1)
	{
		/* MSB */
		SPI_PORT |= (1 << SS);
     21c:	88 b3       	in	r24, 0x18	; 24
     21e:	80 61       	ori	r24, 0x10	; 16
     220:	88 bb       	out	0x18, r24	; 24
		SPI_masterTransmit(0x02);            /* Read will be from MSB temperature register */
     222:	82 e0       	ldi	r24, 0x02	; 2
     224:	0e 94 b2 05 	call	0xb64	; 0xb64 <SPI_masterTransmit>
		SPI_masterTransmit(0x00);
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	0e 94 b2 05 	call	0xb64	; 0xb64 <SPI_masterTransmit>
		SPI_PORT &= ~(1 << SS);
     22e:	88 b3       	in	r24, 0x18	; 24
     230:	8f 7e       	andi	r24, 0xEF	; 239
     232:	88 bb       	out	0x18, r24	; 24
     234:	8f e9       	ldi	r24, 0x9F	; 159
     236:	9f e0       	ldi	r25, 0x0F	; 15
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <tc72_read+0x1c>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <tc72_read+0x22>
     23e:	00 00       	nop

		_delay_ms(1);
		MSB = SPI_masterReceive();
     240:	0e 94 b6 05 	call	0xb6c	; 0xb6c <SPI_masterReceive>
		
		return MSB;
	}
}
     244:	08 95       	ret

00000246 <CRT_Temp>:

void CRT_Temp(void)
{
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	00 d0       	rcall	.+0      	; 0x24c <CRT_Temp+0x6>
     24c:	cd b7       	in	r28, 0x3d	; 61
     24e:	de b7       	in	r29, 0x3e	; 62
	u8 value = 0;

	c8 CurrentTempString[2];
	c8 MSB = tc72_read();
     250:	0e 94 0e 01 	call	0x21c	; 0x21c <tc72_read>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     254:	4a e0       	ldi	r20, 0x0A	; 10
     256:	be 01       	movw	r22, r28
     258:	6f 5f       	subi	r22, 0xFF	; 255
     25a:	7f 4f       	sbci	r23, 0xFF	; 255
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 0e 08 	call	0x101c	; 0x101c <__itoa_ncheck>
	itoa(MSB, CurrentTempString, 10);
		
	LCD_movecursor(1, 15);
     262:	6f e0       	ldi	r22, 0x0F	; 15
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	0e 94 32 04 	call	0x864	; 0x864 <LCD_movecursor>
	LCD_vSend_string(CurrentTempString);
     26a:	ce 01       	movw	r24, r28
     26c:	01 96       	adiw	r24, 0x01	; 1
     26e:	0e 94 10 04 	call	0x820	; 0x820 <LCD_vSend_string>
	CrtTemp = atoi(CurrentTempString);
     272:	ce 01       	movw	r24, r28
     274:	01 96       	adiw	r24, 0x01	; 1
     276:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <atoi>
     27a:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <CrtTemp+0x1>
     27e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <CrtTemp>
}
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	08 95       	ret

0000028c <getCurrentTemp>:

u16 getCurrentTemp(void)
{
	return CrtTemp;
}
     28c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <CrtTemp>
     290:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <CrtTemp+0x1>
     294:	08 95       	ret

00000296 <getSetTemp>:

u16 getSetTemp(void)
{
	return SetTemp;
}
     296:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <SetTemp>
     29a:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <SetTemp+0x1>
     29e:	08 95       	ret

000002a0 <GetVt>:

float64_t GetVt(void)
{
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
	float64_t Vt = 0.0;
	Vt = (float64_t) ((getSetTemp() - getCurrentTemp()) / 100.0) * 10.0;
     2a4:	0e 94 4b 01 	call	0x296	; 0x296 <getSetTemp>
     2a8:	ec 01       	movw	r28, r24
     2aa:	0e 94 46 01 	call	0x28c	; 0x28c <getCurrentTemp>
     2ae:	be 01       	movw	r22, r28
     2b0:	68 1b       	sub	r22, r24
     2b2:	79 0b       	sbc	r23, r25
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__floatunsisf>
     2bc:	20 e0       	ldi	r18, 0x00	; 0
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	48 ec       	ldi	r20, 0xC8	; 200
     2c2:	52 e4       	ldi	r21, 0x42	; 66
     2c4:	0e 94 45 06 	call	0xc8a	; 0xc8a <__divsf3>
     2c8:	20 e0       	ldi	r18, 0x00	; 0
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	40 e2       	ldi	r20, 0x20	; 32
     2ce:	51 e4       	ldi	r21, 0x41	; 65
     2d0:	0e 94 74 07 	call	0xee8	; 0xee8 <__mulsf3>
	return Vt;
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	08 95       	ret

000002da <getADCVal>:

float64_t getADCVal(void)
{
	u32 result = adc_read();
     2da:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <adc_read>
	float64_t Vr = sampleToVolts(result);
     2de:	0e 94 65 04 	call	0x8ca	; 0x8ca <sampleToVolts>
	
	return Vr;
}
     2e2:	08 95       	ret

000002e4 <drivePWM>:

void drivePWM(void)
{
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
	float64_t Vt = GetVt();
     2ec:	0e 94 50 01 	call	0x2a0	; 0x2a0 <GetVt>
     2f0:	6b 01       	movw	r12, r22
     2f2:	7c 01       	movw	r14, r24
	float64_t Vr = getADCVal();
     2f4:	0e 94 6d 01 	call	0x2da	; 0x2da <getADCVal>
	SetPWMOutput(Vr, Vt);
     2f8:	a7 01       	movw	r20, r14
     2fa:	96 01       	movw	r18, r12
     2fc:	0e 94 db 02 	call	0x5b6	; 0x5b6 <SetPWMOutput>
}
     300:	ff 90       	pop	r15
     302:	ef 90       	pop	r14
     304:	df 90       	pop	r13
     306:	cf 90       	pop	r12
     308:	08 95       	ret

0000030a <setCountMinutes>:

// FLAG setter
void setCountMinutes(void)
{
	countMinutes = 1;
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <countMinutes>
     310:	08 95       	ret

00000312 <setCheckTemp>:
}
void setCheckTemp(void)
{
	checkTemp = 1;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <checkTemp>
     318:	08 95       	ret

0000031a <setVoltModule>:
}
void setVoltModule(void)
{
	voltModule = 1;
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <voltModule>
     320:	08 95       	ret

00000322 <setOverHeating>:
}
void setOverHeating(void)
{
	overHeating = 1;
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <overHeating>
     328:	08 95       	ret

0000032a <clearCountMinutes>:
}

// FLAG clear
void clearCountMinutes(void)
{
	countMinutes = 0;
     32a:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <countMinutes>
	minute_counter = 0;
     32e:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <minute_counter+0x1>
     332:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <minute_counter>
	minutes_elapsed = 0;
     336:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <minutes_elapsed>
     33a:	08 95       	ret

0000033c <clearCheckTemp>:
}
void clearCheckTemp(void)
{
	checkTemp = 0;
     33c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <checkTemp>
     340:	08 95       	ret

00000342 <clearVoltModule>:
}
void clearVoltModule(void)
{
	voltModule = 0;
     342:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <voltModule>
     346:	08 95       	ret

00000348 <clearOverHeating>:
}
void clearOverHeating(void)
{
	overHeating = 0;
     348:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <overHeating>
     34c:	08 95       	ret

0000034e <setErrorFlag>:
	}
}

void setErrorFlag(void)
{
	errorFlag = 1;
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <errorFlag>
     354:	08 95       	ret

00000356 <setState>:
}

void setState(void)
{
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
	switch (curState)
     35a:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <curState>
     35e:	81 30       	cpi	r24, 0x01	; 1
     360:	a9 f0       	breq	.+42     	; 0x38c <setState+0x36>
     362:	38 f0       	brcs	.+14     	; 0x372 <setState+0x1c>
     364:	82 30       	cpi	r24, 0x02	; 2
     366:	09 f4       	brne	.+2      	; 0x36a <setState+0x14>
     368:	6a c0       	rjmp	.+212    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     36a:	83 30       	cpi	r24, 0x03	; 3
     36c:	09 f4       	brne	.+2      	; 0x370 <setState+0x1a>
     36e:	74 c0       	rjmp	.+232    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     370:	7f c0       	rjmp	.+254    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
	{
		case STANDBY:
		{
			clearVoltModule();
     372:	0e 94 a1 01 	call	0x342	; 0x342 <clearVoltModule>
			clearCheckTemp();
     376:	0e 94 9e 01 	call	0x33c	; 0x33c <clearCheckTemp>

			if (getKey() == '#')
     37a:	0e 94 49 03 	call	0x692	; 0x692 <getKey>
     37e:	83 32       	cpi	r24, 0x23	; 35
     380:	09 f0       	breq	.+2      	; 0x384 <setState+0x2e>
     382:	76 c0       	rjmp	.+236    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
			{
				curState = OPERATION;
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <curState>
     38a:	72 c0       	rjmp	.+228    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
			break;
		}

		case OPERATION:
		{
			LCD_movecursor(2, 1);
     38c:	61 e0       	ldi	r22, 0x01	; 1
     38e:	82 e0       	ldi	r24, 0x02	; 2
     390:	0e 94 32 04 	call	0x864	; 0x864 <LCD_movecursor>
			LCD_vSend_string("STATE:OPERATION");
     394:	82 e8       	ldi	r24, 0x82	; 130
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 10 04 	call	0x820	; 0x820 <LCD_vSend_string>
			setCheckTemp();
     39c:	0e 94 89 01 	call	0x312	; 0x312 <setCheckTemp>
			setVoltModule();
     3a0:	0e 94 8d 01 	call	0x31a	; 0x31a <setVoltModule>

			u16 currentTemp = getCurrentTemp();
     3a4:	0e 94 46 01 	call	0x28c	; 0x28c <getCurrentTemp>
     3a8:	ec 01       	movw	r28, r24
			u16 setTemp = getSetTemp();
     3aa:	0e 94 4b 01 	call	0x296	; 0x296 <getSetTemp>
			if ((currentTemp > setTemp) && ((currentTemp - setTemp) <= 5))
     3ae:	8c 17       	cp	r24, r28
     3b0:	9d 07       	cpc	r25, r29
     3b2:	70 f4       	brcc	.+28     	; 0x3d0 <setState+0x7a>
     3b4:	9e 01       	movw	r18, r28
     3b6:	28 1b       	sub	r18, r24
     3b8:	39 0b       	sbc	r19, r25
     3ba:	26 30       	cpi	r18, 0x06	; 6
     3bc:	31 05       	cpc	r19, r1
     3be:	40 f4       	brcc	.+16     	; 0x3d0 <setState+0x7a>
			{
				curState = NORMAL;
     3c0:	82 e0       	ldi	r24, 0x02	; 2
     3c2:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <curState>
				clearCountMinutes();
     3c6:	0e 94 95 01 	call	0x32a	; 0x32a <clearCountMinutes>
				clearOverHeating();
     3ca:	0e 94 a4 01 	call	0x348	; 0x348 <clearOverHeating>
     3ce:	29 c0       	rjmp	.+82     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			}
			else if ((currentTemp < setTemp) && ((setTemp - currentTemp) <= 5))
     3d0:	c8 17       	cp	r28, r24
     3d2:	d9 07       	cpc	r29, r25
     3d4:	70 f4       	brcc	.+28     	; 0x3f2 <setState+0x9c>
     3d6:	9c 01       	movw	r18, r24
     3d8:	2c 1b       	sub	r18, r28
     3da:	3d 0b       	sbc	r19, r29
     3dc:	26 30       	cpi	r18, 0x06	; 6
     3de:	31 05       	cpc	r19, r1
     3e0:	40 f4       	brcc	.+16     	; 0x3f2 <setState+0x9c>
			{
				curState = NORMAL;
     3e2:	82 e0       	ldi	r24, 0x02	; 2
     3e4:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <curState>
				clearCountMinutes();
     3e8:	0e 94 95 01 	call	0x32a	; 0x32a <clearCountMinutes>
				clearOverHeating();
     3ec:	0e 94 a4 01 	call	0x348	; 0x348 <clearOverHeating>
     3f0:	18 c0       	rjmp	.+48     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			}
			else if ((currentTemp > setTemp) && ((currentTemp - setTemp) > 10))
     3f2:	8c 17       	cp	r24, r28
     3f4:	9d 07       	cpc	r25, r29
     3f6:	50 f4       	brcc	.+20     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     3f8:	9e 01       	movw	r18, r28
     3fa:	28 1b       	sub	r18, r24
     3fc:	39 0b       	sbc	r19, r25
     3fe:	2b 30       	cpi	r18, 0x0B	; 11
     400:	31 05       	cpc	r19, r1
     402:	20 f0       	brcs	.+8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			{
				curState = ERROR;
     404:	83 e0       	ldi	r24, 0x03	; 3
     406:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <curState>
     40a:	0b c0       	rjmp	.+22     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			}
			else if ((setTemp > currentTemp) && ((setTemp - currentTemp) > 5))
     40c:	c8 17       	cp	r28, r24
     40e:	d9 07       	cpc	r29, r25
     410:	40 f4       	brcc	.+16     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     412:	8c 1b       	sub	r24, r28
     414:	9d 0b       	sbc	r25, r29
     416:	06 97       	sbiw	r24, 0x06	; 6
     418:	20 f0       	brcs	.+8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			{
				setCountMinutes();
     41a:	0e 94 85 01 	call	0x30a	; 0x30a <setCountMinutes>
				setOverHeating();
     41e:	0e 94 91 01 	call	0x322	; 0x322 <setOverHeating>
			}

			if (getKey() == '#')
     422:	0e 94 49 03 	call	0x692	; 0x692 <getKey>
     426:	83 32       	cpi	r24, 0x23	; 35
     428:	11 f4       	brne	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
			{
				curState = STANDBY;
     42a:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <curState>
			}
			if (errorFlag)
     42e:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <errorFlag>
     432:	88 23       	and	r24, r24
     434:	e9 f0       	breq	.+58     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
			{
				curState = ERROR;
     436:	83 e0       	ldi	r24, 0x03	; 3
     438:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <curState>
     43c:	19 c0       	rjmp	.+50     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
			break;
		}

		case NORMAL:
		{
			LCD_movecursor(2, 1);
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	82 e0       	ldi	r24, 0x02	; 2
     442:	0e 94 32 04 	call	0x864	; 0x864 <LCD_movecursor>
			LCD_vSend_string("STATE:NORMAL");
     446:	82 e9       	ldi	r24, 0x92	; 146
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 10 04 	call	0x820	; 0x820 <LCD_vSend_string>
			setCheckTemp();
     44e:	0e 94 89 01 	call	0x312	; 0x312 <setCheckTemp>
			clearVoltModule();
     452:	0e 94 a1 01 	call	0x342	; 0x342 <clearVoltModule>
			break;
     456:	0c c0       	rjmp	.+24     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
		}

		case ERROR:
		{
			LCD_movecursor(2, 1);
     458:	61 e0       	ldi	r22, 0x01	; 1
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	0e 94 32 04 	call	0x864	; 0x864 <LCD_movecursor>
			LCD_vSend_string("STATE:ERROR");
     460:	8f e9       	ldi	r24, 0x9F	; 159
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 10 04 	call	0x820	; 0x820 <LCD_vSend_string>
			clearCheckTemp();
     468:	0e 94 9e 01 	call	0x33c	; 0x33c <clearCheckTemp>
			clearVoltModule();
     46c:	0e 94 a1 01 	call	0x342	; 0x342 <clearVoltModule>
		}
		
		default:
			break;
	}
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <schedule>:
	schedule();
}

void schedule(void)
{
	ms_elapsed += 1;
     476:	40 91 c0 00 	lds	r20, 0x00C0	; 0x8000c0 <ms_elapsed>
     47a:	50 91 c1 00 	lds	r21, 0x00C1	; 0x8000c1 <ms_elapsed+0x1>
     47e:	4f 5f       	subi	r20, 0xFF	; 255
     480:	5f 4f       	sbci	r21, 0xFF	; 255
     482:	50 93 c1 00 	sts	0x00C1, r21	; 0x8000c1 <ms_elapsed+0x1>
     486:	40 93 c0 00 	sts	0x00C0, r20	; 0x8000c0 <ms_elapsed>

	if (ms_elapsed % 50)
     48a:	9a 01       	movw	r18, r20
     48c:	36 95       	lsr	r19
     48e:	27 95       	ror	r18
     490:	ab e7       	ldi	r26, 0x7B	; 123
     492:	b4 e1       	ldi	r27, 0x14	; 20
     494:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__umulhisi3>
     498:	96 95       	lsr	r25
     49a:	87 95       	ror	r24
     49c:	62 e3       	ldi	r22, 0x32	; 50
     49e:	68 9f       	mul	r22, r24
     4a0:	90 01       	movw	r18, r0
     4a2:	69 9f       	mul	r22, r25
     4a4:	30 0d       	add	r19, r0
     4a6:	11 24       	eor	r1, r1
     4a8:	42 17       	cp	r20, r18
     4aa:	53 07       	cpc	r21, r19
     4ac:	11 f0       	breq	.+4      	; 0x4b2 <schedule+0x3c>
	{
		setState();
     4ae:	0e 94 ab 01 	call	0x356	; 0x356 <setState>
	}
	if (ms_elapsed % 100)
     4b2:	40 91 c0 00 	lds	r20, 0x00C0	; 0x8000c0 <ms_elapsed>
     4b6:	50 91 c1 00 	lds	r21, 0x00C1	; 0x8000c1 <ms_elapsed+0x1>
	{
		//fnc_array[1](3);
	}

	if (ms_elapsed % 200)
     4ba:	9a 01       	movw	r18, r20
     4bc:	36 95       	lsr	r19
     4be:	27 95       	ror	r18
     4c0:	36 95       	lsr	r19
     4c2:	27 95       	ror	r18
     4c4:	36 95       	lsr	r19
     4c6:	27 95       	ror	r18
     4c8:	ab e7       	ldi	r26, 0x7B	; 123
     4ca:	b4 e1       	ldi	r27, 0x14	; 20
     4cc:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__umulhisi3>
     4d0:	96 95       	lsr	r25
     4d2:	87 95       	ror	r24
     4d4:	68 ec       	ldi	r22, 0xC8	; 200
     4d6:	68 9f       	mul	r22, r24
     4d8:	90 01       	movw	r18, r0
     4da:	69 9f       	mul	r22, r25
     4dc:	30 0d       	add	r19, r0
     4de:	11 24       	eor	r1, r1
     4e0:	42 17       	cp	r20, r18
     4e2:	53 07       	cpc	r21, r19
     4e4:	51 f0       	breq	.+20     	; 0x4fa <schedule+0x84>
	{
		if (checkTemp)
     4e6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <checkTemp>
     4ea:	81 11       	cpse	r24, r1
		{
			CRT_Temp();
     4ec:	0e 94 23 01 	call	0x246	; 0x246 <CRT_Temp>
		}
		if (voltModule)
     4f0:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <voltModule>
     4f4:	81 11       	cpse	r24, r1
		{
			drivePWM();
     4f6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <drivePWM>
		}

	}

	if (minutes_elapsed % 3)
     4fa:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <minutes_elapsed>
     4fe:	8b ea       	ldi	r24, 0xAB	; 171
     500:	98 9f       	mul	r25, r24
     502:	81 2d       	mov	r24, r1
     504:	11 24       	eor	r1, r1
     506:	86 95       	lsr	r24
     508:	28 2f       	mov	r18, r24
     50a:	22 0f       	add	r18, r18
     50c:	82 0f       	add	r24, r18
     50e:	98 17       	cp	r25, r24
     510:	29 f0       	breq	.+10     	; 0x51c <schedule+0xa6>
	{
		if (overHeating)
     512:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <overHeating>
     516:	81 11       	cpse	r24, r1
		{
			setErrorFlag();
     518:	0e 94 a7 01 	call	0x34e	; 0x34e <setErrorFlag>
		}
	}

	if (countMinutes)
     51c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <countMinutes>
     520:	88 23       	and	r24, r24
     522:	49 f0       	breq	.+18     	; 0x536 <schedule+0xc0>
	{
		minute_counter += 1;
     524:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <minute_counter>
     528:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <minute_counter+0x1>
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <minute_counter+0x1>
     532:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <minute_counter>
	}
	if (minute_counter >= 60000)
     536:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <minute_counter>
     53a:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <minute_counter+0x1>
     53e:	80 36       	cpi	r24, 0x60	; 96
     540:	9a 4e       	sbci	r25, 0xEA	; 234
     542:	48 f0       	brcs	.+18     	; 0x556 <schedule+0xe0>
	{
		minute_counter = 0;
     544:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <minute_counter+0x1>
     548:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <minute_counter>
		minutes_elapsed += 1;
     54c:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <minutes_elapsed>
     550:	8f 5f       	subi	r24, 0xFF	; 255
     552:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <minutes_elapsed>
     556:	08 95       	ret

00000558 <__vector_4>:
}

// ______________________

ISR(TIMER2_COMP_vect)
{
     558:	1f 92       	push	r1
     55a:	0f 92       	push	r0
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	0f 92       	push	r0
     560:	11 24       	eor	r1, r1
     562:	2f 93       	push	r18
     564:	3f 93       	push	r19
     566:	4f 93       	push	r20
     568:	5f 93       	push	r21
     56a:	6f 93       	push	r22
     56c:	7f 93       	push	r23
     56e:	8f 93       	push	r24
     570:	9f 93       	push	r25
     572:	af 93       	push	r26
     574:	bf 93       	push	r27
     576:	ef 93       	push	r30
     578:	ff 93       	push	r31
	schedule();
     57a:	0e 94 3b 02 	call	0x476	; 0x476 <schedule>
}
     57e:	ff 91       	pop	r31
     580:	ef 91       	pop	r30
     582:	bf 91       	pop	r27
     584:	af 91       	pop	r26
     586:	9f 91       	pop	r25
     588:	8f 91       	pop	r24
     58a:	7f 91       	pop	r23
     58c:	6f 91       	pop	r22
     58e:	5f 91       	pop	r21
     590:	4f 91       	pop	r20
     592:	3f 91       	pop	r19
     594:	2f 91       	pop	r18
     596:	0f 90       	pop	r0
     598:	0f be       	out	0x3f, r0	; 63
     59a:	0f 90       	pop	r0
     59c:	1f 90       	pop	r1
     59e:	18 95       	reti

000005a0 <InitPWM>:
#include "pwm.h"

void InitPWM(void)
{
	TCCR0 |= (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS00);
     5a0:	83 b7       	in	r24, 0x33	; 51
     5a2:	89 66       	ori	r24, 0x69	; 105
     5a4:	83 bf       	out	0x33, r24	; 51
	PWM_DDR |= (1 << PWM_PIN);
     5a6:	87 b3       	in	r24, 0x17	; 23
     5a8:	88 60       	ori	r24, 0x08	; 8
     5aa:	87 bb       	out	0x17, r24	; 23
	OCR1A = 3000;
     5ac:	88 eb       	ldi	r24, 0xB8	; 184
     5ae:	9b e0       	ldi	r25, 0x0B	; 11
     5b0:	9b bd       	out	0x2b, r25	; 43
     5b2:	8a bd       	out	0x2a, r24	; 42
     5b4:	08 95       	ret

000005b6 <SetPWMOutput>:
}

void SetPWMOutput(float64_t vr, float64_t vt)
{
     5b6:	cf 92       	push	r12
     5b8:	df 92       	push	r13
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	69 01       	movw	r12, r18
     5c0:	7a 01       	movw	r14, r20
	u8 duty = 0;
	duty = (((vr * 2) / 10) * vt) / 10;
     5c2:	9b 01       	movw	r18, r22
     5c4:	ac 01       	movw	r20, r24
     5c6:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__addsf3>
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	40 e2       	ldi	r20, 0x20	; 32
     5d0:	51 e4       	ldi	r21, 0x41	; 65
     5d2:	0e 94 45 06 	call	0xc8a	; 0xc8a <__divsf3>
     5d6:	a7 01       	movw	r20, r14
     5d8:	96 01       	movw	r18, r12
     5da:	0e 94 74 07 	call	0xee8	; 0xee8 <__mulsf3>
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	40 e2       	ldi	r20, 0x20	; 32
     5e4:	51 e4       	ldi	r21, 0x41	; 65
     5e6:	0e 94 45 06 	call	0xc8a	; 0xc8a <__divsf3>
     5ea:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__fixunssfsi>
	OCR0 = duty;
     5ee:	6c bf       	out	0x3c, r22	; 60
}
     5f0:	ff 90       	pop	r15
     5f2:	ef 90       	pop	r14
     5f4:	df 90       	pop	r13
     5f6:	cf 90       	pop	r12
     5f8:	08 95       	ret

000005fa <keypad_vInit>:
	{'*', '0', '#'}
};

void keypad_vInit(void)
{
	DIO_set_port_direction(KEYPAD_PORT, 0x0f);
     5fa:	6f e0       	ldi	r22, 0x0F	; 15
     5fc:	83 e4       	ldi	r24, 0x43	; 67
     5fe:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_set_port_direction>
	CLR_BIT(SFIOR, PUD);
     602:	80 b7       	in	r24, 0x30	; 48
     604:	8b 7f       	andi	r24, 0xFB	; 251
     606:	80 bf       	out	0x30, r24	; 48
	DIO_write_port(KEYPAD_PORT, 0xff);
     608:	6f ef       	ldi	r22, 0xFF	; 255
     60a:	83 e4       	ldi	r24, 0x43	; 67
     60c:	0e 94 61 05 	call	0xac2	; 0xac2 <DIO_write_port>
     610:	08 95       	ret

00000612 <Keypad_u8Scan>:
u8 Keypad_u8Scan(void)
{
	u8 row = 0;
	u8 column = 0;
	u8 scan = 0;
	u8 buttonPressed = 0;
     612:	80 e0       	ldi	r24, 0x00	; 0

	for(row = 0; row < N_Row; ++row)
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	3a c0       	rjmp	.+116    	; 0x68c <Keypad_u8Scan+0x7a>
	{
		KEYPAD_PORTC |= 0x0f;
     618:	95 b3       	in	r25, 0x15	; 21
     61a:	9f 60       	ori	r25, 0x0F	; 15
     61c:	95 bb       	out	0x15, r25	; 21
		CLR_BIT(KEYPAD_PORTC, row);
     61e:	95 b3       	in	r25, 0x15	; 21
     620:	a7 2f       	mov	r26, r23
     622:	b0 e0       	ldi	r27, 0x00	; 0
     624:	21 e0       	ldi	r18, 0x01	; 1
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	07 2e       	mov	r0, r23
     62a:	02 c0       	rjmp	.+4      	; 0x630 <Keypad_u8Scan+0x1e>
     62c:	22 0f       	add	r18, r18
     62e:	33 1f       	adc	r19, r19
     630:	0a 94       	dec	r0
     632:	e2 f7       	brpl	.-8      	; 0x62c <Keypad_u8Scan+0x1a>
     634:	20 95       	com	r18
     636:	29 23       	and	r18, r25
     638:	25 bb       	out	0x15, r18	; 21
		for(column = 4; column < (N_Row + N_Col); ++column)
     63a:	94 e0       	ldi	r25, 0x04	; 4
     63c:	24 c0       	rjmp	.+72     	; 0x686 <Keypad_u8Scan+0x74>
		{
			scan = READ_BIT(KEYPAD_PINs, column);
     63e:	63 b3       	in	r22, 0x13	; 19
     640:	e9 2f       	mov	r30, r25
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	21 e0       	ldi	r18, 0x01	; 1
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	a9 01       	movw	r20, r18
     64a:	09 2e       	mov	r0, r25
     64c:	02 c0       	rjmp	.+4      	; 0x652 <Keypad_u8Scan+0x40>
     64e:	44 0f       	add	r20, r20
     650:	55 1f       	adc	r21, r21
     652:	0a 94       	dec	r0
     654:	e2 f7       	brpl	.-8      	; 0x64e <Keypad_u8Scan+0x3c>
     656:	26 2f       	mov	r18, r22
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	24 23       	and	r18, r20
     65c:	35 23       	and	r19, r21
     65e:	09 2e       	mov	r0, r25
     660:	02 c0       	rjmp	.+4      	; 0x666 <Keypad_u8Scan+0x54>
     662:	35 95       	asr	r19
     664:	27 95       	ror	r18
     666:	0a 94       	dec	r0
     668:	e2 f7       	brpl	.-8      	; 0x662 <Keypad_u8Scan+0x50>
			if(scan == 0)
     66a:	21 11       	cpse	r18, r1
     66c:	0b c0       	rjmp	.+22     	; 0x684 <Keypad_u8Scan+0x72>
			{
				buttonPressed = kp[row][column - 4];
     66e:	34 97       	sbiw	r30, 0x04	; 4
     670:	9d 01       	movw	r18, r26
     672:	22 0f       	add	r18, r18
     674:	33 1f       	adc	r19, r19
     676:	2a 0f       	add	r18, r26
     678:	3b 1f       	adc	r19, r27
     67a:	25 55       	subi	r18, 0x55	; 85
     67c:	3f 4f       	sbci	r19, 0xFF	; 255
     67e:	e2 0f       	add	r30, r18
     680:	f3 1f       	adc	r31, r19
     682:	80 81       	ld	r24, Z

	for(row = 0; row < N_Row; ++row)
	{
		KEYPAD_PORTC |= 0x0f;
		CLR_BIT(KEYPAD_PORTC, row);
		for(column = 4; column < (N_Row + N_Col); ++column)
     684:	9f 5f       	subi	r25, 0xFF	; 255
     686:	97 30       	cpi	r25, 0x07	; 7
     688:	d0 f2       	brcs	.-76     	; 0x63e <Keypad_u8Scan+0x2c>
	u8 row = 0;
	u8 column = 0;
	u8 scan = 0;
	u8 buttonPressed = 0;

	for(row = 0; row < N_Row; ++row)
     68a:	7f 5f       	subi	r23, 0xFF	; 255
     68c:	74 30       	cpi	r23, 0x04	; 4
     68e:	20 f2       	brcs	.-120    	; 0x618 <Keypad_u8Scan+0x6>
			}
		}
	}
	
	return buttonPressed;
}
     690:	08 95       	ret

00000692 <getKey>:
u8 getKey(void)
{
	u8 key = 0;

	/* Wait for key release if pressed on entry */
	while(Keypad_u8Scan() != 0)
     692:	06 c0       	rjmp	.+12     	; 0x6a0 <getKey+0xe>
     694:	83 ec       	ldi	r24, 0xC3	; 195
     696:	99 e0       	ldi	r25, 0x09	; 9
     698:	01 97       	sbiw	r24, 0x01	; 1
     69a:	f1 f7       	brne	.-4      	; 0x698 <getKey+0x6>
     69c:	00 c0       	rjmp	.+0      	; 0x69e <getKey+0xc>
     69e:	00 00       	nop
     6a0:	0e 94 09 03 	call	0x612	; 0x612 <Keypad_u8Scan>
     6a4:	81 11       	cpse	r24, r1
     6a6:	f6 cf       	rjmp	.-20     	; 0x694 <getKey+0x2>
	}

	/* Wait for new key press */
	do
	{
		key = Keypad_u8Scan();
     6a8:	0e 94 09 03 	call	0x612	; 0x612 <Keypad_u8Scan>

	} while(key == 0);
     6ac:	88 23       	and	r24, r24
     6ae:	e1 f3       	breq	.-8      	; 0x6a8 <getKey+0x16>

	return key;
     6b0:	08 95       	ret

000006b2 <send_falling_edge>:
	#endif
}

void send_falling_edge(void)
{
	DIO_write(EN_PORT, EN_PIN, 1);
     6b2:	41 e0       	ldi	r20, 0x01	; 1
     6b4:	63 e0       	ldi	r22, 0x03	; 3
     6b6:	81 e4       	ldi	r24, 0x41	; 65
     6b8:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_write>
     6bc:	83 ef       	ldi	r24, 0xF3	; 243
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	01 97       	sbiw	r24, 0x01	; 1
     6c2:	f1 f7       	brne	.-4      	; 0x6c0 <send_falling_edge+0xe>
     6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <send_falling_edge+0x14>
     6c6:	00 00       	nop
	_delay_ms(2);
	DIO_write(EN_PORT, EN_PIN, 0);
     6c8:	40 e0       	ldi	r20, 0x00	; 0
     6ca:	63 e0       	ldi	r22, 0x03	; 3
     6cc:	81 e4       	ldi	r24, 0x41	; 65
     6ce:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_write>
     6d2:	83 ef       	ldi	r24, 0xF3	; 243
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	f1 f7       	brne	.-4      	; 0x6d6 <send_falling_edge+0x24>
     6da:	00 c0       	rjmp	.+0      	; 0x6dc <send_falling_edge+0x2a>
     6dc:	00 00       	nop
     6de:	08 95       	ret

000006e0 <LCD_vSend_cmd>:
	_delay_ms(2);
}

void LCD_vSend_cmd(c8 cmd)
{
     6e0:	cf 93       	push	r28
     6e2:	c8 2f       	mov	r28, r24
		DIO_write(RS_PORT, RS_PIN, 0);
		send_falling_edge();
	
	/* We will work on 4-bis Mode */
	#elif defined four_bits_mode
		write_high_nibble(LCD_PORT, cmd >> 4);
     6e4:	68 2f       	mov	r22, r24
     6e6:	62 95       	swap	r22
     6e8:	6f 70       	andi	r22, 0x0F	; 15
     6ea:	84 e4       	ldi	r24, 0x44	; 68
     6ec:	0e 94 74 05 	call	0xae8	; 0xae8 <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 0);
     6f0:	40 e0       	ldi	r20, 0x00	; 0
     6f2:	61 e0       	ldi	r22, 0x01	; 1
     6f4:	81 e4       	ldi	r24, 0x41	; 65
     6f6:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_write>
		send_falling_edge();
     6fa:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_falling_edge>
		write_high_nibble(LCD_PORT, cmd);
     6fe:	6c 2f       	mov	r22, r28
     700:	84 e4       	ldi	r24, 0x44	; 68
     702:	0e 94 74 05 	call	0xae8	; 0xae8 <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 0);
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	81 e4       	ldi	r24, 0x41	; 65
     70c:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_write>
		send_falling_edge();
     710:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_falling_edge>
     714:	89 ef       	ldi	r24, 0xF9	; 249
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	f1 f7       	brne	.-4      	; 0x718 <LCD_vSend_cmd+0x38>
     71c:	00 c0       	rjmp	.+0      	; 0x71e <LCD_vSend_cmd+0x3e>
     71e:	00 00       	nop

	#endif
	_delay_ms(1);
}
     720:	cf 91       	pop	r28
     722:	08 95       	ret

00000724 <LCD_vInit>:
     724:	87 e8       	ldi	r24, 0x87	; 135
     726:	93 e1       	ldi	r25, 0x13	; 19
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <LCD_vInit+0x4>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <LCD_vInit+0xa>
     72e:	00 00       	nop
		LCD_vSend_cmd(ENTRY_MODE); /* Entry Mode */
		_delay_ms(1);
	
	/* We will work on 4-bis Mode */
	#elif defined four_bits_mode
		DIO_vsetPINDir(LCD_PORT, 4, 1);
     730:	41 e0       	ldi	r20, 0x01	; 1
     732:	64 e0       	ldi	r22, 0x04	; 4
     734:	84 e4       	ldi	r24, 0x44	; 68
     736:	0e 94 6e 04 	call	0x8dc	; 0x8dc <DIO_vsetPINDir>
		DIO_vsetPINDir(LCD_PORT, 5, 1);
     73a:	41 e0       	ldi	r20, 0x01	; 1
     73c:	65 e0       	ldi	r22, 0x05	; 5
     73e:	84 e4       	ldi	r24, 0x44	; 68
     740:	0e 94 6e 04 	call	0x8dc	; 0x8dc <DIO_vsetPINDir>
		DIO_vsetPINDir(LCD_PORT, 6, 1);
     744:	41 e0       	ldi	r20, 0x01	; 1
     746:	66 e0       	ldi	r22, 0x06	; 6
     748:	84 e4       	ldi	r24, 0x44	; 68
     74a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <DIO_vsetPINDir>
		DIO_vsetPINDir(LCD_PORT, 7, 1);
     74e:	41 e0       	ldi	r20, 0x01	; 1
     750:	67 e0       	ldi	r22, 0x07	; 7
     752:	84 e4       	ldi	r24, 0x44	; 68
     754:	0e 94 6e 04 	call	0x8dc	; 0x8dc <DIO_vsetPINDir>
		DIO_vsetPINDir(EN_PORT, EN_PIN, 1);
     758:	41 e0       	ldi	r20, 0x01	; 1
     75a:	63 e0       	ldi	r22, 0x03	; 3
     75c:	81 e4       	ldi	r24, 0x41	; 65
     75e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <DIO_vsetPINDir>
		DIO_vsetPINDir(RW_PORT, RW_PIN, 1);
     762:	41 e0       	ldi	r20, 0x01	; 1
     764:	62 e0       	ldi	r22, 0x02	; 2
     766:	81 e4       	ldi	r24, 0x41	; 65
     768:	0e 94 6e 04 	call	0x8dc	; 0x8dc <DIO_vsetPINDir>
		DIO_vsetPINDir(RS_PORT, RS_PIN, 1);
     76c:	41 e0       	ldi	r20, 0x01	; 1
     76e:	61 e0       	ldi	r22, 0x01	; 1
     770:	81 e4       	ldi	r24, 0x41	; 65
     772:	0e 94 6e 04 	call	0x8dc	; 0x8dc <DIO_vsetPINDir>
   		DIO_write(RW_PORT, RW_PIN, 0);
     776:	40 e0       	ldi	r20, 0x00	; 0
     778:	62 e0       	ldi	r22, 0x02	; 2
     77a:	81 e4       	ldi	r24, 0x41	; 65
     77c:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_write>
		LCD_vSend_cmd(RETURN_HOME); /* Return Home (row: 0, col: 0) */
     780:	82 e0       	ldi	r24, 0x02	; 2
     782:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_vSend_cmd>
     786:	83 ec       	ldi	r24, 0xC3	; 195
     788:	99 e0       	ldi	r25, 0x09	; 9
     78a:	01 97       	sbiw	r24, 0x01	; 1
     78c:	f1 f7       	brne	.-4      	; 0x78a <LCD_vInit+0x66>
     78e:	00 c0       	rjmp	.+0      	; 0x790 <LCD_vInit+0x6c>
     790:	00 00       	nop
		_delay_ms(10);
		LCD_vSend_cmd(FOUR_BITS); /* 4-bits Mode */
     792:	88 e2       	ldi	r24, 0x28	; 40
     794:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_vSend_cmd>
     798:	89 ef       	ldi	r24, 0xF9	; 249
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	01 97       	sbiw	r24, 0x01	; 1
     79e:	f1 f7       	brne	.-4      	; 0x79c <LCD_vInit+0x78>
     7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <LCD_vInit+0x7e>
     7a2:	00 00       	nop
		_delay_ms(1);
		//LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON); /* Display ON Cursor ON */
		LCD_vSend_cmd(CURSOR_OFF_DISPLAN_OFF); /* Display OFF Cursor OFF */
     7a4:	8c e0       	ldi	r24, 0x0C	; 12
     7a6:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_vSend_cmd>
     7aa:	89 ef       	ldi	r24, 0xF9	; 249
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	01 97       	sbiw	r24, 0x01	; 1
     7b0:	f1 f7       	brne	.-4      	; 0x7ae <LCD_vInit+0x8a>
     7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <LCD_vInit+0x90>
     7b4:	00 00       	nop
		_delay_ms(1);
		LCD_vSend_cmd(CLR_SCREEN); /* Clear Screen */
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_vSend_cmd>
     7bc:	83 ec       	ldi	r24, 0xC3	; 195
     7be:	99 e0       	ldi	r25, 0x09	; 9
     7c0:	01 97       	sbiw	r24, 0x01	; 1
     7c2:	f1 f7       	brne	.-4      	; 0x7c0 <LCD_vInit+0x9c>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <LCD_vInit+0xa2>
     7c6:	00 00       	nop
		_delay_ms(10);
		LCD_vSend_cmd(ENTRY_MODE); /* Entry Mode */
     7c8:	86 e0       	ldi	r24, 0x06	; 6
     7ca:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_vSend_cmd>
     7ce:	89 ef       	ldi	r24, 0xF9	; 249
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	01 97       	sbiw	r24, 0x01	; 1
     7d4:	f1 f7       	brne	.-4      	; 0x7d2 <LCD_vInit+0xae>
     7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <LCD_vInit+0xb4>
     7d8:	00 00       	nop
     7da:	08 95       	ret

000007dc <LCD_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD_vSend_char(c8 data)
{
     7dc:	cf 93       	push	r28
     7de:	c8 2f       	mov	r28, r24
		DIO_write(RS_PORT, RS_PIN, 1);
		send_falling_edge();
	
	/* We will work on 4-bis Mode */
	#elif defined four_bits_mode
		write_high_nibble(LCD_PORT, (data >> 4));
     7e0:	68 2f       	mov	r22, r24
     7e2:	62 95       	swap	r22
     7e4:	6f 70       	andi	r22, 0x0F	; 15
     7e6:	84 e4       	ldi	r24, 0x44	; 68
     7e8:	0e 94 74 05 	call	0xae8	; 0xae8 <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 1);
     7ec:	41 e0       	ldi	r20, 0x01	; 1
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	81 e4       	ldi	r24, 0x41	; 65
     7f2:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_write>
		send_falling_edge();
     7f6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_falling_edge>
		write_high_nibble(LCD_PORT, data);
     7fa:	6c 2f       	mov	r22, r28
     7fc:	84 e4       	ldi	r24, 0x44	; 68
     7fe:	0e 94 74 05 	call	0xae8	; 0xae8 <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 1);
     802:	41 e0       	ldi	r20, 0x01	; 1
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	81 e4       	ldi	r24, 0x41	; 65
     808:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_write>
		send_falling_edge();
     80c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_falling_edge>
     810:	89 ef       	ldi	r24, 0xF9	; 249
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	f1 f7       	brne	.-4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     818:	00 c0       	rjmp	.+0      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     81a:	00 00       	nop

	#endif
	_delay_ms(1);
}
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <LCD_vSend_string>:

void LCD_vSend_string(c8 * data)
{
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	ec 01       	movw	r28, r24
	/* (*data): Pointer to first char of string */
    for (counter = 0; data[counter] != '\0'; ++counter)
     826:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <counter>
     82a:	07 c0       	rjmp	.+14     	; 0x83a <LCD_vSend_string+0x1a>
    {
	    LCD_vSend_char(data[counter]);
     82c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_vSend_char>
}

void LCD_vSend_string(c8 * data)
{
	/* (*data): Pointer to first char of string */
    for (counter = 0; data[counter] != '\0'; ++counter)
     830:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <counter>
     834:	8f 5f       	subi	r24, 0xFF	; 255
     836:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <counter>
     83a:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <counter>
     83e:	fe 01       	movw	r30, r28
     840:	e8 0f       	add	r30, r24
     842:	f1 1d       	adc	r31, r1
     844:	80 81       	ld	r24, Z
     846:	81 11       	cpse	r24, r1
     848:	f1 cf       	rjmp	.-30     	; 0x82c <LCD_vSend_string+0xc>
    {
	    LCD_vSend_char(data[counter]);
    }
}
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	08 95       	ret

00000850 <LCD_clearscreen>:

void LCD_clearscreen(void)
{
	LCD_vSend_cmd(CLR_SCREEN);
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_vSend_cmd>
     856:	83 ec       	ldi	r24, 0xC3	; 195
     858:	99 e0       	ldi	r25, 0x09	; 9
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <LCD_clearscreen+0xa>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
     860:	00 00       	nop
     862:	08 95       	ret

00000864 <LCD_movecursor>:

void LCD_movecursor(c8 row, c8 coloumn)
{
	char data = 0;
	
	if (row > 2 || row < 1 || coloumn > 16 || coloumn < 1)
     864:	9f ef       	ldi	r25, 0xFF	; 255
     866:	98 0f       	add	r25, r24
     868:	92 30       	cpi	r25, 0x02	; 2
     86a:	70 f4       	brcc	.+28     	; 0x888 <LCD_movecursor+0x24>
     86c:	61 31       	cpi	r22, 0x11	; 17
     86e:	70 f4       	brcc	.+28     	; 0x88c <LCD_movecursor+0x28>
     870:	66 23       	and	r22, r22
     872:	71 f0       	breq	.+28     	; 0x890 <LCD_movecursor+0x2c>
	{
		data = 0x80;
	}
	else if (row == 1)
     874:	81 30       	cpi	r24, 0x01	; 1
     876:	19 f4       	brne	.+6      	; 0x87e <LCD_movecursor+0x1a>
	{
		data = 0x80 + coloumn - 1;
     878:	8f e7       	ldi	r24, 0x7F	; 127
     87a:	86 0f       	add	r24, r22
     87c:	0c c0       	rjmp	.+24     	; 0x896 <LCD_movecursor+0x32>
	}
	else if (row == 2)
     87e:	82 30       	cpi	r24, 0x02	; 2
     880:	49 f4       	brne	.+18     	; 0x894 <LCD_movecursor+0x30>
	{
		data = 0xc0 + coloumn - 1;
     882:	8f eb       	ldi	r24, 0xBF	; 191
     884:	86 0f       	add	r24, r22
     886:	07 c0       	rjmp	.+14     	; 0x896 <LCD_movecursor+0x32>
{
	char data = 0;
	
	if (row > 2 || row < 1 || coloumn > 16 || coloumn < 1)
	{
		data = 0x80;
     888:	80 e8       	ldi	r24, 0x80	; 128
     88a:	05 c0       	rjmp	.+10     	; 0x896 <LCD_movecursor+0x32>
     88c:	80 e8       	ldi	r24, 0x80	; 128
     88e:	03 c0       	rjmp	.+6      	; 0x896 <LCD_movecursor+0x32>
     890:	80 e8       	ldi	r24, 0x80	; 128
     892:	01 c0       	rjmp	.+2      	; 0x896 <LCD_movecursor+0x32>
	_delay_ms(10);
}

void LCD_movecursor(c8 row, c8 coloumn)
{
	char data = 0;
     894:	80 e0       	ldi	r24, 0x00	; 0
	else if (row == 2)
	{
		data = 0xc0 + coloumn - 1;
	}
	
	LCD_vSend_cmd(data);
     896:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_vSend_cmd>
     89a:	89 ef       	ldi	r24, 0xF9	; 249
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	f1 f7       	brne	.-4      	; 0x89e <LCD_movecursor+0x3a>
     8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <LCD_movecursor+0x40>
     8a4:	00 00       	nop
     8a6:	08 95       	ret

000008a8 <initADC0>:
#include "ADC.h"

void initADC0(void)
{
	// Select the required channel
	ADMUX = 0x00;
     8a8:	17 b8       	out	0x07, r1	; 7
	ADMUX |= (1U << REFS0);
     8aa:	87 b1       	in	r24, 0x07	; 7
     8ac:	80 64       	ori	r24, 0x40	; 64
     8ae:	87 b9       	out	0x07, r24	; 7
	// Enable ADC, with a clock prescale of 1/128
	ADCSRA = (1U << ADEN) | (1U << ADPS2) | (1U << ADPS1) | (1U << ADPS0);
     8b0:	87 e8       	ldi	r24, 0x87	; 135
     8b2:	86 b9       	out	0x06, r24	; 6
     8b4:	08 95       	ret

000008b6 <adc_read>:
}

u32 adc_read(void)
{
	// start conversion
	ADCSRA |= (1U << ADSC);
     8b6:	86 b1       	in	r24, 0x06	; 6
     8b8:	80 64       	ori	r24, 0x40	; 64
     8ba:	86 b9       	out	0x06, r24	; 6
	
	// read from ADC, waiting for conversion to finish
	while(ADCSRA & (1U << ADSC))
     8bc:	36 99       	sbic	0x06, 6	; 6
     8be:	fe cf       	rjmp	.-4      	; 0x8bc <adc_read+0x6>
	{
		/* Do nothing */
	}
	
	return ADC;
     8c0:	64 b1       	in	r22, 0x04	; 4
     8c2:	75 b1       	in	r23, 0x05	; 5
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
}
     8c8:	08 95       	ret

000008ca <sampleToVolts>:

float64_t sampleToVolts(u32 sample)
{
	return sample * (5.0 / 1023.0);
     8ca:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__floatunsisf>
     8ce:	2a e0       	ldi	r18, 0x0A	; 10
     8d0:	38 e2       	ldi	r19, 0x28	; 40
     8d2:	40 ea       	ldi	r20, 0xA0	; 160
     8d4:	5b e3       	ldi	r21, 0x3B	; 59
     8d6:	0e 94 74 07 	call	0xee8	; 0xee8 <__mulsf3>
}
     8da:	08 95       	ret

000008dc <DIO_vsetPINDir>:
			PORTC &= 0xf0;
			PORTC |= value;
			break;
		case 'D':
			PORTD &= 0xf0;
			PORTD |= value;
     8dc:	82 34       	cpi	r24, 0x42	; 66
     8de:	19 f1       	breq	.+70     	; 0x926 <DIO_vsetPINDir+0x4a>
     8e0:	18 f4       	brcc	.+6      	; 0x8e8 <DIO_vsetPINDir+0xc>
     8e2:	81 34       	cpi	r24, 0x41	; 65
     8e4:	39 f0       	breq	.+14     	; 0x8f4 <DIO_vsetPINDir+0x18>
     8e6:	08 95       	ret
     8e8:	83 34       	cpi	r24, 0x43	; 67
     8ea:	b1 f1       	breq	.+108    	; 0x958 <DIO_vsetPINDir+0x7c>
     8ec:	84 34       	cpi	r24, 0x44	; 68
     8ee:	09 f4       	brne	.+2      	; 0x8f2 <DIO_vsetPINDir+0x16>
     8f0:	4c c0       	rjmp	.+152    	; 0x98a <DIO_vsetPINDir+0xae>
     8f2:	08 95       	ret
     8f4:	41 30       	cpi	r20, 0x01	; 1
     8f6:	59 f4       	brne	.+22     	; 0x90e <DIO_vsetPINDir+0x32>
     8f8:	2a b3       	in	r18, 0x1a	; 26
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <DIO_vsetPINDir+0x28>
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	6a 95       	dec	r22
     906:	e2 f7       	brpl	.-8      	; 0x900 <DIO_vsetPINDir+0x24>
     908:	82 2b       	or	r24, r18
     90a:	8a bb       	out	0x1a, r24	; 26
     90c:	08 95       	ret
     90e:	2a b3       	in	r18, 0x1a	; 26
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	02 c0       	rjmp	.+4      	; 0x91a <DIO_vsetPINDir+0x3e>
     916:	88 0f       	add	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	6a 95       	dec	r22
     91c:	e2 f7       	brpl	.-8      	; 0x916 <DIO_vsetPINDir+0x3a>
     91e:	80 95       	com	r24
     920:	82 23       	and	r24, r18
     922:	8a bb       	out	0x1a, r24	; 26
     924:	08 95       	ret
     926:	41 30       	cpi	r20, 0x01	; 1
     928:	59 f4       	brne	.+22     	; 0x940 <DIO_vsetPINDir+0x64>
     92a:	27 b3       	in	r18, 0x17	; 23
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	02 c0       	rjmp	.+4      	; 0x936 <DIO_vsetPINDir+0x5a>
     932:	88 0f       	add	r24, r24
     934:	99 1f       	adc	r25, r25
     936:	6a 95       	dec	r22
     938:	e2 f7       	brpl	.-8      	; 0x932 <DIO_vsetPINDir+0x56>
     93a:	82 2b       	or	r24, r18
     93c:	87 bb       	out	0x17, r24	; 23
     93e:	08 95       	ret
     940:	27 b3       	in	r18, 0x17	; 23
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	02 c0       	rjmp	.+4      	; 0x94c <DIO_vsetPINDir+0x70>
     948:	88 0f       	add	r24, r24
     94a:	99 1f       	adc	r25, r25
     94c:	6a 95       	dec	r22
     94e:	e2 f7       	brpl	.-8      	; 0x948 <DIO_vsetPINDir+0x6c>
     950:	80 95       	com	r24
     952:	82 23       	and	r24, r18
     954:	87 bb       	out	0x17, r24	; 23
     956:	08 95       	ret
     958:	41 30       	cpi	r20, 0x01	; 1
     95a:	59 f4       	brne	.+22     	; 0x972 <DIO_vsetPINDir+0x96>
     95c:	24 b3       	in	r18, 0x14	; 20
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	02 c0       	rjmp	.+4      	; 0x968 <DIO_vsetPINDir+0x8c>
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	6a 95       	dec	r22
     96a:	e2 f7       	brpl	.-8      	; 0x964 <DIO_vsetPINDir+0x88>
     96c:	82 2b       	or	r24, r18
     96e:	84 bb       	out	0x14, r24	; 20
     970:	08 95       	ret
     972:	24 b3       	in	r18, 0x14	; 20
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	02 c0       	rjmp	.+4      	; 0x97e <DIO_vsetPINDir+0xa2>
     97a:	88 0f       	add	r24, r24
     97c:	99 1f       	adc	r25, r25
     97e:	6a 95       	dec	r22
     980:	e2 f7       	brpl	.-8      	; 0x97a <DIO_vsetPINDir+0x9e>
     982:	80 95       	com	r24
     984:	82 23       	and	r24, r18
     986:	84 bb       	out	0x14, r24	; 20
     988:	08 95       	ret
     98a:	41 30       	cpi	r20, 0x01	; 1
     98c:	59 f4       	brne	.+22     	; 0x9a4 <DIO_vsetPINDir+0xc8>
     98e:	21 b3       	in	r18, 0x11	; 17
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	02 c0       	rjmp	.+4      	; 0x99a <DIO_vsetPINDir+0xbe>
     996:	88 0f       	add	r24, r24
     998:	99 1f       	adc	r25, r25
     99a:	6a 95       	dec	r22
     99c:	e2 f7       	brpl	.-8      	; 0x996 <DIO_vsetPINDir+0xba>
     99e:	82 2b       	or	r24, r18
     9a0:	81 bb       	out	0x11, r24	; 17
     9a2:	08 95       	ret
     9a4:	21 b3       	in	r18, 0x11	; 17
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <DIO_vsetPINDir+0xd4>
     9ac:	88 0f       	add	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	6a 95       	dec	r22
     9b2:	e2 f7       	brpl	.-8      	; 0x9ac <DIO_vsetPINDir+0xd0>
     9b4:	80 95       	com	r24
     9b6:	82 23       	and	r24, r18
     9b8:	81 bb       	out	0x11, r24	; 17
     9ba:	08 95       	ret

000009bc <DIO_write>:
     9bc:	82 34       	cpi	r24, 0x42	; 66
     9be:	19 f1       	breq	.+70     	; 0xa06 <DIO_write+0x4a>
     9c0:	18 f4       	brcc	.+6      	; 0x9c8 <DIO_write+0xc>
     9c2:	81 34       	cpi	r24, 0x41	; 65
     9c4:	39 f0       	breq	.+14     	; 0x9d4 <DIO_write+0x18>
     9c6:	08 95       	ret
     9c8:	83 34       	cpi	r24, 0x43	; 67
     9ca:	b1 f1       	breq	.+108    	; 0xa38 <DIO_write+0x7c>
     9cc:	84 34       	cpi	r24, 0x44	; 68
     9ce:	09 f4       	brne	.+2      	; 0x9d2 <DIO_write+0x16>
     9d0:	4c c0       	rjmp	.+152    	; 0xa6a <DIO_write+0xae>
     9d2:	08 95       	ret
     9d4:	41 30       	cpi	r20, 0x01	; 1
     9d6:	59 f4       	brne	.+22     	; 0x9ee <DIO_write+0x32>
     9d8:	2b b3       	in	r18, 0x1b	; 27
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	02 c0       	rjmp	.+4      	; 0x9e4 <DIO_write+0x28>
     9e0:	88 0f       	add	r24, r24
     9e2:	99 1f       	adc	r25, r25
     9e4:	6a 95       	dec	r22
     9e6:	e2 f7       	brpl	.-8      	; 0x9e0 <DIO_write+0x24>
     9e8:	82 2b       	or	r24, r18
     9ea:	8b bb       	out	0x1b, r24	; 27
     9ec:	08 95       	ret
     9ee:	2b b3       	in	r18, 0x1b	; 27
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	02 c0       	rjmp	.+4      	; 0x9fa <DIO_write+0x3e>
     9f6:	88 0f       	add	r24, r24
     9f8:	99 1f       	adc	r25, r25
     9fa:	6a 95       	dec	r22
     9fc:	e2 f7       	brpl	.-8      	; 0x9f6 <DIO_write+0x3a>
     9fe:	80 95       	com	r24
     a00:	82 23       	and	r24, r18
     a02:	8b bb       	out	0x1b, r24	; 27
     a04:	08 95       	ret
     a06:	41 30       	cpi	r20, 0x01	; 1
     a08:	59 f4       	brne	.+22     	; 0xa20 <DIO_write+0x64>
     a0a:	28 b3       	in	r18, 0x18	; 24
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <DIO_write+0x5a>
     a12:	88 0f       	add	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	6a 95       	dec	r22
     a18:	e2 f7       	brpl	.-8      	; 0xa12 <DIO_write+0x56>
     a1a:	82 2b       	or	r24, r18
     a1c:	88 bb       	out	0x18, r24	; 24
     a1e:	08 95       	ret
     a20:	28 b3       	in	r18, 0x18	; 24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <DIO_write+0x70>
     a28:	88 0f       	add	r24, r24
     a2a:	99 1f       	adc	r25, r25
     a2c:	6a 95       	dec	r22
     a2e:	e2 f7       	brpl	.-8      	; 0xa28 <DIO_write+0x6c>
     a30:	80 95       	com	r24
     a32:	82 23       	and	r24, r18
     a34:	88 bb       	out	0x18, r24	; 24
     a36:	08 95       	ret
     a38:	41 30       	cpi	r20, 0x01	; 1
     a3a:	59 f4       	brne	.+22     	; 0xa52 <DIO_write+0x96>
     a3c:	25 b3       	in	r18, 0x15	; 21
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <DIO_write+0x8c>
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	6a 95       	dec	r22
     a4a:	e2 f7       	brpl	.-8      	; 0xa44 <DIO_write+0x88>
     a4c:	82 2b       	or	r24, r18
     a4e:	85 bb       	out	0x15, r24	; 21
     a50:	08 95       	ret
     a52:	25 b3       	in	r18, 0x15	; 21
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <DIO_write+0xa2>
     a5a:	88 0f       	add	r24, r24
     a5c:	99 1f       	adc	r25, r25
     a5e:	6a 95       	dec	r22
     a60:	e2 f7       	brpl	.-8      	; 0xa5a <DIO_write+0x9e>
     a62:	80 95       	com	r24
     a64:	82 23       	and	r24, r18
     a66:	85 bb       	out	0x15, r24	; 21
     a68:	08 95       	ret
     a6a:	41 30       	cpi	r20, 0x01	; 1
     a6c:	59 f4       	brne	.+22     	; 0xa84 <DIO_write+0xc8>
     a6e:	22 b3       	in	r18, 0x12	; 18
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <DIO_write+0xbe>
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	6a 95       	dec	r22
     a7c:	e2 f7       	brpl	.-8      	; 0xa76 <DIO_write+0xba>
     a7e:	82 2b       	or	r24, r18
     a80:	82 bb       	out	0x12, r24	; 18
     a82:	08 95       	ret
     a84:	22 b3       	in	r18, 0x12	; 18
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <DIO_write+0xd4>
     a8c:	88 0f       	add	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	6a 95       	dec	r22
     a92:	e2 f7       	brpl	.-8      	; 0xa8c <DIO_write+0xd0>
     a94:	80 95       	com	r24
     a96:	82 23       	and	r24, r18
     a98:	82 bb       	out	0x12, r24	; 18
     a9a:	08 95       	ret

00000a9c <DIO_set_port_direction>:
     a9c:	82 34       	cpi	r24, 0x42	; 66
     a9e:	59 f0       	breq	.+22     	; 0xab6 <DIO_set_port_direction+0x1a>
     aa0:	18 f4       	brcc	.+6      	; 0xaa8 <DIO_set_port_direction+0xc>
     aa2:	81 34       	cpi	r24, 0x41	; 65
     aa4:	31 f0       	breq	.+12     	; 0xab2 <DIO_set_port_direction+0x16>
     aa6:	08 95       	ret
     aa8:	83 34       	cpi	r24, 0x43	; 67
     aaa:	39 f0       	breq	.+14     	; 0xaba <DIO_set_port_direction+0x1e>
     aac:	84 34       	cpi	r24, 0x44	; 68
     aae:	39 f0       	breq	.+14     	; 0xabe <DIO_set_port_direction+0x22>
     ab0:	08 95       	ret
     ab2:	6a bb       	out	0x1a, r22	; 26
     ab4:	08 95       	ret
     ab6:	67 bb       	out	0x17, r22	; 23
     ab8:	08 95       	ret
     aba:	64 bb       	out	0x14, r22	; 20
     abc:	08 95       	ret
     abe:	61 bb       	out	0x11, r22	; 17
     ac0:	08 95       	ret

00000ac2 <DIO_write_port>:
     ac2:	82 34       	cpi	r24, 0x42	; 66
     ac4:	59 f0       	breq	.+22     	; 0xadc <DIO_write_port+0x1a>
     ac6:	18 f4       	brcc	.+6      	; 0xace <DIO_write_port+0xc>
     ac8:	81 34       	cpi	r24, 0x41	; 65
     aca:	31 f0       	breq	.+12     	; 0xad8 <DIO_write_port+0x16>
     acc:	08 95       	ret
     ace:	83 34       	cpi	r24, 0x43	; 67
     ad0:	39 f0       	breq	.+14     	; 0xae0 <DIO_write_port+0x1e>
     ad2:	84 34       	cpi	r24, 0x44	; 68
     ad4:	39 f0       	breq	.+14     	; 0xae4 <DIO_write_port+0x22>
     ad6:	08 95       	ret
     ad8:	6b bb       	out	0x1b, r22	; 27
     ada:	08 95       	ret
     adc:	68 bb       	out	0x18, r22	; 24
     ade:	08 95       	ret
     ae0:	65 bb       	out	0x15, r22	; 21
     ae2:	08 95       	ret
     ae4:	62 bb       	out	0x12, r22	; 18
     ae6:	08 95       	ret

00000ae8 <write_high_nibble>:
	}
}

void write_high_nibble(u8 portname, u8 value)
{
	value <<= 4;
     ae8:	62 95       	swap	r22
     aea:	60 7f       	andi	r22, 0xF0	; 240
	
	switch(portname)
     aec:	82 34       	cpi	r24, 0x42	; 66
     aee:	81 f0       	breq	.+32     	; 0xb10 <write_high_nibble+0x28>
     af0:	18 f4       	brcc	.+6      	; 0xaf8 <write_high_nibble+0x10>
     af2:	81 34       	cpi	r24, 0x41	; 65
     af4:	31 f0       	breq	.+12     	; 0xb02 <write_high_nibble+0x1a>
     af6:	08 95       	ret
     af8:	83 34       	cpi	r24, 0x43	; 67
     afa:	89 f0       	breq	.+34     	; 0xb1e <write_high_nibble+0x36>
     afc:	84 34       	cpi	r24, 0x44	; 68
     afe:	b1 f0       	breq	.+44     	; 0xb2c <write_high_nibble+0x44>
     b00:	08 95       	ret
	{
		case 'A':
			PORTA &= 0x0f;
     b02:	8b b3       	in	r24, 0x1b	; 27
     b04:	8f 70       	andi	r24, 0x0F	; 15
     b06:	8b bb       	out	0x1b, r24	; 27
			PORTA |= value;
     b08:	8b b3       	in	r24, 0x1b	; 27
     b0a:	68 2b       	or	r22, r24
     b0c:	6b bb       	out	0x1b, r22	; 27
			break;
     b0e:	08 95       	ret
		case 'B':
			PORTB &= 0x0f;
     b10:	88 b3       	in	r24, 0x18	; 24
     b12:	8f 70       	andi	r24, 0x0F	; 15
     b14:	88 bb       	out	0x18, r24	; 24
			PORTB |= value;
     b16:	88 b3       	in	r24, 0x18	; 24
     b18:	68 2b       	or	r22, r24
     b1a:	68 bb       	out	0x18, r22	; 24
			break;
     b1c:	08 95       	ret
		case 'C':
			PORTC &= 0x0f;
     b1e:	85 b3       	in	r24, 0x15	; 21
     b20:	8f 70       	andi	r24, 0x0F	; 15
     b22:	85 bb       	out	0x15, r24	; 21
			PORTC |= value;
     b24:	85 b3       	in	r24, 0x15	; 21
     b26:	68 2b       	or	r22, r24
     b28:	65 bb       	out	0x15, r22	; 21
			break;
     b2a:	08 95       	ret
		case 'D':
			PORTD &= 0x0f;
     b2c:	82 b3       	in	r24, 0x12	; 18
     b2e:	8f 70       	andi	r24, 0x0F	; 15
     b30:	82 bb       	out	0x12, r24	; 18
			PORTD |= value;
     b32:	82 b3       	in	r24, 0x12	; 18
     b34:	68 2b       	or	r22, r24
     b36:	62 bb       	out	0x12, r22	; 18
     b38:	08 95       	ret

00000b3a <SPI_masterInit>:
#include "SPI.h"

void SPI_masterInit(void)
{
	/* Enable MOSI, SCK and SS Output */
	DDRB = (1 << MOSI) | (1 << SCK) | (1 << SS);
     b3a:	80 eb       	ldi	r24, 0xB0	; 176
     b3c:	87 bb       	out	0x17, r24	; 23
	
	/* Enable Master Mode */
	SET_BIT(SPCR, MSTR);
     b3e:	8d b1       	in	r24, 0x0d	; 13
     b40:	80 61       	ori	r24, 0x10	; 16
     b42:	8d b9       	out	0x0d, r24	; 13
	/* Set clock to fosc/16*/
	SET_BIT(SPCR, SPR0);
     b44:	8d b1       	in	r24, 0x0d	; 13
     b46:	81 60       	ori	r24, 0x01	; 1
     b48:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(SPCR, SPR1);
     b4a:	8d b1       	in	r24, 0x0d	; 13
     b4c:	82 60       	ori	r24, 0x02	; 2
     b4e:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(SPCR, CPHA);
     b50:	8d b1       	in	r24, 0x0d	; 13
     b52:	84 60       	ori	r24, 0x04	; 4
     b54:	8d b9       	out	0x0d, r24	; 13
	/* Enable SPI */
	SET_BIT(SPCR, SPE);
     b56:	8d b1       	in	r24, 0x0d	; 13
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8d b9       	out	0x0d, r24	; 13
	/* Enable interrupt */
	SET_BIT(SPCR, SPIE);
     b5c:	8d b1       	in	r24, 0x0d	; 13
     b5e:	80 68       	ori	r24, 0x80	; 128
     b60:	8d b9       	out	0x0d, r24	; 13
     b62:	08 95       	ret

00000b64 <SPI_masterTransmit>:
}

void SPI_masterTransmit(c8 data)
{
	/* Start the Transmission */
	SPDR = data;
     b64:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for Completion */
	while(!(SPSR & (1 << SPIF)));
     b66:	77 9b       	sbis	0x0e, 7	; 14
     b68:	fe cf       	rjmp	.-4      	; 0xb66 <SPI_masterTransmit+0x2>
}
     b6a:	08 95       	ret

00000b6c <SPI_masterReceive>:

c8 SPI_masterReceive(void)
{
	/* wait for the SPI buffer's full */
	while(!(SPSR & (1 << SPIF)));
     b6c:	77 9b       	sbis	0x0e, 7	; 14
     b6e:	fe cf       	rjmp	.-4      	; 0xb6c <SPI_masterReceive>
	/* return SPI buffer */
	return SPDR;
     b70:	8f b1       	in	r24, 0x0f	; 15
}
     b72:	08 95       	ret

00000b74 <TC72_Init>:

void TC72_Init(void)
{
	SET_BIT(SPI_PORT, SS);
     b74:	88 b3       	in	r24, 0x18	; 24
     b76:	80 61       	ori	r24, 0x10	; 16
     b78:	88 bb       	out	0x18, r24	; 24
	/* Select control register */
	SPI_masterTransmit(0x80);
     b7a:	80 e8       	ldi	r24, 0x80	; 128
     b7c:	0e 94 b2 05 	call	0xb64	; 0xb64 <SPI_masterTransmit>
	
	/* Select Continuous temperature conversion */
	SPI_masterTransmit(0x40);
     b80:	80 e4       	ldi	r24, 0x40	; 64
     b82:	0e 94 b2 05 	call	0xb64	; 0xb64 <SPI_masterTransmit>
	CLR_BIT(SPI_PORT, SS);
     b86:	88 b3       	in	r24, 0x18	; 24
     b88:	8f 7e       	andi	r24, 0xEF	; 239
     b8a:	88 bb       	out	0x18, r24	; 24
     b8c:	8b e7       	ldi	r24, 0x7B	; 123
     b8e:	92 e9       	ldi	r25, 0x92	; 146
     b90:	01 97       	sbiw	r24, 0x01	; 1
     b92:	f1 f7       	brne	.-4      	; 0xb90 <TC72_Init+0x1c>
     b94:	00 c0       	rjmp	.+0      	; 0xb96 <TC72_Init+0x22>
     b96:	00 00       	nop
     b98:	08 95       	ret

00000b9a <main>:
#include "APPL/app.h"

int main(void)
{
	Welcome_Screen();
     b9a:	0e 94 5b 00 	call	0xb6	; 0xb6 <Welcome_Screen>
	IDLE_Screen();
     b9e:	0e 94 af 00 	call	0x15e	; 0x15e <IDLE_Screen>
	UsrGetVal();
     ba2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UsrGetVal>

	Init();
     ba6:	0e 94 49 00 	call	0x92	; 0x92 <Init>
		//T0delay();
		//LCD_vSend_char('B');
		//T0delay();
		
		//WriteVolt();
		CRT_Temp();
     baa:	0e 94 23 01 	call	0x246	; 0x246 <CRT_Temp>
     bae:	fd cf       	rjmp	.-6      	; 0xbaa <main+0x10>

00000bb0 <__subsf3>:
     bb0:	50 58       	subi	r21, 0x80	; 128

00000bb2 <__addsf3>:
     bb2:	bb 27       	eor	r27, r27
     bb4:	aa 27       	eor	r26, r26
     bb6:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__addsf3x>
     bba:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__fp_round>
     bbe:	0e 94 2c 07 	call	0xe58	; 0xe58 <__fp_pscA>
     bc2:	38 f0       	brcs	.+14     	; 0xbd2 <__addsf3+0x20>
     bc4:	0e 94 33 07 	call	0xe66	; 0xe66 <__fp_pscB>
     bc8:	20 f0       	brcs	.+8      	; 0xbd2 <__addsf3+0x20>
     bca:	39 f4       	brne	.+14     	; 0xbda <__addsf3+0x28>
     bcc:	9f 3f       	cpi	r25, 0xFF	; 255
     bce:	19 f4       	brne	.+6      	; 0xbd6 <__addsf3+0x24>
     bd0:	26 f4       	brtc	.+8      	; 0xbda <__addsf3+0x28>
     bd2:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__fp_nan>
     bd6:	0e f4       	brtc	.+2      	; 0xbda <__addsf3+0x28>
     bd8:	e0 95       	com	r30
     bda:	e7 fb       	bst	r30, 7
     bdc:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__fp_inf>

00000be0 <__addsf3x>:
     be0:	e9 2f       	mov	r30, r25
     be2:	0e 94 4b 07 	call	0xe96	; 0xe96 <__fp_split3>
     be6:	58 f3       	brcs	.-42     	; 0xbbe <__addsf3+0xc>
     be8:	ba 17       	cp	r27, r26
     bea:	62 07       	cpc	r22, r18
     bec:	73 07       	cpc	r23, r19
     bee:	84 07       	cpc	r24, r20
     bf0:	95 07       	cpc	r25, r21
     bf2:	20 f0       	brcs	.+8      	; 0xbfc <__addsf3x+0x1c>
     bf4:	79 f4       	brne	.+30     	; 0xc14 <__addsf3x+0x34>
     bf6:	a6 f5       	brtc	.+104    	; 0xc60 <__addsf3x+0x80>
     bf8:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__fp_zero>
     bfc:	0e f4       	brtc	.+2      	; 0xc00 <__addsf3x+0x20>
     bfe:	e0 95       	com	r30
     c00:	0b 2e       	mov	r0, r27
     c02:	ba 2f       	mov	r27, r26
     c04:	a0 2d       	mov	r26, r0
     c06:	0b 01       	movw	r0, r22
     c08:	b9 01       	movw	r22, r18
     c0a:	90 01       	movw	r18, r0
     c0c:	0c 01       	movw	r0, r24
     c0e:	ca 01       	movw	r24, r20
     c10:	a0 01       	movw	r20, r0
     c12:	11 24       	eor	r1, r1
     c14:	ff 27       	eor	r31, r31
     c16:	59 1b       	sub	r21, r25
     c18:	99 f0       	breq	.+38     	; 0xc40 <__addsf3x+0x60>
     c1a:	59 3f       	cpi	r21, 0xF9	; 249
     c1c:	50 f4       	brcc	.+20     	; 0xc32 <__addsf3x+0x52>
     c1e:	50 3e       	cpi	r21, 0xE0	; 224
     c20:	68 f1       	brcs	.+90     	; 0xc7c <__addsf3x+0x9c>
     c22:	1a 16       	cp	r1, r26
     c24:	f0 40       	sbci	r31, 0x00	; 0
     c26:	a2 2f       	mov	r26, r18
     c28:	23 2f       	mov	r18, r19
     c2a:	34 2f       	mov	r19, r20
     c2c:	44 27       	eor	r20, r20
     c2e:	58 5f       	subi	r21, 0xF8	; 248
     c30:	f3 cf       	rjmp	.-26     	; 0xc18 <__addsf3x+0x38>
     c32:	46 95       	lsr	r20
     c34:	37 95       	ror	r19
     c36:	27 95       	ror	r18
     c38:	a7 95       	ror	r26
     c3a:	f0 40       	sbci	r31, 0x00	; 0
     c3c:	53 95       	inc	r21
     c3e:	c9 f7       	brne	.-14     	; 0xc32 <__addsf3x+0x52>
     c40:	7e f4       	brtc	.+30     	; 0xc60 <__addsf3x+0x80>
     c42:	1f 16       	cp	r1, r31
     c44:	ba 0b       	sbc	r27, r26
     c46:	62 0b       	sbc	r22, r18
     c48:	73 0b       	sbc	r23, r19
     c4a:	84 0b       	sbc	r24, r20
     c4c:	ba f0       	brmi	.+46     	; 0xc7c <__addsf3x+0x9c>
     c4e:	91 50       	subi	r25, 0x01	; 1
     c50:	a1 f0       	breq	.+40     	; 0xc7a <__addsf3x+0x9a>
     c52:	ff 0f       	add	r31, r31
     c54:	bb 1f       	adc	r27, r27
     c56:	66 1f       	adc	r22, r22
     c58:	77 1f       	adc	r23, r23
     c5a:	88 1f       	adc	r24, r24
     c5c:	c2 f7       	brpl	.-16     	; 0xc4e <__addsf3x+0x6e>
     c5e:	0e c0       	rjmp	.+28     	; 0xc7c <__addsf3x+0x9c>
     c60:	ba 0f       	add	r27, r26
     c62:	62 1f       	adc	r22, r18
     c64:	73 1f       	adc	r23, r19
     c66:	84 1f       	adc	r24, r20
     c68:	48 f4       	brcc	.+18     	; 0xc7c <__addsf3x+0x9c>
     c6a:	87 95       	ror	r24
     c6c:	77 95       	ror	r23
     c6e:	67 95       	ror	r22
     c70:	b7 95       	ror	r27
     c72:	f7 95       	ror	r31
     c74:	9e 3f       	cpi	r25, 0xFE	; 254
     c76:	08 f0       	brcs	.+2      	; 0xc7a <__addsf3x+0x9a>
     c78:	b0 cf       	rjmp	.-160    	; 0xbda <__addsf3+0x28>
     c7a:	93 95       	inc	r25
     c7c:	88 0f       	add	r24, r24
     c7e:	08 f0       	brcs	.+2      	; 0xc82 <__addsf3x+0xa2>
     c80:	99 27       	eor	r25, r25
     c82:	ee 0f       	add	r30, r30
     c84:	97 95       	ror	r25
     c86:	87 95       	ror	r24
     c88:	08 95       	ret

00000c8a <__divsf3>:
     c8a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__divsf3x>
     c8e:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__fp_round>
     c92:	0e 94 33 07 	call	0xe66	; 0xe66 <__fp_pscB>
     c96:	58 f0       	brcs	.+22     	; 0xcae <__divsf3+0x24>
     c98:	0e 94 2c 07 	call	0xe58	; 0xe58 <__fp_pscA>
     c9c:	40 f0       	brcs	.+16     	; 0xcae <__divsf3+0x24>
     c9e:	29 f4       	brne	.+10     	; 0xcaa <__divsf3+0x20>
     ca0:	5f 3f       	cpi	r21, 0xFF	; 255
     ca2:	29 f0       	breq	.+10     	; 0xcae <__divsf3+0x24>
     ca4:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__fp_inf>
     ca8:	51 11       	cpse	r21, r1
     caa:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_szero>
     cae:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__fp_nan>

00000cb2 <__divsf3x>:
     cb2:	0e 94 4b 07 	call	0xe96	; 0xe96 <__fp_split3>
     cb6:	68 f3       	brcs	.-38     	; 0xc92 <__divsf3+0x8>

00000cb8 <__divsf3_pse>:
     cb8:	99 23       	and	r25, r25
     cba:	b1 f3       	breq	.-20     	; 0xca8 <__divsf3+0x1e>
     cbc:	55 23       	and	r21, r21
     cbe:	91 f3       	breq	.-28     	; 0xca4 <__divsf3+0x1a>
     cc0:	95 1b       	sub	r25, r21
     cc2:	55 0b       	sbc	r21, r21
     cc4:	bb 27       	eor	r27, r27
     cc6:	aa 27       	eor	r26, r26
     cc8:	62 17       	cp	r22, r18
     cca:	73 07       	cpc	r23, r19
     ccc:	84 07       	cpc	r24, r20
     cce:	38 f0       	brcs	.+14     	; 0xcde <__divsf3_pse+0x26>
     cd0:	9f 5f       	subi	r25, 0xFF	; 255
     cd2:	5f 4f       	sbci	r21, 0xFF	; 255
     cd4:	22 0f       	add	r18, r18
     cd6:	33 1f       	adc	r19, r19
     cd8:	44 1f       	adc	r20, r20
     cda:	aa 1f       	adc	r26, r26
     cdc:	a9 f3       	breq	.-22     	; 0xcc8 <__divsf3_pse+0x10>
     cde:	35 d0       	rcall	.+106    	; 0xd4a <__divsf3_pse+0x92>
     ce0:	0e 2e       	mov	r0, r30
     ce2:	3a f0       	brmi	.+14     	; 0xcf2 <__divsf3_pse+0x3a>
     ce4:	e0 e8       	ldi	r30, 0x80	; 128
     ce6:	32 d0       	rcall	.+100    	; 0xd4c <__divsf3_pse+0x94>
     ce8:	91 50       	subi	r25, 0x01	; 1
     cea:	50 40       	sbci	r21, 0x00	; 0
     cec:	e6 95       	lsr	r30
     cee:	00 1c       	adc	r0, r0
     cf0:	ca f7       	brpl	.-14     	; 0xce4 <__divsf3_pse+0x2c>
     cf2:	2b d0       	rcall	.+86     	; 0xd4a <__divsf3_pse+0x92>
     cf4:	fe 2f       	mov	r31, r30
     cf6:	29 d0       	rcall	.+82     	; 0xd4a <__divsf3_pse+0x92>
     cf8:	66 0f       	add	r22, r22
     cfa:	77 1f       	adc	r23, r23
     cfc:	88 1f       	adc	r24, r24
     cfe:	bb 1f       	adc	r27, r27
     d00:	26 17       	cp	r18, r22
     d02:	37 07       	cpc	r19, r23
     d04:	48 07       	cpc	r20, r24
     d06:	ab 07       	cpc	r26, r27
     d08:	b0 e8       	ldi	r27, 0x80	; 128
     d0a:	09 f0       	breq	.+2      	; 0xd0e <__divsf3_pse+0x56>
     d0c:	bb 0b       	sbc	r27, r27
     d0e:	80 2d       	mov	r24, r0
     d10:	bf 01       	movw	r22, r30
     d12:	ff 27       	eor	r31, r31
     d14:	93 58       	subi	r25, 0x83	; 131
     d16:	5f 4f       	sbci	r21, 0xFF	; 255
     d18:	3a f0       	brmi	.+14     	; 0xd28 <__divsf3_pse+0x70>
     d1a:	9e 3f       	cpi	r25, 0xFE	; 254
     d1c:	51 05       	cpc	r21, r1
     d1e:	78 f0       	brcs	.+30     	; 0xd3e <__divsf3_pse+0x86>
     d20:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__fp_inf>
     d24:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_szero>
     d28:	5f 3f       	cpi	r21, 0xFF	; 255
     d2a:	e4 f3       	brlt	.-8      	; 0xd24 <__divsf3_pse+0x6c>
     d2c:	98 3e       	cpi	r25, 0xE8	; 232
     d2e:	d4 f3       	brlt	.-12     	; 0xd24 <__divsf3_pse+0x6c>
     d30:	86 95       	lsr	r24
     d32:	77 95       	ror	r23
     d34:	67 95       	ror	r22
     d36:	b7 95       	ror	r27
     d38:	f7 95       	ror	r31
     d3a:	9f 5f       	subi	r25, 0xFF	; 255
     d3c:	c9 f7       	brne	.-14     	; 0xd30 <__divsf3_pse+0x78>
     d3e:	88 0f       	add	r24, r24
     d40:	91 1d       	adc	r25, r1
     d42:	96 95       	lsr	r25
     d44:	87 95       	ror	r24
     d46:	97 f9       	bld	r25, 7
     d48:	08 95       	ret
     d4a:	e1 e0       	ldi	r30, 0x01	; 1
     d4c:	66 0f       	add	r22, r22
     d4e:	77 1f       	adc	r23, r23
     d50:	88 1f       	adc	r24, r24
     d52:	bb 1f       	adc	r27, r27
     d54:	62 17       	cp	r22, r18
     d56:	73 07       	cpc	r23, r19
     d58:	84 07       	cpc	r24, r20
     d5a:	ba 07       	cpc	r27, r26
     d5c:	20 f0       	brcs	.+8      	; 0xd66 <__divsf3_pse+0xae>
     d5e:	62 1b       	sub	r22, r18
     d60:	73 0b       	sbc	r23, r19
     d62:	84 0b       	sbc	r24, r20
     d64:	ba 0b       	sbc	r27, r26
     d66:	ee 1f       	adc	r30, r30
     d68:	88 f7       	brcc	.-30     	; 0xd4c <__divsf3_pse+0x94>
     d6a:	e0 95       	com	r30
     d6c:	08 95       	ret

00000d6e <__fixunssfsi>:
     d6e:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_splitA>
     d72:	88 f0       	brcs	.+34     	; 0xd96 <__fixunssfsi+0x28>
     d74:	9f 57       	subi	r25, 0x7F	; 127
     d76:	98 f0       	brcs	.+38     	; 0xd9e <__fixunssfsi+0x30>
     d78:	b9 2f       	mov	r27, r25
     d7a:	99 27       	eor	r25, r25
     d7c:	b7 51       	subi	r27, 0x17	; 23
     d7e:	b0 f0       	brcs	.+44     	; 0xdac <__fixunssfsi+0x3e>
     d80:	e1 f0       	breq	.+56     	; 0xdba <__fixunssfsi+0x4c>
     d82:	66 0f       	add	r22, r22
     d84:	77 1f       	adc	r23, r23
     d86:	88 1f       	adc	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	1a f0       	brmi	.+6      	; 0xd92 <__fixunssfsi+0x24>
     d8c:	ba 95       	dec	r27
     d8e:	c9 f7       	brne	.-14     	; 0xd82 <__fixunssfsi+0x14>
     d90:	14 c0       	rjmp	.+40     	; 0xdba <__fixunssfsi+0x4c>
     d92:	b1 30       	cpi	r27, 0x01	; 1
     d94:	91 f0       	breq	.+36     	; 0xdba <__fixunssfsi+0x4c>
     d96:	0e 94 6d 07 	call	0xeda	; 0xeda <__fp_zero>
     d9a:	b1 e0       	ldi	r27, 0x01	; 1
     d9c:	08 95       	ret
     d9e:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__fp_zero>
     da2:	67 2f       	mov	r22, r23
     da4:	78 2f       	mov	r23, r24
     da6:	88 27       	eor	r24, r24
     da8:	b8 5f       	subi	r27, 0xF8	; 248
     daa:	39 f0       	breq	.+14     	; 0xdba <__fixunssfsi+0x4c>
     dac:	b9 3f       	cpi	r27, 0xF9	; 249
     dae:	cc f3       	brlt	.-14     	; 0xda2 <__fixunssfsi+0x34>
     db0:	86 95       	lsr	r24
     db2:	77 95       	ror	r23
     db4:	67 95       	ror	r22
     db6:	b3 95       	inc	r27
     db8:	d9 f7       	brne	.-10     	; 0xdb0 <__fixunssfsi+0x42>
     dba:	3e f4       	brtc	.+14     	; 0xdca <__fixunssfsi+0x5c>
     dbc:	90 95       	com	r25
     dbe:	80 95       	com	r24
     dc0:	70 95       	com	r23
     dc2:	61 95       	neg	r22
     dc4:	7f 4f       	sbci	r23, 0xFF	; 255
     dc6:	8f 4f       	sbci	r24, 0xFF	; 255
     dc8:	9f 4f       	sbci	r25, 0xFF	; 255
     dca:	08 95       	ret

00000dcc <__floatunsisf>:
     dcc:	e8 94       	clt
     dce:	09 c0       	rjmp	.+18     	; 0xde2 <__floatsisf+0x12>

00000dd0 <__floatsisf>:
     dd0:	97 fb       	bst	r25, 7
     dd2:	3e f4       	brtc	.+14     	; 0xde2 <__floatsisf+0x12>
     dd4:	90 95       	com	r25
     dd6:	80 95       	com	r24
     dd8:	70 95       	com	r23
     dda:	61 95       	neg	r22
     ddc:	7f 4f       	sbci	r23, 0xFF	; 255
     dde:	8f 4f       	sbci	r24, 0xFF	; 255
     de0:	9f 4f       	sbci	r25, 0xFF	; 255
     de2:	99 23       	and	r25, r25
     de4:	a9 f0       	breq	.+42     	; 0xe10 <__floatsisf+0x40>
     de6:	f9 2f       	mov	r31, r25
     de8:	96 e9       	ldi	r25, 0x96	; 150
     dea:	bb 27       	eor	r27, r27
     dec:	93 95       	inc	r25
     dee:	f6 95       	lsr	r31
     df0:	87 95       	ror	r24
     df2:	77 95       	ror	r23
     df4:	67 95       	ror	r22
     df6:	b7 95       	ror	r27
     df8:	f1 11       	cpse	r31, r1
     dfa:	f8 cf       	rjmp	.-16     	; 0xdec <__floatsisf+0x1c>
     dfc:	fa f4       	brpl	.+62     	; 0xe3c <__floatsisf+0x6c>
     dfe:	bb 0f       	add	r27, r27
     e00:	11 f4       	brne	.+4      	; 0xe06 <__floatsisf+0x36>
     e02:	60 ff       	sbrs	r22, 0
     e04:	1b c0       	rjmp	.+54     	; 0xe3c <__floatsisf+0x6c>
     e06:	6f 5f       	subi	r22, 0xFF	; 255
     e08:	7f 4f       	sbci	r23, 0xFF	; 255
     e0a:	8f 4f       	sbci	r24, 0xFF	; 255
     e0c:	9f 4f       	sbci	r25, 0xFF	; 255
     e0e:	16 c0       	rjmp	.+44     	; 0xe3c <__floatsisf+0x6c>
     e10:	88 23       	and	r24, r24
     e12:	11 f0       	breq	.+4      	; 0xe18 <__floatsisf+0x48>
     e14:	96 e9       	ldi	r25, 0x96	; 150
     e16:	11 c0       	rjmp	.+34     	; 0xe3a <__floatsisf+0x6a>
     e18:	77 23       	and	r23, r23
     e1a:	21 f0       	breq	.+8      	; 0xe24 <__floatsisf+0x54>
     e1c:	9e e8       	ldi	r25, 0x8E	; 142
     e1e:	87 2f       	mov	r24, r23
     e20:	76 2f       	mov	r23, r22
     e22:	05 c0       	rjmp	.+10     	; 0xe2e <__floatsisf+0x5e>
     e24:	66 23       	and	r22, r22
     e26:	71 f0       	breq	.+28     	; 0xe44 <__floatsisf+0x74>
     e28:	96 e8       	ldi	r25, 0x86	; 134
     e2a:	86 2f       	mov	r24, r22
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	2a f0       	brmi	.+10     	; 0xe3c <__floatsisf+0x6c>
     e32:	9a 95       	dec	r25
     e34:	66 0f       	add	r22, r22
     e36:	77 1f       	adc	r23, r23
     e38:	88 1f       	adc	r24, r24
     e3a:	da f7       	brpl	.-10     	; 0xe32 <__floatsisf+0x62>
     e3c:	88 0f       	add	r24, r24
     e3e:	96 95       	lsr	r25
     e40:	87 95       	ror	r24
     e42:	97 f9       	bld	r25, 7
     e44:	08 95       	ret

00000e46 <__fp_inf>:
     e46:	97 f9       	bld	r25, 7
     e48:	9f 67       	ori	r25, 0x7F	; 127
     e4a:	80 e8       	ldi	r24, 0x80	; 128
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	08 95       	ret

00000e52 <__fp_nan>:
     e52:	9f ef       	ldi	r25, 0xFF	; 255
     e54:	80 ec       	ldi	r24, 0xC0	; 192
     e56:	08 95       	ret

00000e58 <__fp_pscA>:
     e58:	00 24       	eor	r0, r0
     e5a:	0a 94       	dec	r0
     e5c:	16 16       	cp	r1, r22
     e5e:	17 06       	cpc	r1, r23
     e60:	18 06       	cpc	r1, r24
     e62:	09 06       	cpc	r0, r25
     e64:	08 95       	ret

00000e66 <__fp_pscB>:
     e66:	00 24       	eor	r0, r0
     e68:	0a 94       	dec	r0
     e6a:	12 16       	cp	r1, r18
     e6c:	13 06       	cpc	r1, r19
     e6e:	14 06       	cpc	r1, r20
     e70:	05 06       	cpc	r0, r21
     e72:	08 95       	ret

00000e74 <__fp_round>:
     e74:	09 2e       	mov	r0, r25
     e76:	03 94       	inc	r0
     e78:	00 0c       	add	r0, r0
     e7a:	11 f4       	brne	.+4      	; 0xe80 <__fp_round+0xc>
     e7c:	88 23       	and	r24, r24
     e7e:	52 f0       	brmi	.+20     	; 0xe94 <__fp_round+0x20>
     e80:	bb 0f       	add	r27, r27
     e82:	40 f4       	brcc	.+16     	; 0xe94 <__fp_round+0x20>
     e84:	bf 2b       	or	r27, r31
     e86:	11 f4       	brne	.+4      	; 0xe8c <__fp_round+0x18>
     e88:	60 ff       	sbrs	r22, 0
     e8a:	04 c0       	rjmp	.+8      	; 0xe94 <__fp_round+0x20>
     e8c:	6f 5f       	subi	r22, 0xFF	; 255
     e8e:	7f 4f       	sbci	r23, 0xFF	; 255
     e90:	8f 4f       	sbci	r24, 0xFF	; 255
     e92:	9f 4f       	sbci	r25, 0xFF	; 255
     e94:	08 95       	ret

00000e96 <__fp_split3>:
     e96:	57 fd       	sbrc	r21, 7
     e98:	90 58       	subi	r25, 0x80	; 128
     e9a:	44 0f       	add	r20, r20
     e9c:	55 1f       	adc	r21, r21
     e9e:	59 f0       	breq	.+22     	; 0xeb6 <__fp_splitA+0x10>
     ea0:	5f 3f       	cpi	r21, 0xFF	; 255
     ea2:	71 f0       	breq	.+28     	; 0xec0 <__fp_splitA+0x1a>
     ea4:	47 95       	ror	r20

00000ea6 <__fp_splitA>:
     ea6:	88 0f       	add	r24, r24
     ea8:	97 fb       	bst	r25, 7
     eaa:	99 1f       	adc	r25, r25
     eac:	61 f0       	breq	.+24     	; 0xec6 <__fp_splitA+0x20>
     eae:	9f 3f       	cpi	r25, 0xFF	; 255
     eb0:	79 f0       	breq	.+30     	; 0xed0 <__fp_splitA+0x2a>
     eb2:	87 95       	ror	r24
     eb4:	08 95       	ret
     eb6:	12 16       	cp	r1, r18
     eb8:	13 06       	cpc	r1, r19
     eba:	14 06       	cpc	r1, r20
     ebc:	55 1f       	adc	r21, r21
     ebe:	f2 cf       	rjmp	.-28     	; 0xea4 <__fp_split3+0xe>
     ec0:	46 95       	lsr	r20
     ec2:	f1 df       	rcall	.-30     	; 0xea6 <__fp_splitA>
     ec4:	08 c0       	rjmp	.+16     	; 0xed6 <__fp_splitA+0x30>
     ec6:	16 16       	cp	r1, r22
     ec8:	17 06       	cpc	r1, r23
     eca:	18 06       	cpc	r1, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	f1 cf       	rjmp	.-30     	; 0xeb2 <__fp_splitA+0xc>
     ed0:	86 95       	lsr	r24
     ed2:	71 05       	cpc	r23, r1
     ed4:	61 05       	cpc	r22, r1
     ed6:	08 94       	sec
     ed8:	08 95       	ret

00000eda <__fp_zero>:
     eda:	e8 94       	clt

00000edc <__fp_szero>:
     edc:	bb 27       	eor	r27, r27
     ede:	66 27       	eor	r22, r22
     ee0:	77 27       	eor	r23, r23
     ee2:	cb 01       	movw	r24, r22
     ee4:	97 f9       	bld	r25, 7
     ee6:	08 95       	ret

00000ee8 <__mulsf3>:
     ee8:	0e 94 87 07 	call	0xf0e	; 0xf0e <__mulsf3x>
     eec:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__fp_round>
     ef0:	0e 94 2c 07 	call	0xe58	; 0xe58 <__fp_pscA>
     ef4:	38 f0       	brcs	.+14     	; 0xf04 <__mulsf3+0x1c>
     ef6:	0e 94 33 07 	call	0xe66	; 0xe66 <__fp_pscB>
     efa:	20 f0       	brcs	.+8      	; 0xf04 <__mulsf3+0x1c>
     efc:	95 23       	and	r25, r21
     efe:	11 f0       	breq	.+4      	; 0xf04 <__mulsf3+0x1c>
     f00:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__fp_inf>
     f04:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__fp_nan>
     f08:	11 24       	eor	r1, r1
     f0a:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_szero>

00000f0e <__mulsf3x>:
     f0e:	0e 94 4b 07 	call	0xe96	; 0xe96 <__fp_split3>
     f12:	70 f3       	brcs	.-36     	; 0xef0 <__mulsf3+0x8>

00000f14 <__mulsf3_pse>:
     f14:	95 9f       	mul	r25, r21
     f16:	c1 f3       	breq	.-16     	; 0xf08 <__mulsf3+0x20>
     f18:	95 0f       	add	r25, r21
     f1a:	50 e0       	ldi	r21, 0x00	; 0
     f1c:	55 1f       	adc	r21, r21
     f1e:	62 9f       	mul	r22, r18
     f20:	f0 01       	movw	r30, r0
     f22:	72 9f       	mul	r23, r18
     f24:	bb 27       	eor	r27, r27
     f26:	f0 0d       	add	r31, r0
     f28:	b1 1d       	adc	r27, r1
     f2a:	63 9f       	mul	r22, r19
     f2c:	aa 27       	eor	r26, r26
     f2e:	f0 0d       	add	r31, r0
     f30:	b1 1d       	adc	r27, r1
     f32:	aa 1f       	adc	r26, r26
     f34:	64 9f       	mul	r22, r20
     f36:	66 27       	eor	r22, r22
     f38:	b0 0d       	add	r27, r0
     f3a:	a1 1d       	adc	r26, r1
     f3c:	66 1f       	adc	r22, r22
     f3e:	82 9f       	mul	r24, r18
     f40:	22 27       	eor	r18, r18
     f42:	b0 0d       	add	r27, r0
     f44:	a1 1d       	adc	r26, r1
     f46:	62 1f       	adc	r22, r18
     f48:	73 9f       	mul	r23, r19
     f4a:	b0 0d       	add	r27, r0
     f4c:	a1 1d       	adc	r26, r1
     f4e:	62 1f       	adc	r22, r18
     f50:	83 9f       	mul	r24, r19
     f52:	a0 0d       	add	r26, r0
     f54:	61 1d       	adc	r22, r1
     f56:	22 1f       	adc	r18, r18
     f58:	74 9f       	mul	r23, r20
     f5a:	33 27       	eor	r19, r19
     f5c:	a0 0d       	add	r26, r0
     f5e:	61 1d       	adc	r22, r1
     f60:	23 1f       	adc	r18, r19
     f62:	84 9f       	mul	r24, r20
     f64:	60 0d       	add	r22, r0
     f66:	21 1d       	adc	r18, r1
     f68:	82 2f       	mov	r24, r18
     f6a:	76 2f       	mov	r23, r22
     f6c:	6a 2f       	mov	r22, r26
     f6e:	11 24       	eor	r1, r1
     f70:	9f 57       	subi	r25, 0x7F	; 127
     f72:	50 40       	sbci	r21, 0x00	; 0
     f74:	9a f0       	brmi	.+38     	; 0xf9c <__mulsf3_pse+0x88>
     f76:	f1 f0       	breq	.+60     	; 0xfb4 <__mulsf3_pse+0xa0>
     f78:	88 23       	and	r24, r24
     f7a:	4a f0       	brmi	.+18     	; 0xf8e <__mulsf3_pse+0x7a>
     f7c:	ee 0f       	add	r30, r30
     f7e:	ff 1f       	adc	r31, r31
     f80:	bb 1f       	adc	r27, r27
     f82:	66 1f       	adc	r22, r22
     f84:	77 1f       	adc	r23, r23
     f86:	88 1f       	adc	r24, r24
     f88:	91 50       	subi	r25, 0x01	; 1
     f8a:	50 40       	sbci	r21, 0x00	; 0
     f8c:	a9 f7       	brne	.-22     	; 0xf78 <__mulsf3_pse+0x64>
     f8e:	9e 3f       	cpi	r25, 0xFE	; 254
     f90:	51 05       	cpc	r21, r1
     f92:	80 f0       	brcs	.+32     	; 0xfb4 <__mulsf3_pse+0xa0>
     f94:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__fp_inf>
     f98:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_szero>
     f9c:	5f 3f       	cpi	r21, 0xFF	; 255
     f9e:	e4 f3       	brlt	.-8      	; 0xf98 <__mulsf3_pse+0x84>
     fa0:	98 3e       	cpi	r25, 0xE8	; 232
     fa2:	d4 f3       	brlt	.-12     	; 0xf98 <__mulsf3_pse+0x84>
     fa4:	86 95       	lsr	r24
     fa6:	77 95       	ror	r23
     fa8:	67 95       	ror	r22
     faa:	b7 95       	ror	r27
     fac:	f7 95       	ror	r31
     fae:	e7 95       	ror	r30
     fb0:	9f 5f       	subi	r25, 0xFF	; 255
     fb2:	c1 f7       	brne	.-16     	; 0xfa4 <__mulsf3_pse+0x90>
     fb4:	fe 2b       	or	r31, r30
     fb6:	88 0f       	add	r24, r24
     fb8:	91 1d       	adc	r25, r1
     fba:	96 95       	lsr	r25
     fbc:	87 95       	ror	r24
     fbe:	97 f9       	bld	r25, 7
     fc0:	08 95       	ret

00000fc2 <__umulhisi3>:
     fc2:	a2 9f       	mul	r26, r18
     fc4:	b0 01       	movw	r22, r0
     fc6:	b3 9f       	mul	r27, r19
     fc8:	c0 01       	movw	r24, r0
     fca:	a3 9f       	mul	r26, r19
     fcc:	70 0d       	add	r23, r0
     fce:	81 1d       	adc	r24, r1
     fd0:	11 24       	eor	r1, r1
     fd2:	91 1d       	adc	r25, r1
     fd4:	b2 9f       	mul	r27, r18
     fd6:	70 0d       	add	r23, r0
     fd8:	81 1d       	adc	r24, r1
     fda:	11 24       	eor	r1, r1
     fdc:	91 1d       	adc	r25, r1
     fde:	08 95       	ret

00000fe0 <atoi>:
     fe0:	fc 01       	movw	r30, r24
     fe2:	88 27       	eor	r24, r24
     fe4:	99 27       	eor	r25, r25
     fe6:	e8 94       	clt
     fe8:	21 91       	ld	r18, Z+
     fea:	20 32       	cpi	r18, 0x20	; 32
     fec:	e9 f3       	breq	.-6      	; 0xfe8 <atoi+0x8>
     fee:	29 30       	cpi	r18, 0x09	; 9
     ff0:	10 f0       	brcs	.+4      	; 0xff6 <atoi+0x16>
     ff2:	2e 30       	cpi	r18, 0x0E	; 14
     ff4:	c8 f3       	brcs	.-14     	; 0xfe8 <atoi+0x8>
     ff6:	2b 32       	cpi	r18, 0x2B	; 43
     ff8:	41 f0       	breq	.+16     	; 0x100a <atoi+0x2a>
     ffa:	2d 32       	cpi	r18, 0x2D	; 45
     ffc:	39 f4       	brne	.+14     	; 0x100c <atoi+0x2c>
     ffe:	68 94       	set
    1000:	04 c0       	rjmp	.+8      	; 0x100a <atoi+0x2a>
    1002:	0e 94 19 08 	call	0x1032	; 0x1032 <__mulhi_const_10>
    1006:	82 0f       	add	r24, r18
    1008:	91 1d       	adc	r25, r1
    100a:	21 91       	ld	r18, Z+
    100c:	20 53       	subi	r18, 0x30	; 48
    100e:	2a 30       	cpi	r18, 0x0A	; 10
    1010:	c0 f3       	brcs	.-16     	; 0x1002 <atoi+0x22>
    1012:	1e f4       	brtc	.+6      	; 0x101a <atoi+0x3a>
    1014:	90 95       	com	r25
    1016:	81 95       	neg	r24
    1018:	9f 4f       	sbci	r25, 0xFF	; 255
    101a:	08 95       	ret

0000101c <__itoa_ncheck>:
    101c:	bb 27       	eor	r27, r27
    101e:	4a 30       	cpi	r20, 0x0A	; 10
    1020:	31 f4       	brne	.+12     	; 0x102e <__itoa_ncheck+0x12>
    1022:	99 23       	and	r25, r25
    1024:	22 f4       	brpl	.+8      	; 0x102e <__itoa_ncheck+0x12>
    1026:	bd e2       	ldi	r27, 0x2D	; 45
    1028:	90 95       	com	r25
    102a:	81 95       	neg	r24
    102c:	9f 4f       	sbci	r25, 0xFF	; 255
    102e:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__utoa_common>

00001032 <__mulhi_const_10>:
    1032:	7a e0       	ldi	r23, 0x0A	; 10
    1034:	97 9f       	mul	r25, r23
    1036:	90 2d       	mov	r25, r0
    1038:	87 9f       	mul	r24, r23
    103a:	80 2d       	mov	r24, r0
    103c:	91 0d       	add	r25, r1
    103e:	11 24       	eor	r1, r1
    1040:	08 95       	ret

00001042 <__utoa_ncheck>:
    1042:	bb 27       	eor	r27, r27

00001044 <__utoa_common>:
    1044:	fb 01       	movw	r30, r22
    1046:	55 27       	eor	r21, r21
    1048:	aa 27       	eor	r26, r26
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	aa 1f       	adc	r26, r26
    1050:	a4 17       	cp	r26, r20
    1052:	10 f0       	brcs	.+4      	; 0x1058 <__utoa_common+0x14>
    1054:	a4 1b       	sub	r26, r20
    1056:	83 95       	inc	r24
    1058:	50 51       	subi	r21, 0x10	; 16
    105a:	b9 f7       	brne	.-18     	; 0x104a <__utoa_common+0x6>
    105c:	a0 5d       	subi	r26, 0xD0	; 208
    105e:	aa 33       	cpi	r26, 0x3A	; 58
    1060:	08 f0       	brcs	.+2      	; 0x1064 <__utoa_common+0x20>
    1062:	a9 5d       	subi	r26, 0xD9	; 217
    1064:	a1 93       	st	Z+, r26
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	79 f7       	brne	.-34     	; 0x1048 <__utoa_common+0x4>
    106a:	b1 11       	cpse	r27, r1
    106c:	b1 93       	st	Z+, r27
    106e:	11 92       	st	Z+, r1
    1070:	cb 01       	movw	r24, r22
    1072:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <strrev>

00001076 <strrev>:
    1076:	dc 01       	movw	r26, r24
    1078:	fc 01       	movw	r30, r24
    107a:	67 2f       	mov	r22, r23
    107c:	71 91       	ld	r23, Z+
    107e:	77 23       	and	r23, r23
    1080:	e1 f7       	brne	.-8      	; 0x107a <strrev+0x4>
    1082:	32 97       	sbiw	r30, 0x02	; 2
    1084:	04 c0       	rjmp	.+8      	; 0x108e <strrev+0x18>
    1086:	7c 91       	ld	r23, X
    1088:	6d 93       	st	X+, r22
    108a:	70 83       	st	Z, r23
    108c:	62 91       	ld	r22, -Z
    108e:	ae 17       	cp	r26, r30
    1090:	bf 07       	cpc	r27, r31
    1092:	c8 f3       	brcs	.-14     	; 0x1086 <strrev+0x10>
    1094:	08 95       	ret

00001096 <_exit>:
    1096:	f8 94       	cli

00001098 <__stop_program>:
    1098:	ff cf       	rjmp	.-2      	; 0x1098 <__stop_program>
