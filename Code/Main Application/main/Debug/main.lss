
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00000a80  00000b14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080009e  0080009e  00000b52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d7f  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca0  00000000  00000000  00002aff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010e0  00000000  00000000  0000379f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00004880  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000662  00000000  00000000  00004b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001233  00000000  00000000  000051e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00006419  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 39       	cpi	r26, 0x9E	; 158
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e9       	ldi	r26, 0x9E	; 158
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3a       	cpi	r26, 0xA0	; 160
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b6 03 	call	0x76c	; 0x76c <main>
  8a:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <initADC0>:
#include "ADC.h"

void initADC0()
{
	// Select the required channel
	ADMUX=0x00;
  92:	17 b8       	out	0x07, r1	; 7
	ADMUX |= (1U<<REFS0);
  94:	87 b1       	in	r24, 0x07	; 7
  96:	80 64       	ori	r24, 0x40	; 64
  98:	87 b9       	out	0x07, r24	; 7
	// Enable ADC, with a clock prescale of 1/128
	ADCSRA = (1U<<ADEN) | (1U<<ADPS2) | (1U<<ADPS1) | (1U<<ADPS0);
  9a:	87 e8       	ldi	r24, 0x87	; 135
  9c:	86 b9       	out	0x06, r24	; 6
  9e:	08 95       	ret

000000a0 <adc_read>:
}

u32 adc_read()
{
	// start conversion
	ADCSRA |= (1U<<ADSC);
  a0:	86 b1       	in	r24, 0x06	; 6
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	86 b9       	out	0x06, r24	; 6
	
	// read from ADC, waiting for conversion to finish
	while(ADCSRA & (1U<<ADSC))
  a6:	36 99       	sbic	0x06, 6	; 6
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <adc_read+0x6>
	{
		/* Do nothing */
	}
	
	return ADC;
  aa:	64 b1       	in	r22, 0x04	; 4
  ac:	75 b1       	in	r23, 0x05	; 5
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
}
  b2:	08 95       	ret

000000b4 <sampleToVolts>:
float64_t sampleToVolts(u32 sample)
{
	return sample * (5.0 / 1023.0);
  b4:	0e 94 03 04 	call	0x806	; 0x806 <__floatunsisf>
  b8:	2a e0       	ldi	r18, 0x0A	; 10
  ba:	38 e2       	ldi	r19, 0x28	; 40
  bc:	40 ea       	ldi	r20, 0xA0	; 160
  be:	5b e3       	ldi	r21, 0x3B	; 59
  c0:	0e 94 40 04 	call	0x880	; 0x880 <__mulsf3>
  c4:	08 95       	ret

000000c6 <Init>:
#include <avr/io.h>
static u8 shift = 0;

void Init(void)
{
	LCD_vInit();
  c6:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_vInit>
	keypad_vInit();
  ca:	0e 94 49 02 	call	0x492	; 0x492 <keypad_vInit>
	SPI_masterInit();
  ce:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <SPI_masterInit>
	TC72_Init();
  d2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <TC72_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	82 e5       	ldi	r24, 0x52	; 82
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <Init+0x16>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <Init+0x20>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <Welcome_Screen>:
	_delay_ms(150);
}

void Welcome_Screen(void)
{
	LCD_movecursor(1, 1);
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_movecursor>
	
	for (shift = 1; shift < 16; ++shift)
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
  f8:	19 c0       	rjmp	.+50     	; 0x12c <Welcome_Screen+0x42>
	{
		LCD_clearscreen();
  fa:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_clearscreen>
		LCD_SendStringRowCol(1, shift, "WELCOME");
  fe:	40 e6       	ldi	r20, 0x60	; 96
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	60 91 9e 00 	lds	r22, 0x009E	; 0x80009e <__data_end>
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 9c 03 	call	0x738	; 0x738 <LCD_SendStringRowCol>
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	81 ee       	ldi	r24, 0xE1	; 225
 110:	94 e0       	ldi	r25, 0x04	; 4
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <Welcome_Screen+0x28>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <Welcome_Screen+0x32>
 11c:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();
 11e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_clearscreen>

void Welcome_Screen(void)
{
	LCD_movecursor(1, 1);
	
	for (shift = 1; shift < 16; ++shift)
 122:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
 12c:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
 130:	80 31       	cpi	r24, 0x10	; 16
 132:	18 f3       	brcs	.-58     	; 0xfa <Welcome_Screen+0x10>
		LCD_SendStringRowCol(1, shift, "WELCOME");
		_delay_ms(100);
		LCD_clearscreen();
	}

	for (shift = 16; shift > 0; --shift)
 134:	80 e1       	ldi	r24, 0x10	; 16
 136:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
 13a:	19 c0       	rjmp	.+50     	; 0x16e <Welcome_Screen+0x84>
	{
		LCD_clearscreen();
 13c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_clearscreen>
		LCD_SendStringRowCol(1, shift, "WELCOME");
 140:	40 e6       	ldi	r20, 0x60	; 96
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	60 91 9e 00 	lds	r22, 0x009E	; 0x80009e <__data_end>
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 9c 03 	call	0x738	; 0x738 <LCD_SendStringRowCol>
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	81 ee       	ldi	r24, 0xE1	; 225
 152:	94 e0       	ldi	r25, 0x04	; 4
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <Welcome_Screen+0x6a>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <Welcome_Screen+0x74>
 15e:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();
 160:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_clearscreen>
		LCD_SendStringRowCol(1, shift, "WELCOME");
		_delay_ms(100);
		LCD_clearscreen();
	}

	for (shift = 16; shift > 0; --shift)
 164:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
 168:	81 50       	subi	r24, 0x01	; 1
 16a:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
 16e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
 172:	81 11       	cpse	r24, r1
 174:	e3 cf       	rjmp	.-58     	; 0x13c <Welcome_Screen+0x52>
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	84 e3       	ldi	r24, 0x34	; 52
 17a:	9c e0       	ldi	r25, 0x0C	; 12
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <Welcome_Screen+0x92>
 184:	00 c0       	rjmp	.+0      	; 0x186 <Welcome_Screen+0x9c>
 186:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();
	}
	
	_delay_ms(250);
	LCD_clearscreen();
 188:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_clearscreen>
 18c:	08 95       	ret

0000018e <IDLE_Screen>:
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	89 ef       	ldi	r24, 0xF9	; 249
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <IDLE_Screen+0x6>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <IDLE_Screen+0x10>
 19e:	00 00       	nop
}

void IDLE_Screen(void)
{
	_delay_ms(20);
	LCD_SendStringRowCol(1, 1, "SET:25");
 1a0:	48 e6       	ldi	r20, 0x68	; 104
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 9c 03 	call	0x738	; 0x738 <LCD_SendStringRowCol>
	LCD_SendStringRowCol(1, 11, "CRT:");
 1ac:	4f e6       	ldi	r20, 0x6F	; 111
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	6b e0       	ldi	r22, 0x0B	; 11
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 9c 03 	call	0x738	; 0x738 <LCD_SendStringRowCol>
	LCD_SendStringRowCol(2, 1, "STATE:STANDBY");
 1b8:	44 e7       	ldi	r20, 0x74	; 116
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	0e 94 9c 03 	call	0x738	; 0x738 <LCD_SendStringRowCol>
 1c4:	08 95       	ret

000001c6 <UsrGetVal>:
}

u8 UsrGetVal(void)
{
 1c6:	cf 93       	push	r28
	u8 keypadPress = getKey();
 1c8:	0e 94 91 02 	call	0x522	; 0x522 <getKey>
 1cc:	c8 2f       	mov	r28, r24
	
	if (keypadPress == '#')
 1ce:	83 32       	cpi	r24, 0x23	; 35
 1d0:	51 f4       	brne	.+20     	; 0x1e6 <UsrGetVal+0x20>
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	89 ef       	ldi	r24, 0xF9	; 249
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <UsrGetVal+0x12>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <UsrGetVal+0x1c>
 1e2:	00 00       	nop
 1e4:	0b c0       	rjmp	.+22     	; 0x1fc <UsrGetVal+0x36>
	{
		_delay_ms(20);
	}
	else
	{
		LCD_vSend_char(keypadPress);
 1e6:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_vSend_char>
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	89 ef       	ldi	r24, 0xF9	; 249
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <UsrGetVal+0x2a>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <UsrGetVal+0x34>
 1fa:	00 00       	nop
		_delay_ms(20);		
	}
	
	return keypadPress;
}
 1fc:	8c 2f       	mov	r24, r28
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <tc72_read>:
		////LCD_vSend_char(TempVal);
		//_delay_ms(20);
	}
}*/

void tc72_read(void){
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	00 d0       	rcall	.+0      	; 0x208 <tc72_read+0x6>
 208:	00 d0       	rcall	.+0      	; 0x20a <tc72_read+0x8>
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
    char MSB = 0;
	char CurrentTempString[4];
    char tempValue = 0;
    /* ----------- LSB ---------- */
	while(1){
    PORTB |= (1 << 4);
 20e:	88 b3       	in	r24, 0x18	; 24
 210:	80 61       	ori	r24, 0x10	; 16
 212:	88 bb       	out	0x18, r24	; 24
    SPI_masterTransmit(0x01);
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <SPI_masterTransmit>
    SPI_masterTransmit(0x00);
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <SPI_masterTransmit>
    PORTB &= ~(1 << 4);
 220:	88 b3       	in	r24, 0x18	; 24
 222:	8f 7e       	andi	r24, 0xEF	; 239
 224:	88 bb       	out	0x18, r24	; 24
 226:	8f e9       	ldi	r24, 0x9F	; 159
 228:	9f e0       	ldi	r25, 0x0F	; 15
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <tc72_read+0x28>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <tc72_read+0x2e>
 230:	00 00       	nop

    _delay_ms(1);
    LSB = SPI_masterReceive();
 232:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <SPI_masterReceive>

    /* ----------- MSB ---------- */

    PORTB |= (1 << 4);
 236:	88 b3       	in	r24, 0x18	; 24
 238:	80 61       	ori	r24, 0x10	; 16
 23a:	88 bb       	out	0x18, r24	; 24
    SPI_masterTransmit(0x02);            /* read will be from MSB temperature register */
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <SPI_masterTransmit>
    SPI_masterTransmit(0x00);
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <SPI_masterTransmit>
    PORTB &= ~(1 << 4);
 248:	88 b3       	in	r24, 0x18	; 24
 24a:	8f 7e       	andi	r24, 0xEF	; 239
 24c:	88 bb       	out	0x18, r24	; 24
 24e:	8f e9       	ldi	r24, 0x9F	; 159
 250:	9f e0       	ldi	r25, 0x0F	; 15
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <tc72_read+0x50>
 256:	00 c0       	rjmp	.+0      	; 0x258 <tc72_read+0x56>
 258:	00 00       	nop

    _delay_ms(1);
    MSB = SPI_masterReceive();
 25a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <SPI_masterReceive>

    LSB >>= 7;
    //MSB <<= 1;
    tempValue = MSB | LSB;
	
	itoa(MSB,CurrentTempString,10);
 25e:	4a e0       	ldi	r20, 0x0A	; 10
 260:	50 e0       	ldi	r21, 0x00	; 0
 262:	be 01       	movw	r22, r28
 264:	6f 5f       	subi	r22, 0xFF	; 255
 266:	7f 4f       	sbci	r23, 0xFF	; 255
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <itoa>
    LCD_movecursor(1, 15);
 26e:	6f e0       	ldi	r22, 0x0F	; 15
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_movecursor>
    LCD_vSend_string(CurrentTempString);
 276:	ce 01       	movw	r24, r28
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LCD_vSend_string>
 27e:	c7 cf       	rjmp	.-114    	; 0x20e <tc72_read+0xc>

00000280 <DIO_vsetPINDir>:
			PORTC &= 0xf0;
			PORTC |= value;
			break;
		case 'D':
			PORTD &= 0xf0;
			PORTD |= value;
 280:	82 34       	cpi	r24, 0x42	; 66
 282:	19 f1       	breq	.+70     	; 0x2ca <DIO_vsetPINDir+0x4a>
 284:	18 f4       	brcc	.+6      	; 0x28c <DIO_vsetPINDir+0xc>
 286:	81 34       	cpi	r24, 0x41	; 65
 288:	39 f0       	breq	.+14     	; 0x298 <DIO_vsetPINDir+0x18>
 28a:	08 95       	ret
 28c:	83 34       	cpi	r24, 0x43	; 67
 28e:	b1 f1       	breq	.+108    	; 0x2fc <DIO_vsetPINDir+0x7c>
 290:	84 34       	cpi	r24, 0x44	; 68
 292:	09 f4       	brne	.+2      	; 0x296 <DIO_vsetPINDir+0x16>
 294:	4c c0       	rjmp	.+152    	; 0x32e <DIO_vsetPINDir+0xae>
 296:	08 95       	ret
 298:	41 30       	cpi	r20, 0x01	; 1
 29a:	59 f4       	brne	.+22     	; 0x2b2 <DIO_vsetPINDir+0x32>
 29c:	2a b3       	in	r18, 0x1a	; 26
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_vsetPINDir+0x28>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_vsetPINDir+0x24>
 2ac:	82 2b       	or	r24, r18
 2ae:	8a bb       	out	0x1a, r24	; 26
 2b0:	08 95       	ret
 2b2:	2a b3       	in	r18, 0x1a	; 26
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_vsetPINDir+0x3e>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_vsetPINDir+0x3a>
 2c2:	80 95       	com	r24
 2c4:	82 23       	and	r24, r18
 2c6:	8a bb       	out	0x1a, r24	; 26
 2c8:	08 95       	ret
 2ca:	41 30       	cpi	r20, 0x01	; 1
 2cc:	59 f4       	brne	.+22     	; 0x2e4 <DIO_vsetPINDir+0x64>
 2ce:	27 b3       	in	r18, 0x17	; 23
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_vsetPINDir+0x5a>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_vsetPINDir+0x56>
 2de:	82 2b       	or	r24, r18
 2e0:	87 bb       	out	0x17, r24	; 23
 2e2:	08 95       	ret
 2e4:	27 b3       	in	r18, 0x17	; 23
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_vsetPINDir+0x70>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_vsetPINDir+0x6c>
 2f4:	80 95       	com	r24
 2f6:	82 23       	and	r24, r18
 2f8:	87 bb       	out	0x17, r24	; 23
 2fa:	08 95       	ret
 2fc:	41 30       	cpi	r20, 0x01	; 1
 2fe:	59 f4       	brne	.+22     	; 0x316 <DIO_vsetPINDir+0x96>
 300:	24 b3       	in	r18, 0x14	; 20
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_vsetPINDir+0x8c>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_vsetPINDir+0x88>
 310:	82 2b       	or	r24, r18
 312:	84 bb       	out	0x14, r24	; 20
 314:	08 95       	ret
 316:	24 b3       	in	r18, 0x14	; 20
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_vsetPINDir+0xa2>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	6a 95       	dec	r22
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_vsetPINDir+0x9e>
 326:	80 95       	com	r24
 328:	82 23       	and	r24, r18
 32a:	84 bb       	out	0x14, r24	; 20
 32c:	08 95       	ret
 32e:	41 30       	cpi	r20, 0x01	; 1
 330:	59 f4       	brne	.+22     	; 0x348 <DIO_vsetPINDir+0xc8>
 332:	21 b3       	in	r18, 0x11	; 17
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_vsetPINDir+0xbe>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_vsetPINDir+0xba>
 342:	82 2b       	or	r24, r18
 344:	81 bb       	out	0x11, r24	; 17
 346:	08 95       	ret
 348:	21 b3       	in	r18, 0x11	; 17
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_vsetPINDir+0xd4>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_vsetPINDir+0xd0>
 358:	80 95       	com	r24
 35a:	82 23       	and	r24, r18
 35c:	81 bb       	out	0x11, r24	; 17
 35e:	08 95       	ret

00000360 <DIO_write>:
 360:	82 34       	cpi	r24, 0x42	; 66
 362:	19 f1       	breq	.+70     	; 0x3aa <DIO_write+0x4a>
 364:	18 f4       	brcc	.+6      	; 0x36c <DIO_write+0xc>
 366:	81 34       	cpi	r24, 0x41	; 65
 368:	39 f0       	breq	.+14     	; 0x378 <DIO_write+0x18>
 36a:	08 95       	ret
 36c:	83 34       	cpi	r24, 0x43	; 67
 36e:	b1 f1       	breq	.+108    	; 0x3dc <DIO_write+0x7c>
 370:	84 34       	cpi	r24, 0x44	; 68
 372:	09 f4       	brne	.+2      	; 0x376 <DIO_write+0x16>
 374:	4c c0       	rjmp	.+152    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 376:	08 95       	ret
 378:	41 30       	cpi	r20, 0x01	; 1
 37a:	59 f4       	brne	.+22     	; 0x392 <DIO_write+0x32>
 37c:	2b b3       	in	r18, 0x1b	; 27
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_write+0x28>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_write+0x24>
 38c:	82 2b       	or	r24, r18
 38e:	8b bb       	out	0x1b, r24	; 27
 390:	08 95       	ret
 392:	2b b3       	in	r18, 0x1b	; 27
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_write+0x3e>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	6a 95       	dec	r22
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_write+0x3a>
 3a2:	80 95       	com	r24
 3a4:	82 23       	and	r24, r18
 3a6:	8b bb       	out	0x1b, r24	; 27
 3a8:	08 95       	ret
 3aa:	41 30       	cpi	r20, 0x01	; 1
 3ac:	59 f4       	brne	.+22     	; 0x3c4 <DIO_write+0x64>
 3ae:	28 b3       	in	r18, 0x18	; 24
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_write+0x5a>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	6a 95       	dec	r22
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_write+0x56>
 3be:	82 2b       	or	r24, r18
 3c0:	88 bb       	out	0x18, r24	; 24
 3c2:	08 95       	ret
 3c4:	28 b3       	in	r18, 0x18	; 24
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_write+0x70>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_write+0x6c>
 3d4:	80 95       	com	r24
 3d6:	82 23       	and	r24, r18
 3d8:	88 bb       	out	0x18, r24	; 24
 3da:	08 95       	ret
 3dc:	41 30       	cpi	r20, 0x01	; 1
 3de:	59 f4       	brne	.+22     	; 0x3f6 <DIO_write+0x96>
 3e0:	25 b3       	in	r18, 0x15	; 21
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_write+0x8c>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_write+0x88>
 3f0:	82 2b       	or	r24, r18
 3f2:	85 bb       	out	0x15, r24	; 21
 3f4:	08 95       	ret
 3f6:	25 b3       	in	r18, 0x15	; 21
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	6a 95       	dec	r22
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_write+0x9e>
 406:	80 95       	com	r24
 408:	82 23       	and	r24, r18
 40a:	85 bb       	out	0x15, r24	; 21
 40c:	08 95       	ret
 40e:	41 30       	cpi	r20, 0x01	; 1
 410:	59 f4       	brne	.+22     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 412:	22 b3       	in	r18, 0x12	; 18
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	02 c0       	rjmp	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	6a 95       	dec	r22
 420:	e2 f7       	brpl	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 422:	82 2b       	or	r24, r18
 424:	82 bb       	out	0x12, r24	; 18
 426:	08 95       	ret
 428:	22 b3       	in	r18, 0x12	; 18
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 438:	80 95       	com	r24
 43a:	82 23       	and	r24, r18
 43c:	82 bb       	out	0x12, r24	; 18
 43e:	08 95       	ret

00000440 <write_high_nibble>:
	}
}

void write_high_nibble(u8 portname, u8 value)
{
	value <<= 4;
 440:	62 95       	swap	r22
 442:	60 7f       	andi	r22, 0xF0	; 240
	
	switch(portname)
 444:	82 34       	cpi	r24, 0x42	; 66
 446:	81 f0       	breq	.+32     	; 0x468 <write_high_nibble+0x28>
 448:	18 f4       	brcc	.+6      	; 0x450 <write_high_nibble+0x10>
 44a:	81 34       	cpi	r24, 0x41	; 65
 44c:	31 f0       	breq	.+12     	; 0x45a <write_high_nibble+0x1a>
 44e:	08 95       	ret
 450:	83 34       	cpi	r24, 0x43	; 67
 452:	89 f0       	breq	.+34     	; 0x476 <write_high_nibble+0x36>
 454:	84 34       	cpi	r24, 0x44	; 68
 456:	b1 f0       	breq	.+44     	; 0x484 <write_high_nibble+0x44>
 458:	08 95       	ret
	{
		case 'A':
			PORTA &= 0x0f;
 45a:	8b b3       	in	r24, 0x1b	; 27
 45c:	8f 70       	andi	r24, 0x0F	; 15
 45e:	8b bb       	out	0x1b, r24	; 27
			PORTA |= value;
 460:	8b b3       	in	r24, 0x1b	; 27
 462:	68 2b       	or	r22, r24
 464:	6b bb       	out	0x1b, r22	; 27
			break;
 466:	08 95       	ret
		case 'B':
			PORTB &= 0x0f;
 468:	88 b3       	in	r24, 0x18	; 24
 46a:	8f 70       	andi	r24, 0x0F	; 15
 46c:	88 bb       	out	0x18, r24	; 24
			PORTB |= value;
 46e:	88 b3       	in	r24, 0x18	; 24
 470:	68 2b       	or	r22, r24
 472:	68 bb       	out	0x18, r22	; 24
			break;
 474:	08 95       	ret
		case 'C':
			PORTC &= 0x0f;
 476:	85 b3       	in	r24, 0x15	; 21
 478:	8f 70       	andi	r24, 0x0F	; 15
 47a:	85 bb       	out	0x15, r24	; 21
			PORTC |= value;
 47c:	85 b3       	in	r24, 0x15	; 21
 47e:	68 2b       	or	r22, r24
 480:	65 bb       	out	0x15, r22	; 21
			break;
 482:	08 95       	ret
		case 'D':
			PORTD &= 0x0f;
 484:	82 b3       	in	r24, 0x12	; 18
 486:	8f 70       	andi	r24, 0x0F	; 15
 488:	82 bb       	out	0x12, r24	; 18
			PORTD |= value;
 48a:	82 b3       	in	r24, 0x12	; 18
 48c:	68 2b       	or	r22, r24
 48e:	62 bb       	out	0x12, r22	; 18
 490:	08 95       	ret

00000492 <keypad_vInit>:
	{'*', '0', '#'}
};

void keypad_vInit(void)
{
	DDRC = 0x0f;
 492:	8f e0       	ldi	r24, 0x0F	; 15
 494:	84 bb       	out	0x14, r24	; 20
	CLR_BIT(SFIOR, PUD);
 496:	80 b7       	in	r24, 0x30	; 48
 498:	8b 7f       	andi	r24, 0xFB	; 251
 49a:	80 bf       	out	0x30, r24	; 48
	PORTC = 0xff;
 49c:	8f ef       	ldi	r24, 0xFF	; 255
 49e:	85 bb       	out	0x15, r24	; 21
 4a0:	08 95       	ret

000004a2 <Keypad_u8Scan>:
u8 Keypad_u8Scan(void)
{
	u8 row = 0;
	u8 column = 0;
	u8 scan = 0;
	u8 buttonPressed = 0;
 4a2:	80 e0       	ldi	r24, 0x00	; 0

	for(row = 0; row < N_Row; ++row)
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	3a c0       	rjmp	.+116    	; 0x51c <Keypad_u8Scan+0x7a>
	{
		PORTC |= 0x0f;
 4a8:	95 b3       	in	r25, 0x15	; 21
 4aa:	9f 60       	ori	r25, 0x0F	; 15
 4ac:	95 bb       	out	0x15, r25	; 21
		CLR_BIT(PORTC, row);
 4ae:	95 b3       	in	r25, 0x15	; 21
 4b0:	a7 2f       	mov	r26, r23
 4b2:	b0 e0       	ldi	r27, 0x00	; 0
 4b4:	21 e0       	ldi	r18, 0x01	; 1
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	07 2e       	mov	r0, r23
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <Keypad_u8Scan+0x1e>
 4bc:	22 0f       	add	r18, r18
 4be:	33 1f       	adc	r19, r19
 4c0:	0a 94       	dec	r0
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <Keypad_u8Scan+0x1a>
 4c4:	20 95       	com	r18
 4c6:	29 23       	and	r18, r25
 4c8:	25 bb       	out	0x15, r18	; 21
		for(column = 4; column < (N_Row + N_Col); ++column)
 4ca:	94 e0       	ldi	r25, 0x04	; 4
 4cc:	24 c0       	rjmp	.+72     	; 0x516 <Keypad_u8Scan+0x74>
		{
			scan = READ_BIT(PINC, column);
 4ce:	63 b3       	in	r22, 0x13	; 19
 4d0:	e9 2f       	mov	r30, r25
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	21 e0       	ldi	r18, 0x01	; 1
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	a9 01       	movw	r20, r18
 4da:	09 2e       	mov	r0, r25
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <Keypad_u8Scan+0x40>
 4de:	44 0f       	add	r20, r20
 4e0:	55 1f       	adc	r21, r21
 4e2:	0a 94       	dec	r0
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <Keypad_u8Scan+0x3c>
 4e6:	26 2f       	mov	r18, r22
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	24 23       	and	r18, r20
 4ec:	35 23       	and	r19, r21
 4ee:	09 2e       	mov	r0, r25
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <Keypad_u8Scan+0x54>
 4f2:	35 95       	asr	r19
 4f4:	27 95       	ror	r18
 4f6:	0a 94       	dec	r0
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <Keypad_u8Scan+0x50>
			if(scan == 0)
 4fa:	21 11       	cpse	r18, r1
 4fc:	0b c0       	rjmp	.+22     	; 0x514 <Keypad_u8Scan+0x72>
			{
				buttonPressed = kp[row][column - 4];
 4fe:	34 97       	sbiw	r30, 0x04	; 4
 500:	9d 01       	movw	r18, r26
 502:	22 0f       	add	r18, r18
 504:	33 1f       	adc	r19, r19
 506:	2a 0f       	add	r18, r26
 508:	3b 1f       	adc	r19, r27
 50a:	2e 57       	subi	r18, 0x7E	; 126
 50c:	3f 4f       	sbci	r19, 0xFF	; 255
 50e:	e2 0f       	add	r30, r18
 510:	f3 1f       	adc	r31, r19
 512:	80 81       	ld	r24, Z

	for(row = 0; row < N_Row; ++row)
	{
		PORTC |= 0x0f;
		CLR_BIT(PORTC, row);
		for(column = 4; column < (N_Row + N_Col); ++column)
 514:	9f 5f       	subi	r25, 0xFF	; 255
 516:	97 30       	cpi	r25, 0x07	; 7
 518:	d0 f2       	brcs	.-76     	; 0x4ce <Keypad_u8Scan+0x2c>
	u8 row = 0;
	u8 column = 0;
	u8 scan = 0;
	u8 buttonPressed = 0;

	for(row = 0; row < N_Row; ++row)
 51a:	7f 5f       	subi	r23, 0xFF	; 255
 51c:	74 30       	cpi	r23, 0x04	; 4
 51e:	20 f2       	brcs	.-120    	; 0x4a8 <Keypad_u8Scan+0x6>
			}
		}
	}
	
	return buttonPressed;
}
 520:	08 95       	ret

00000522 <getKey>:
u8 getKey(void)
{
	u8 key = 0;

	/* Wait for key release if pressed on entry */
	while(Keypad_u8Scan() != 0)
 522:	06 c0       	rjmp	.+12     	; 0x530 <getKey+0xe>
 524:	83 ec       	ldi	r24, 0xC3	; 195
 526:	99 e0       	ldi	r25, 0x09	; 9
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <getKey+0x6>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <getKey+0xc>
 52e:	00 00       	nop
 530:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Keypad_u8Scan>
 534:	81 11       	cpse	r24, r1
 536:	f6 cf       	rjmp	.-20     	; 0x524 <getKey+0x2>
	}

	/* Wait for new key press */
	do
	{
		key = Keypad_u8Scan();
 538:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Keypad_u8Scan>

	} while(key == 0);
 53c:	88 23       	and	r24, r24
 53e:	e1 f3       	breq	.-8      	; 0x538 <getKey+0x16>

	return key;
 540:	08 95       	ret

00000542 <send_falling_edge>:
	#endif
}

void send_falling_edge(void)
{
	DIO_write(EN_PORT, EN_PIN, 1);
 542:	41 e0       	ldi	r20, 0x01	; 1
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	81 e4       	ldi	r24, 0x41	; 65
 548:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_write>
 54c:	83 ef       	ldi	r24, 0xF3	; 243
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	01 97       	sbiw	r24, 0x01	; 1
 552:	f1 f7       	brne	.-4      	; 0x550 <send_falling_edge+0xe>
 554:	00 c0       	rjmp	.+0      	; 0x556 <send_falling_edge+0x14>
 556:	00 00       	nop
	_delay_ms(2);
	DIO_write(EN_PORT, EN_PIN, 0);
 558:	40 e0       	ldi	r20, 0x00	; 0
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	81 e4       	ldi	r24, 0x41	; 65
 55e:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_write>
 562:	83 ef       	ldi	r24, 0xF3	; 243
 564:	91 e0       	ldi	r25, 0x01	; 1
 566:	01 97       	sbiw	r24, 0x01	; 1
 568:	f1 f7       	brne	.-4      	; 0x566 <send_falling_edge+0x24>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <send_falling_edge+0x2a>
 56c:	00 00       	nop
 56e:	08 95       	ret

00000570 <LCD_vSend_cmd>:
	_delay_ms(2);
}

void LCD_vSend_cmd(c8 cmd)
{
 570:	cf 93       	push	r28
 572:	c8 2f       	mov	r28, r24
		DIO_write(RS_PORT, RS_PIN, 0);
		send_falling_edge();
	
	/* We will work on 4-bis Mode */
	#elif defined four_bits_mode
		write_high_nibble(LCD_PORT, cmd >> 4);
 574:	68 2f       	mov	r22, r24
 576:	62 95       	swap	r22
 578:	6f 70       	andi	r22, 0x0F	; 15
 57a:	84 e4       	ldi	r24, 0x44	; 68
 57c:	0e 94 20 02 	call	0x440	; 0x440 <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 0);
 580:	40 e0       	ldi	r20, 0x00	; 0
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	81 e4       	ldi	r24, 0x41	; 65
 586:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_write>
		send_falling_edge();
 58a:	0e 94 a1 02 	call	0x542	; 0x542 <send_falling_edge>
		write_high_nibble(LCD_PORT, cmd);
 58e:	6c 2f       	mov	r22, r28
 590:	84 e4       	ldi	r24, 0x44	; 68
 592:	0e 94 20 02 	call	0x440	; 0x440 <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 0);
 596:	40 e0       	ldi	r20, 0x00	; 0
 598:	61 e0       	ldi	r22, 0x01	; 1
 59a:	81 e4       	ldi	r24, 0x41	; 65
 59c:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_write>
		send_falling_edge();
 5a0:	0e 94 a1 02 	call	0x542	; 0x542 <send_falling_edge>
 5a4:	89 ef       	ldi	r24, 0xF9	; 249
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <LCD_vSend_cmd+0x38>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <LCD_vSend_cmd+0x3e>
 5ae:	00 00       	nop

	#endif
	_delay_ms(1);
}
 5b0:	cf 91       	pop	r28
 5b2:	08 95       	ret

000005b4 <LCD_vInit>:
 5b4:	87 e8       	ldi	r24, 0x87	; 135
 5b6:	93 e1       	ldi	r25, 0x13	; 19
 5b8:	01 97       	sbiw	r24, 0x01	; 1
 5ba:	f1 f7       	brne	.-4      	; 0x5b8 <LCD_vInit+0x4>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <LCD_vInit+0xa>
 5be:	00 00       	nop
	#elif defined four_bits_mode
		//for (counter = 4; counter < LCD_NPINs; ++counter)
		//{
			//DIO_vsetPINDir(LCD_PORT, counter, 1);
		//}
		DIO_vsetPINDir(LCD_PORT, 4, 1);
 5c0:	41 e0       	ldi	r20, 0x01	; 1
 5c2:	64 e0       	ldi	r22, 0x04	; 4
 5c4:	84 e4       	ldi	r24, 0x44	; 68
 5c6:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vsetPINDir>
		DIO_vsetPINDir(LCD_PORT, 5, 1);
 5ca:	41 e0       	ldi	r20, 0x01	; 1
 5cc:	65 e0       	ldi	r22, 0x05	; 5
 5ce:	84 e4       	ldi	r24, 0x44	; 68
 5d0:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vsetPINDir>
		DIO_vsetPINDir(LCD_PORT, 6, 1);
 5d4:	41 e0       	ldi	r20, 0x01	; 1
 5d6:	66 e0       	ldi	r22, 0x06	; 6
 5d8:	84 e4       	ldi	r24, 0x44	; 68
 5da:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vsetPINDir>
		DIO_vsetPINDir(LCD_PORT, 7, 1);
 5de:	41 e0       	ldi	r20, 0x01	; 1
 5e0:	67 e0       	ldi	r22, 0x07	; 7
 5e2:	84 e4       	ldi	r24, 0x44	; 68
 5e4:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vsetPINDir>
		DIO_vsetPINDir(EN_PORT, EN_PIN, 1);
 5e8:	41 e0       	ldi	r20, 0x01	; 1
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	81 e4       	ldi	r24, 0x41	; 65
 5ee:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vsetPINDir>
		DIO_vsetPINDir(RW_PORT, RW_PIN, 1);
 5f2:	41 e0       	ldi	r20, 0x01	; 1
 5f4:	62 e0       	ldi	r22, 0x02	; 2
 5f6:	81 e4       	ldi	r24, 0x41	; 65
 5f8:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vsetPINDir>
		DIO_vsetPINDir(RS_PORT, RS_PIN, 1);
 5fc:	41 e0       	ldi	r20, 0x01	; 1
 5fe:	61 e0       	ldi	r22, 0x01	; 1
 600:	81 e4       	ldi	r24, 0x41	; 65
 602:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vsetPINDir>
   		DIO_write(RW_PORT, RW_PIN, 0);
 606:	40 e0       	ldi	r20, 0x00	; 0
 608:	62 e0       	ldi	r22, 0x02	; 2
 60a:	81 e4       	ldi	r24, 0x41	; 65
 60c:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_write>
		LCD_vSend_cmd(RETURN_HOME); /* Return Home (row: 0, col: 0) */
 610:	82 e0       	ldi	r24, 0x02	; 2
 612:	0e 94 b8 02 	call	0x570	; 0x570 <LCD_vSend_cmd>
 616:	83 ec       	ldi	r24, 0xC3	; 195
 618:	99 e0       	ldi	r25, 0x09	; 9
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <LCD_vInit+0x66>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <LCD_vInit+0x6c>
 620:	00 00       	nop
		_delay_ms(10);
		LCD_vSend_cmd(FOUR_BITS); /* 4-bits Mode */
 622:	88 e2       	ldi	r24, 0x28	; 40
 624:	0e 94 b8 02 	call	0x570	; 0x570 <LCD_vSend_cmd>
 628:	89 ef       	ldi	r24, 0xF9	; 249
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	01 97       	sbiw	r24, 0x01	; 1
 62e:	f1 f7       	brne	.-4      	; 0x62c <LCD_vInit+0x78>
 630:	00 c0       	rjmp	.+0      	; 0x632 <LCD_vInit+0x7e>
 632:	00 00       	nop
		_delay_ms(1);
		LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON); /* Display ON Cursor ON */
 634:	8e e0       	ldi	r24, 0x0E	; 14
 636:	0e 94 b8 02 	call	0x570	; 0x570 <LCD_vSend_cmd>
 63a:	89 ef       	ldi	r24, 0xF9	; 249
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	01 97       	sbiw	r24, 0x01	; 1
 640:	f1 f7       	brne	.-4      	; 0x63e <LCD_vInit+0x8a>
 642:	00 c0       	rjmp	.+0      	; 0x644 <LCD_vInit+0x90>
 644:	00 00       	nop
		_delay_ms(1);
		LCD_vSend_cmd(CLR_SCREEN); /* Clear Screen */
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	0e 94 b8 02 	call	0x570	; 0x570 <LCD_vSend_cmd>
 64c:	83 ec       	ldi	r24, 0xC3	; 195
 64e:	99 e0       	ldi	r25, 0x09	; 9
 650:	01 97       	sbiw	r24, 0x01	; 1
 652:	f1 f7       	brne	.-4      	; 0x650 <LCD_vInit+0x9c>
 654:	00 c0       	rjmp	.+0      	; 0x656 <LCD_vInit+0xa2>
 656:	00 00       	nop
		_delay_ms(10);
		LCD_vSend_cmd(ENTRY_MODE); /* Entry Mode */
 658:	86 e0       	ldi	r24, 0x06	; 6
 65a:	0e 94 b8 02 	call	0x570	; 0x570 <LCD_vSend_cmd>
 65e:	89 ef       	ldi	r24, 0xF9	; 249
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	01 97       	sbiw	r24, 0x01	; 1
 664:	f1 f7       	brne	.-4      	; 0x662 <LCD_vInit+0xae>
 666:	00 c0       	rjmp	.+0      	; 0x668 <LCD_vInit+0xb4>
 668:	00 00       	nop
 66a:	08 95       	ret

0000066c <LCD_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD_vSend_char(c8 data)
{
 66c:	cf 93       	push	r28
 66e:	c8 2f       	mov	r28, r24
		DIO_write(RS_PORT, RS_PIN, 1);
		send_falling_edge();
	
	/* We will work on 4-bis Mode */
	#elif defined four_bits_mode
		write_high_nibble(LCD_PORT, (data >> 4));
 670:	68 2f       	mov	r22, r24
 672:	62 95       	swap	r22
 674:	6f 70       	andi	r22, 0x0F	; 15
 676:	84 e4       	ldi	r24, 0x44	; 68
 678:	0e 94 20 02 	call	0x440	; 0x440 <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 1);
 67c:	41 e0       	ldi	r20, 0x01	; 1
 67e:	61 e0       	ldi	r22, 0x01	; 1
 680:	81 e4       	ldi	r24, 0x41	; 65
 682:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_write>
		send_falling_edge();
 686:	0e 94 a1 02 	call	0x542	; 0x542 <send_falling_edge>
		write_high_nibble(LCD_PORT, data);
 68a:	6c 2f       	mov	r22, r28
 68c:	84 e4       	ldi	r24, 0x44	; 68
 68e:	0e 94 20 02 	call	0x440	; 0x440 <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 1);
 692:	41 e0       	ldi	r20, 0x01	; 1
 694:	61 e0       	ldi	r22, 0x01	; 1
 696:	81 e4       	ldi	r24, 0x41	; 65
 698:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_write>
		send_falling_edge();
 69c:	0e 94 a1 02 	call	0x542	; 0x542 <send_falling_edge>
 6a0:	89 ef       	ldi	r24, 0xF9	; 249
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	01 97       	sbiw	r24, 0x01	; 1
 6a6:	f1 f7       	brne	.-4      	; 0x6a4 <LCD_vSend_char+0x38>
 6a8:	00 c0       	rjmp	.+0      	; 0x6aa <LCD_vSend_char+0x3e>
 6aa:	00 00       	nop

	#endif
	_delay_ms(1);
}
 6ac:	cf 91       	pop	r28
 6ae:	08 95       	ret

000006b0 <LCD_vSend_string>:

void LCD_vSend_string(c8 * data)
{
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	ec 01       	movw	r28, r24
	//{
		//LCD_vSend_char(*data);
		//data = data + 1; /* To next char */
	//}

    for(counter = 0; data[counter] != '\0'; ++counter)
 6b6:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <counter>
 6ba:	07 c0       	rjmp	.+14     	; 0x6ca <LCD_vSend_string+0x1a>
    {
	    LCD_vSend_char(data[counter]);
 6bc:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_vSend_char>
	//{
		//LCD_vSend_char(*data);
		//data = data + 1; /* To next char */
	//}

    for(counter = 0; data[counter] != '\0'; ++counter)
 6c0:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <counter>
 6c4:	8f 5f       	subi	r24, 0xFF	; 255
 6c6:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <counter>
 6ca:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <counter>
 6ce:	fe 01       	movw	r30, r28
 6d0:	e8 0f       	add	r30, r24
 6d2:	f1 1d       	adc	r31, r1
 6d4:	80 81       	ld	r24, Z
 6d6:	81 11       	cpse	r24, r1
 6d8:	f1 cf       	rjmp	.-30     	; 0x6bc <LCD_vSend_string+0xc>
    {
	    LCD_vSend_char(data[counter]);
    }
}
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	08 95       	ret

000006e0 <LCD_clearscreen>:

void LCD_clearscreen(void)
{
	LCD_vSend_cmd(CLR_SCREEN);
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	0e 94 b8 02 	call	0x570	; 0x570 <LCD_vSend_cmd>
 6e6:	83 ec       	ldi	r24, 0xC3	; 195
 6e8:	99 e0       	ldi	r25, 0x09	; 9
 6ea:	01 97       	sbiw	r24, 0x01	; 1
 6ec:	f1 f7       	brne	.-4      	; 0x6ea <LCD_clearscreen+0xa>
 6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <LCD_clearscreen+0x10>
 6f0:	00 00       	nop
 6f2:	08 95       	ret

000006f4 <LCD_movecursor>:

void LCD_movecursor(c8 row, c8 coloumn)
{
	char data = 0;
	
	if (row > 2 || row < 1 || coloumn > 16 || coloumn < 1)
 6f4:	9f ef       	ldi	r25, 0xFF	; 255
 6f6:	98 0f       	add	r25, r24
 6f8:	92 30       	cpi	r25, 0x02	; 2
 6fa:	70 f4       	brcc	.+28     	; 0x718 <LCD_movecursor+0x24>
 6fc:	61 31       	cpi	r22, 0x11	; 17
 6fe:	70 f4       	brcc	.+28     	; 0x71c <LCD_movecursor+0x28>
 700:	66 23       	and	r22, r22
 702:	71 f0       	breq	.+28     	; 0x720 <LCD_movecursor+0x2c>
	{
		data = 0x80;
	}
	else if (row == 1)
 704:	81 30       	cpi	r24, 0x01	; 1
 706:	19 f4       	brne	.+6      	; 0x70e <LCD_movecursor+0x1a>
	{
		data = 0x80 + coloumn - 1;
 708:	8f e7       	ldi	r24, 0x7F	; 127
 70a:	86 0f       	add	r24, r22
 70c:	0c c0       	rjmp	.+24     	; 0x726 <LCD_movecursor+0x32>
	}
	else if (row == 2)
 70e:	82 30       	cpi	r24, 0x02	; 2
 710:	49 f4       	brne	.+18     	; 0x724 <LCD_movecursor+0x30>
	{
		data = 0xc0 + coloumn - 1;
 712:	8f eb       	ldi	r24, 0xBF	; 191
 714:	86 0f       	add	r24, r22
 716:	07 c0       	rjmp	.+14     	; 0x726 <LCD_movecursor+0x32>
{
	char data = 0;
	
	if (row > 2 || row < 1 || coloumn > 16 || coloumn < 1)
	{
		data = 0x80;
 718:	80 e8       	ldi	r24, 0x80	; 128
 71a:	05 c0       	rjmp	.+10     	; 0x726 <LCD_movecursor+0x32>
 71c:	80 e8       	ldi	r24, 0x80	; 128
 71e:	03 c0       	rjmp	.+6      	; 0x726 <LCD_movecursor+0x32>
 720:	80 e8       	ldi	r24, 0x80	; 128
 722:	01 c0       	rjmp	.+2      	; 0x726 <LCD_movecursor+0x32>
	_delay_ms(10);
}

void LCD_movecursor(c8 row, c8 coloumn)
{
	char data = 0;
 724:	80 e0       	ldi	r24, 0x00	; 0
	else if (row == 2)
	{
		data = 0xc0 + coloumn - 1;
	}
	
	LCD_vSend_cmd(data);
 726:	0e 94 b8 02 	call	0x570	; 0x570 <LCD_vSend_cmd>
 72a:	89 ef       	ldi	r24, 0xF9	; 249
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	01 97       	sbiw	r24, 0x01	; 1
 730:	f1 f7       	brne	.-4      	; 0x72e <LCD_movecursor+0x3a>
 732:	00 c0       	rjmp	.+0      	; 0x734 <LCD_movecursor+0x40>
 734:	00 00       	nop
 736:	08 95       	ret

00000738 <LCD_SendStringRowCol>:
	_delay_ms(1);
}

void LCD_SendStringRowCol(u8 row, u8 col, c8 * data)
{
 738:	cf 93       	push	r28
 73a:	df 93       	push	r29
 73c:	ea 01       	movw	r28, r20
	LCD_movecursor(row, col);
 73e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_movecursor>
    for(counter = 0; data[counter] != '\0'; ++counter)
 742:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <counter>
 746:	07 c0       	rjmp	.+14     	; 0x756 <LCD_SendStringRowCol+0x1e>
    {
	    LCD_vSend_char(data[counter]);
 748:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_vSend_char>
}

void LCD_SendStringRowCol(u8 row, u8 col, c8 * data)
{
	LCD_movecursor(row, col);
    for(counter = 0; data[counter] != '\0'; ++counter)
 74c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <counter>
 750:	8f 5f       	subi	r24, 0xFF	; 255
 752:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <counter>
 756:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <counter>
 75a:	fe 01       	movw	r30, r28
 75c:	e8 0f       	add	r30, r24
 75e:	f1 1d       	adc	r31, r1
 760:	80 81       	ld	r24, Z
 762:	81 11       	cpse	r24, r1
 764:	f1 cf       	rjmp	.-30     	; 0x748 <LCD_SendStringRowCol+0x10>
    {
	    LCD_vSend_char(data[counter]);
    }
}
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	08 95       	ret

0000076c <main>:
#include "app.h"
#include "ADC.h"
int main(void)
{
	Init();
 76c:	0e 94 63 00 	call	0xc6	; 0xc6 <Init>
	Welcome_Screen();
 770:	0e 94 75 00 	call	0xea	; 0xea <Welcome_Screen>
	IDLE_Screen();
 774:	0e 94 c7 00 	call	0x18e	; 0x18e <IDLE_Screen>
	initADC0();
 778:	0e 94 49 00 	call	0x92	; 0x92 <initADC0>
		//LCD_vSend_char('A');
		//T0delay();
		//LCD_vSend_char('B');
		//T0delay();
		
		u32 result = adc_read();
 77c:	0e 94 50 00 	call	0xa0	; 0xa0 <adc_read>
		float64_t Vr = sampleToVolts(result);
 780:	0e 94 5a 00 	call	0xb4	; 0xb4 <sampleToVolts>
		
	    u8 val = UsrGetVal();
 784:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <UsrGetVal>
	    
	    if (val == '#')
 788:	83 32       	cpi	r24, 0x23	; 35
 78a:	c1 f7       	brne	.-16     	; 0x77c <main+0x10>
	    {
			LCD_SendStringRowCol(2, 1, "STATE:OPERATION");
 78c:	4e e8       	ldi	r20, 0x8E	; 142
 78e:	50 e0       	ldi	r21, 0x00	; 0
 790:	61 e0       	ldi	r22, 0x01	; 1
 792:	82 e0       	ldi	r24, 0x02	; 2
 794:	0e 94 9c 03 	call	0x738	; 0x738 <LCD_SendStringRowCol>
			LCD_movecursor(1, 5);
 798:	65 e0       	ldi	r22, 0x05	; 5
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_movecursor>
			//u8 value = UsrGetVal();
			//Start_Communication();
			tc72_read();
 7a0:	0e 94 01 01 	call	0x202	; 0x202 <tc72_read>
 7a4:	eb cf       	rjmp	.-42     	; 0x77c <main+0x10>

000007a6 <SPI_masterInit>:
	//for (counter = 0; counter < SPI_NPINs; ++counter)
	//{
	//DIO_vsetPINDir(SPI_PORT, SPI_PINs[counter], 0xff);
	//}
	
	DDRB = (1 << MOSI) | (1 << SCK) | (1 << SS);
 7a6:	80 eb       	ldi	r24, 0xB0	; 176
 7a8:	87 bb       	out	0x17, r24	; 23
	
	/* Enable Master Mode */
	SET_BIT(SPCR, MSTR);
 7aa:	8d b1       	in	r24, 0x0d	; 13
 7ac:	80 61       	ori	r24, 0x10	; 16
 7ae:	8d b9       	out	0x0d, r24	; 13
	/* Set clock to fosc/16*/
	SET_BIT(SPCR, SPR0);
 7b0:	8d b1       	in	r24, 0x0d	; 13
 7b2:	81 60       	ori	r24, 0x01	; 1
 7b4:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(SPCR, SPR1);
 7b6:	8d b1       	in	r24, 0x0d	; 13
 7b8:	82 60       	ori	r24, 0x02	; 2
 7ba:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(SPCR, CPHA);
 7bc:	8d b1       	in	r24, 0x0d	; 13
 7be:	84 60       	ori	r24, 0x04	; 4
 7c0:	8d b9       	out	0x0d, r24	; 13
	/* Enable SPI */
	SET_BIT(SPCR, SPE);
 7c2:	8d b1       	in	r24, 0x0d	; 13
 7c4:	80 64       	ori	r24, 0x40	; 64
 7c6:	8d b9       	out	0x0d, r24	; 13
	/* Enable interrupt */
	SET_BIT(SPCR, SPIE);
 7c8:	8d b1       	in	r24, 0x0d	; 13
 7ca:	80 68       	ori	r24, 0x80	; 128
 7cc:	8d b9       	out	0x0d, r24	; 13
 7ce:	08 95       	ret

000007d0 <SPI_masterTransmit>:
}

void SPI_masterTransmit(char data)
{
	/* Start the Transmission */
	SPDR = data;
 7d0:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for Completion */
	while(!(SPSR & (1 << SPIF)));
 7d2:	77 9b       	sbis	0x0e, 7	; 14
 7d4:	fe cf       	rjmp	.-4      	; 0x7d2 <SPI_masterTransmit+0x2>
}
 7d6:	08 95       	ret

000007d8 <SPI_masterReceive>:

char SPI_masterReceive(void)
{
	/* wait for the SPI buffer's full */
	while(!(SPSR & (1 << SPIF)));
 7d8:	77 9b       	sbis	0x0e, 7	; 14
 7da:	fe cf       	rjmp	.-4      	; 0x7d8 <SPI_masterReceive>
	/* return SPI buffer */
	return SPDR;
 7dc:	8f b1       	in	r24, 0x0f	; 15
}
 7de:	08 95       	ret

000007e0 <TC72_Init>:

void TC72_Init(void)
{
	SET_BIT(PORTB, 4);
 7e0:	88 b3       	in	r24, 0x18	; 24
 7e2:	80 61       	ori	r24, 0x10	; 16
 7e4:	88 bb       	out	0x18, r24	; 24
	/* Select control register */
	SPI_masterTransmit(0x80);
 7e6:	80 e8       	ldi	r24, 0x80	; 128
 7e8:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <SPI_masterTransmit>
	
	/* Select Continuous temperature conversion */
	SPI_masterTransmit(0x40);
 7ec:	80 e4       	ldi	r24, 0x40	; 64
 7ee:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <SPI_masterTransmit>
	CLR_BIT(PORTB, 4);
 7f2:	88 b3       	in	r24, 0x18	; 24
 7f4:	8f 7e       	andi	r24, 0xEF	; 239
 7f6:	88 bb       	out	0x18, r24	; 24
 7f8:	8b e7       	ldi	r24, 0x7B	; 123
 7fa:	92 e9       	ldi	r25, 0x92	; 146
 7fc:	01 97       	sbiw	r24, 0x01	; 1
 7fe:	f1 f7       	brne	.-4      	; 0x7fc <TC72_Init+0x1c>
 800:	00 c0       	rjmp	.+0      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 802:	00 00       	nop
 804:	08 95       	ret

00000806 <__floatunsisf>:
 806:	e8 94       	clt
 808:	09 c0       	rjmp	.+18     	; 0x81c <__floatsisf+0x12>

0000080a <__floatsisf>:
 80a:	97 fb       	bst	r25, 7
 80c:	3e f4       	brtc	.+14     	; 0x81c <__floatsisf+0x12>
 80e:	90 95       	com	r25
 810:	80 95       	com	r24
 812:	70 95       	com	r23
 814:	61 95       	neg	r22
 816:	7f 4f       	sbci	r23, 0xFF	; 255
 818:	8f 4f       	sbci	r24, 0xFF	; 255
 81a:	9f 4f       	sbci	r25, 0xFF	; 255
 81c:	99 23       	and	r25, r25
 81e:	a9 f0       	breq	.+42     	; 0x84a <__floatsisf+0x40>
 820:	f9 2f       	mov	r31, r25
 822:	96 e9       	ldi	r25, 0x96	; 150
 824:	bb 27       	eor	r27, r27
 826:	93 95       	inc	r25
 828:	f6 95       	lsr	r31
 82a:	87 95       	ror	r24
 82c:	77 95       	ror	r23
 82e:	67 95       	ror	r22
 830:	b7 95       	ror	r27
 832:	f1 11       	cpse	r31, r1
 834:	f8 cf       	rjmp	.-16     	; 0x826 <__floatsisf+0x1c>
 836:	fa f4       	brpl	.+62     	; 0x876 <__stack+0x17>
 838:	bb 0f       	add	r27, r27
 83a:	11 f4       	brne	.+4      	; 0x840 <__floatsisf+0x36>
 83c:	60 ff       	sbrs	r22, 0
 83e:	1b c0       	rjmp	.+54     	; 0x876 <__stack+0x17>
 840:	6f 5f       	subi	r22, 0xFF	; 255
 842:	7f 4f       	sbci	r23, 0xFF	; 255
 844:	8f 4f       	sbci	r24, 0xFF	; 255
 846:	9f 4f       	sbci	r25, 0xFF	; 255
 848:	16 c0       	rjmp	.+44     	; 0x876 <__stack+0x17>
 84a:	88 23       	and	r24, r24
 84c:	11 f0       	breq	.+4      	; 0x852 <__floatsisf+0x48>
 84e:	96 e9       	ldi	r25, 0x96	; 150
 850:	11 c0       	rjmp	.+34     	; 0x874 <__stack+0x15>
 852:	77 23       	and	r23, r23
 854:	21 f0       	breq	.+8      	; 0x85e <__floatsisf+0x54>
 856:	9e e8       	ldi	r25, 0x8E	; 142
 858:	87 2f       	mov	r24, r23
 85a:	76 2f       	mov	r23, r22
 85c:	05 c0       	rjmp	.+10     	; 0x868 <__stack+0x9>
 85e:	66 23       	and	r22, r22
 860:	71 f0       	breq	.+28     	; 0x87e <__stack+0x1f>
 862:	96 e8       	ldi	r25, 0x86	; 134
 864:	86 2f       	mov	r24, r22
 866:	70 e0       	ldi	r23, 0x00	; 0
 868:	60 e0       	ldi	r22, 0x00	; 0
 86a:	2a f0       	brmi	.+10     	; 0x876 <__stack+0x17>
 86c:	9a 95       	dec	r25
 86e:	66 0f       	add	r22, r22
 870:	77 1f       	adc	r23, r23
 872:	88 1f       	adc	r24, r24
 874:	da f7       	brpl	.-10     	; 0x86c <__stack+0xd>
 876:	88 0f       	add	r24, r24
 878:	96 95       	lsr	r25
 87a:	87 95       	ror	r24
 87c:	97 f9       	bld	r25, 7
 87e:	08 95       	ret

00000880 <__mulsf3>:
 880:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__mulsf3x>
 884:	0c 94 c4 04 	jmp	0x988	; 0x988 <__fp_round>
 888:	0e 94 b6 04 	call	0x96c	; 0x96c <__fp_pscA>
 88c:	38 f0       	brcs	.+14     	; 0x89c <__mulsf3+0x1c>
 88e:	0e 94 bd 04 	call	0x97a	; 0x97a <__fp_pscB>
 892:	20 f0       	brcs	.+8      	; 0x89c <__mulsf3+0x1c>
 894:	95 23       	and	r25, r21
 896:	11 f0       	breq	.+4      	; 0x89c <__mulsf3+0x1c>
 898:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__fp_inf>
 89c:	0c 94 b3 04 	jmp	0x966	; 0x966 <__fp_nan>
 8a0:	11 24       	eor	r1, r1
 8a2:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__fp_szero>

000008a6 <__mulsf3x>:
 8a6:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__fp_split3>
 8aa:	70 f3       	brcs	.-36     	; 0x888 <__mulsf3+0x8>

000008ac <__mulsf3_pse>:
 8ac:	95 9f       	mul	r25, r21
 8ae:	c1 f3       	breq	.-16     	; 0x8a0 <__mulsf3+0x20>
 8b0:	95 0f       	add	r25, r21
 8b2:	50 e0       	ldi	r21, 0x00	; 0
 8b4:	55 1f       	adc	r21, r21
 8b6:	62 9f       	mul	r22, r18
 8b8:	f0 01       	movw	r30, r0
 8ba:	72 9f       	mul	r23, r18
 8bc:	bb 27       	eor	r27, r27
 8be:	f0 0d       	add	r31, r0
 8c0:	b1 1d       	adc	r27, r1
 8c2:	63 9f       	mul	r22, r19
 8c4:	aa 27       	eor	r26, r26
 8c6:	f0 0d       	add	r31, r0
 8c8:	b1 1d       	adc	r27, r1
 8ca:	aa 1f       	adc	r26, r26
 8cc:	64 9f       	mul	r22, r20
 8ce:	66 27       	eor	r22, r22
 8d0:	b0 0d       	add	r27, r0
 8d2:	a1 1d       	adc	r26, r1
 8d4:	66 1f       	adc	r22, r22
 8d6:	82 9f       	mul	r24, r18
 8d8:	22 27       	eor	r18, r18
 8da:	b0 0d       	add	r27, r0
 8dc:	a1 1d       	adc	r26, r1
 8de:	62 1f       	adc	r22, r18
 8e0:	73 9f       	mul	r23, r19
 8e2:	b0 0d       	add	r27, r0
 8e4:	a1 1d       	adc	r26, r1
 8e6:	62 1f       	adc	r22, r18
 8e8:	83 9f       	mul	r24, r19
 8ea:	a0 0d       	add	r26, r0
 8ec:	61 1d       	adc	r22, r1
 8ee:	22 1f       	adc	r18, r18
 8f0:	74 9f       	mul	r23, r20
 8f2:	33 27       	eor	r19, r19
 8f4:	a0 0d       	add	r26, r0
 8f6:	61 1d       	adc	r22, r1
 8f8:	23 1f       	adc	r18, r19
 8fa:	84 9f       	mul	r24, r20
 8fc:	60 0d       	add	r22, r0
 8fe:	21 1d       	adc	r18, r1
 900:	82 2f       	mov	r24, r18
 902:	76 2f       	mov	r23, r22
 904:	6a 2f       	mov	r22, r26
 906:	11 24       	eor	r1, r1
 908:	9f 57       	subi	r25, 0x7F	; 127
 90a:	50 40       	sbci	r21, 0x00	; 0
 90c:	9a f0       	brmi	.+38     	; 0x934 <__mulsf3_pse+0x88>
 90e:	f1 f0       	breq	.+60     	; 0x94c <__mulsf3_pse+0xa0>
 910:	88 23       	and	r24, r24
 912:	4a f0       	brmi	.+18     	; 0x926 <__mulsf3_pse+0x7a>
 914:	ee 0f       	add	r30, r30
 916:	ff 1f       	adc	r31, r31
 918:	bb 1f       	adc	r27, r27
 91a:	66 1f       	adc	r22, r22
 91c:	77 1f       	adc	r23, r23
 91e:	88 1f       	adc	r24, r24
 920:	91 50       	subi	r25, 0x01	; 1
 922:	50 40       	sbci	r21, 0x00	; 0
 924:	a9 f7       	brne	.-22     	; 0x910 <__mulsf3_pse+0x64>
 926:	9e 3f       	cpi	r25, 0xFE	; 254
 928:	51 05       	cpc	r21, r1
 92a:	80 f0       	brcs	.+32     	; 0x94c <__mulsf3_pse+0xa0>
 92c:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__fp_inf>
 930:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__fp_szero>
 934:	5f 3f       	cpi	r21, 0xFF	; 255
 936:	e4 f3       	brlt	.-8      	; 0x930 <__mulsf3_pse+0x84>
 938:	98 3e       	cpi	r25, 0xE8	; 232
 93a:	d4 f3       	brlt	.-12     	; 0x930 <__mulsf3_pse+0x84>
 93c:	86 95       	lsr	r24
 93e:	77 95       	ror	r23
 940:	67 95       	ror	r22
 942:	b7 95       	ror	r27
 944:	f7 95       	ror	r31
 946:	e7 95       	ror	r30
 948:	9f 5f       	subi	r25, 0xFF	; 255
 94a:	c1 f7       	brne	.-16     	; 0x93c <__mulsf3_pse+0x90>
 94c:	fe 2b       	or	r31, r30
 94e:	88 0f       	add	r24, r24
 950:	91 1d       	adc	r25, r1
 952:	96 95       	lsr	r25
 954:	87 95       	ror	r24
 956:	97 f9       	bld	r25, 7
 958:	08 95       	ret

0000095a <__fp_inf>:
 95a:	97 f9       	bld	r25, 7
 95c:	9f 67       	ori	r25, 0x7F	; 127
 95e:	80 e8       	ldi	r24, 0x80	; 128
 960:	70 e0       	ldi	r23, 0x00	; 0
 962:	60 e0       	ldi	r22, 0x00	; 0
 964:	08 95       	ret

00000966 <__fp_nan>:
 966:	9f ef       	ldi	r25, 0xFF	; 255
 968:	80 ec       	ldi	r24, 0xC0	; 192
 96a:	08 95       	ret

0000096c <__fp_pscA>:
 96c:	00 24       	eor	r0, r0
 96e:	0a 94       	dec	r0
 970:	16 16       	cp	r1, r22
 972:	17 06       	cpc	r1, r23
 974:	18 06       	cpc	r1, r24
 976:	09 06       	cpc	r0, r25
 978:	08 95       	ret

0000097a <__fp_pscB>:
 97a:	00 24       	eor	r0, r0
 97c:	0a 94       	dec	r0
 97e:	12 16       	cp	r1, r18
 980:	13 06       	cpc	r1, r19
 982:	14 06       	cpc	r1, r20
 984:	05 06       	cpc	r0, r21
 986:	08 95       	ret

00000988 <__fp_round>:
 988:	09 2e       	mov	r0, r25
 98a:	03 94       	inc	r0
 98c:	00 0c       	add	r0, r0
 98e:	11 f4       	brne	.+4      	; 0x994 <__fp_round+0xc>
 990:	88 23       	and	r24, r24
 992:	52 f0       	brmi	.+20     	; 0x9a8 <__fp_round+0x20>
 994:	bb 0f       	add	r27, r27
 996:	40 f4       	brcc	.+16     	; 0x9a8 <__fp_round+0x20>
 998:	bf 2b       	or	r27, r31
 99a:	11 f4       	brne	.+4      	; 0x9a0 <__fp_round+0x18>
 99c:	60 ff       	sbrs	r22, 0
 99e:	04 c0       	rjmp	.+8      	; 0x9a8 <__fp_round+0x20>
 9a0:	6f 5f       	subi	r22, 0xFF	; 255
 9a2:	7f 4f       	sbci	r23, 0xFF	; 255
 9a4:	8f 4f       	sbci	r24, 0xFF	; 255
 9a6:	9f 4f       	sbci	r25, 0xFF	; 255
 9a8:	08 95       	ret

000009aa <__fp_split3>:
 9aa:	57 fd       	sbrc	r21, 7
 9ac:	90 58       	subi	r25, 0x80	; 128
 9ae:	44 0f       	add	r20, r20
 9b0:	55 1f       	adc	r21, r21
 9b2:	59 f0       	breq	.+22     	; 0x9ca <__fp_splitA+0x10>
 9b4:	5f 3f       	cpi	r21, 0xFF	; 255
 9b6:	71 f0       	breq	.+28     	; 0x9d4 <__fp_splitA+0x1a>
 9b8:	47 95       	ror	r20

000009ba <__fp_splitA>:
 9ba:	88 0f       	add	r24, r24
 9bc:	97 fb       	bst	r25, 7
 9be:	99 1f       	adc	r25, r25
 9c0:	61 f0       	breq	.+24     	; 0x9da <__fp_splitA+0x20>
 9c2:	9f 3f       	cpi	r25, 0xFF	; 255
 9c4:	79 f0       	breq	.+30     	; 0x9e4 <__fp_splitA+0x2a>
 9c6:	87 95       	ror	r24
 9c8:	08 95       	ret
 9ca:	12 16       	cp	r1, r18
 9cc:	13 06       	cpc	r1, r19
 9ce:	14 06       	cpc	r1, r20
 9d0:	55 1f       	adc	r21, r21
 9d2:	f2 cf       	rjmp	.-28     	; 0x9b8 <__fp_split3+0xe>
 9d4:	46 95       	lsr	r20
 9d6:	f1 df       	rcall	.-30     	; 0x9ba <__fp_splitA>
 9d8:	08 c0       	rjmp	.+16     	; 0x9ea <__fp_splitA+0x30>
 9da:	16 16       	cp	r1, r22
 9dc:	17 06       	cpc	r1, r23
 9de:	18 06       	cpc	r1, r24
 9e0:	99 1f       	adc	r25, r25
 9e2:	f1 cf       	rjmp	.-30     	; 0x9c6 <__fp_splitA+0xc>
 9e4:	86 95       	lsr	r24
 9e6:	71 05       	cpc	r23, r1
 9e8:	61 05       	cpc	r22, r1
 9ea:	08 94       	sec
 9ec:	08 95       	ret

000009ee <__fp_zero>:
 9ee:	e8 94       	clt

000009f0 <__fp_szero>:
 9f0:	bb 27       	eor	r27, r27
 9f2:	66 27       	eor	r22, r22
 9f4:	77 27       	eor	r23, r23
 9f6:	cb 01       	movw	r24, r22
 9f8:	97 f9       	bld	r25, 7
 9fa:	08 95       	ret

000009fc <itoa>:
 9fc:	45 32       	cpi	r20, 0x25	; 37
 9fe:	51 05       	cpc	r21, r1
 a00:	20 f4       	brcc	.+8      	; 0xa0a <itoa+0xe>
 a02:	42 30       	cpi	r20, 0x02	; 2
 a04:	10 f0       	brcs	.+4      	; 0xa0a <itoa+0xe>
 a06:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__itoa_ncheck>
 a0a:	fb 01       	movw	r30, r22
 a0c:	10 82       	st	Z, r1
 a0e:	cb 01       	movw	r24, r22
 a10:	08 95       	ret

00000a12 <__itoa_ncheck>:
 a12:	bb 27       	eor	r27, r27
 a14:	4a 30       	cpi	r20, 0x0A	; 10
 a16:	31 f4       	brne	.+12     	; 0xa24 <__itoa_ncheck+0x12>
 a18:	99 23       	and	r25, r25
 a1a:	22 f4       	brpl	.+8      	; 0xa24 <__itoa_ncheck+0x12>
 a1c:	bd e2       	ldi	r27, 0x2D	; 45
 a1e:	90 95       	com	r25
 a20:	81 95       	neg	r24
 a22:	9f 4f       	sbci	r25, 0xFF	; 255
 a24:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__utoa_common>

00000a28 <__utoa_ncheck>:
 a28:	bb 27       	eor	r27, r27

00000a2a <__utoa_common>:
 a2a:	fb 01       	movw	r30, r22
 a2c:	55 27       	eor	r21, r21
 a2e:	aa 27       	eor	r26, r26
 a30:	88 0f       	add	r24, r24
 a32:	99 1f       	adc	r25, r25
 a34:	aa 1f       	adc	r26, r26
 a36:	a4 17       	cp	r26, r20
 a38:	10 f0       	brcs	.+4      	; 0xa3e <__utoa_common+0x14>
 a3a:	a4 1b       	sub	r26, r20
 a3c:	83 95       	inc	r24
 a3e:	50 51       	subi	r21, 0x10	; 16
 a40:	b9 f7       	brne	.-18     	; 0xa30 <__utoa_common+0x6>
 a42:	a0 5d       	subi	r26, 0xD0	; 208
 a44:	aa 33       	cpi	r26, 0x3A	; 58
 a46:	08 f0       	brcs	.+2      	; 0xa4a <__utoa_common+0x20>
 a48:	a9 5d       	subi	r26, 0xD9	; 217
 a4a:	a1 93       	st	Z+, r26
 a4c:	00 97       	sbiw	r24, 0x00	; 0
 a4e:	79 f7       	brne	.-34     	; 0xa2e <__utoa_common+0x4>
 a50:	b1 11       	cpse	r27, r1
 a52:	b1 93       	st	Z+, r27
 a54:	11 92       	st	Z+, r1
 a56:	cb 01       	movw	r24, r22
 a58:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <strrev>

00000a5c <strrev>:
 a5c:	dc 01       	movw	r26, r24
 a5e:	fc 01       	movw	r30, r24
 a60:	67 2f       	mov	r22, r23
 a62:	71 91       	ld	r23, Z+
 a64:	77 23       	and	r23, r23
 a66:	e1 f7       	brne	.-8      	; 0xa60 <strrev+0x4>
 a68:	32 97       	sbiw	r30, 0x02	; 2
 a6a:	04 c0       	rjmp	.+8      	; 0xa74 <strrev+0x18>
 a6c:	7c 91       	ld	r23, X
 a6e:	6d 93       	st	X+, r22
 a70:	70 83       	st	Z, r23
 a72:	62 91       	ld	r22, -Z
 a74:	ae 17       	cp	r26, r30
 a76:	bf 07       	cpc	r27, r31
 a78:	c8 f3       	brcs	.-14     	; 0xa6c <strrev+0x10>
 a7a:	08 95       	ret

00000a7c <_exit>:
 a7c:	f8 94       	cli

00000a7e <__stop_program>:
 a7e:	ff cf       	rjmp	.-2      	; 0xa7e <__stop_program>
