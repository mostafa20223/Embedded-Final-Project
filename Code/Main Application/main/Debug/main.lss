
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000642  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000642  000006d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800082  00800082  000006f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000728  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d9f  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c2f  00000000  00000000  000026bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010aa  00000000  00000000  000032ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  00004394  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000621  00000000  00000000  00004688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001435  00000000  00000000  00004ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000060de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d7 02 	call	0x5ae	; 0x5ae <main>
  8a:	0c 94 1f 03 	jmp	0x63e	; 0x63e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Init>:

static u8 shift = 0;

void Init(void)
{
	LCD_vInit();
  92:	0e 94 13 02 	call	0x426	; 0x426 <LCD_vInit>
	keypad_vInit();
  96:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <keypad_vInit>
	SPI_masterInit();
  9a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <SPI_masterInit>
	TC72_Init();
  9e:	0e 94 01 03 	call	0x602	; 0x602 <TC72_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	82 e5       	ldi	r24, 0x52	; 82
  a6:	97 e0       	ldi	r25, 0x07	; 7
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <Init+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <Init+0x20>
  b2:	00 00       	nop
  b4:	08 95       	ret

000000b6 <Welcome_Screen>:
	_delay_ms(150);
}

void Welcome_Screen(void)
{
	LCD_movecursor(1, 1);
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 9b 02 	call	0x536	; 0x536 <LCD_movecursor>
	
	for (shift = 1; shift < 16; ++shift)
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <Welcome_Screen+0x42>
	{
		LCD_clearscreen();
  c6:	0e 94 91 02 	call	0x522	; 0x522 <LCD_clearscreen>
		LCD_SendStringRowCol(1, shift, "WELCOME");
  ca:	40 e6       	ldi	r20, 0x60	; 96
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <__data_end>
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 bd 02 	call	0x57a	; 0x57a <LCD_SendStringRowCol>
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	81 ee       	ldi	r24, 0xE1	; 225
  dc:	94 e0       	ldi	r25, 0x04	; 4
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <Welcome_Screen+0x28>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <Welcome_Screen+0x32>
  e8:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();
  ea:	0e 94 91 02 	call	0x522	; 0x522 <LCD_clearscreen>

void Welcome_Screen(void)
{
	LCD_movecursor(1, 1);
	
	for (shift = 1; shift < 16; ++shift)
  ee:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__data_end>
  f2:	8f 5f       	subi	r24, 0xFF	; 255
  f4:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
  f8:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__data_end>
  fc:	80 31       	cpi	r24, 0x10	; 16
  fe:	18 f3       	brcs	.-58     	; 0xc6 <Welcome_Screen+0x10>
		LCD_SendStringRowCol(1, shift, "WELCOME");
		_delay_ms(100);
		LCD_clearscreen();
	}

	for (shift = 16; shift > 0; --shift)
 100:	80 e1       	ldi	r24, 0x10	; 16
 102:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
 106:	19 c0       	rjmp	.+50     	; 0x13a <Welcome_Screen+0x84>
	{
		LCD_clearscreen();
 108:	0e 94 91 02 	call	0x522	; 0x522 <LCD_clearscreen>
		LCD_SendStringRowCol(1, shift, "WELCOME");
 10c:	40 e6       	ldi	r20, 0x60	; 96
 10e:	50 e0       	ldi	r21, 0x00	; 0
 110:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <__data_end>
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 bd 02 	call	0x57a	; 0x57a <LCD_SendStringRowCol>
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	81 ee       	ldi	r24, 0xE1	; 225
 11e:	94 e0       	ldi	r25, 0x04	; 4
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <Welcome_Screen+0x6a>
 128:	00 c0       	rjmp	.+0      	; 0x12a <Welcome_Screen+0x74>
 12a:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();
 12c:	0e 94 91 02 	call	0x522	; 0x522 <LCD_clearscreen>
		LCD_SendStringRowCol(1, shift, "WELCOME");
		_delay_ms(100);
		LCD_clearscreen();
	}

	for (shift = 16; shift > 0; --shift)
 130:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__data_end>
 134:	81 50       	subi	r24, 0x01	; 1
 136:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
 13a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__data_end>
 13e:	81 11       	cpse	r24, r1
 140:	e3 cf       	rjmp	.-58     	; 0x108 <Welcome_Screen+0x52>
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	84 e3       	ldi	r24, 0x34	; 52
 146:	9c e0       	ldi	r25, 0x0C	; 12
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <Welcome_Screen+0x92>
 150:	00 c0       	rjmp	.+0      	; 0x152 <Welcome_Screen+0x9c>
 152:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();
	}
	
	_delay_ms(250);
	LCD_clearscreen();
 154:	0e 94 91 02 	call	0x522	; 0x522 <LCD_clearscreen>
 158:	08 95       	ret

0000015a <IDLE_Screen>:
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	89 ef       	ldi	r24, 0xF9	; 249
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <IDLE_Screen+0x6>
 168:	00 c0       	rjmp	.+0      	; 0x16a <IDLE_Screen+0x10>
 16a:	00 00       	nop
}

void IDLE_Screen(void)
{
	_delay_ms(20);
	LCD_SendStringRowCol(1, 1, "SET:25");
 16c:	48 e6       	ldi	r20, 0x68	; 104
 16e:	50 e0       	ldi	r21, 0x00	; 0
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 bd 02 	call	0x57a	; 0x57a <LCD_SendStringRowCol>
	LCD_SendStringRowCol(1, 11, "CRT:");
 178:	4f e6       	ldi	r20, 0x6F	; 111
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	6b e0       	ldi	r22, 0x0B	; 11
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 bd 02 	call	0x57a	; 0x57a <LCD_SendStringRowCol>
	LCD_SendStringRowCol(2, 1, "STATE:STANDBY");
 184:	44 e7       	ldi	r20, 0x74	; 116
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	0e 94 bd 02 	call	0x57a	; 0x57a <LCD_SendStringRowCol>
 190:	08 95       	ret

00000192 <DIO_vsetPINDir>:
			PORTC &= 0xf0;
			PORTC |= value;
			break;
		case 'D':
			PORTD &= 0xf0;
			PORTD |= value;
 192:	82 34       	cpi	r24, 0x42	; 66
 194:	19 f1       	breq	.+70     	; 0x1dc <DIO_vsetPINDir+0x4a>
 196:	18 f4       	brcc	.+6      	; 0x19e <DIO_vsetPINDir+0xc>
 198:	81 34       	cpi	r24, 0x41	; 65
 19a:	39 f0       	breq	.+14     	; 0x1aa <DIO_vsetPINDir+0x18>
 19c:	08 95       	ret
 19e:	83 34       	cpi	r24, 0x43	; 67
 1a0:	b1 f1       	breq	.+108    	; 0x20e <DIO_vsetPINDir+0x7c>
 1a2:	84 34       	cpi	r24, 0x44	; 68
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <DIO_vsetPINDir+0x16>
 1a6:	4c c0       	rjmp	.+152    	; 0x240 <DIO_vsetPINDir+0xae>
 1a8:	08 95       	ret
 1aa:	41 30       	cpi	r20, 0x01	; 1
 1ac:	59 f4       	brne	.+22     	; 0x1c4 <DIO_vsetPINDir+0x32>
 1ae:	2a b3       	in	r18, 0x1a	; 26
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_vsetPINDir+0x28>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_vsetPINDir+0x24>
 1be:	82 2b       	or	r24, r18
 1c0:	8a bb       	out	0x1a, r24	; 26
 1c2:	08 95       	ret
 1c4:	2a b3       	in	r18, 0x1a	; 26
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_vsetPINDir+0x3e>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_vsetPINDir+0x3a>
 1d4:	80 95       	com	r24
 1d6:	82 23       	and	r24, r18
 1d8:	8a bb       	out	0x1a, r24	; 26
 1da:	08 95       	ret
 1dc:	41 30       	cpi	r20, 0x01	; 1
 1de:	59 f4       	brne	.+22     	; 0x1f6 <DIO_vsetPINDir+0x64>
 1e0:	27 b3       	in	r18, 0x17	; 23
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_vsetPINDir+0x5a>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_vsetPINDir+0x56>
 1f0:	82 2b       	or	r24, r18
 1f2:	87 bb       	out	0x17, r24	; 23
 1f4:	08 95       	ret
 1f6:	27 b3       	in	r18, 0x17	; 23
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_vsetPINDir+0x70>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_vsetPINDir+0x6c>
 206:	80 95       	com	r24
 208:	82 23       	and	r24, r18
 20a:	87 bb       	out	0x17, r24	; 23
 20c:	08 95       	ret
 20e:	41 30       	cpi	r20, 0x01	; 1
 210:	59 f4       	brne	.+22     	; 0x228 <DIO_vsetPINDir+0x96>
 212:	24 b3       	in	r18, 0x14	; 20
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_vsetPINDir+0x8c>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_vsetPINDir+0x88>
 222:	82 2b       	or	r24, r18
 224:	84 bb       	out	0x14, r24	; 20
 226:	08 95       	ret
 228:	24 b3       	in	r18, 0x14	; 20
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_vsetPINDir+0xa2>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_vsetPINDir+0x9e>
 238:	80 95       	com	r24
 23a:	82 23       	and	r24, r18
 23c:	84 bb       	out	0x14, r24	; 20
 23e:	08 95       	ret
 240:	41 30       	cpi	r20, 0x01	; 1
 242:	59 f4       	brne	.+22     	; 0x25a <DIO_vsetPINDir+0xc8>
 244:	21 b3       	in	r18, 0x11	; 17
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_vsetPINDir+0xbe>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_vsetPINDir+0xba>
 254:	82 2b       	or	r24, r18
 256:	81 bb       	out	0x11, r24	; 17
 258:	08 95       	ret
 25a:	21 b3       	in	r18, 0x11	; 17
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_vsetPINDir+0xd4>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_vsetPINDir+0xd0>
 26a:	80 95       	com	r24
 26c:	82 23       	and	r24, r18
 26e:	81 bb       	out	0x11, r24	; 17
 270:	08 95       	ret

00000272 <DIO_write>:
 272:	82 34       	cpi	r24, 0x42	; 66
 274:	19 f1       	breq	.+70     	; 0x2bc <DIO_write+0x4a>
 276:	18 f4       	brcc	.+6      	; 0x27e <DIO_write+0xc>
 278:	81 34       	cpi	r24, 0x41	; 65
 27a:	39 f0       	breq	.+14     	; 0x28a <DIO_write+0x18>
 27c:	08 95       	ret
 27e:	83 34       	cpi	r24, 0x43	; 67
 280:	b1 f1       	breq	.+108    	; 0x2ee <DIO_write+0x7c>
 282:	84 34       	cpi	r24, 0x44	; 68
 284:	09 f4       	brne	.+2      	; 0x288 <DIO_write+0x16>
 286:	4c c0       	rjmp	.+152    	; 0x320 <DIO_write+0xae>
 288:	08 95       	ret
 28a:	41 30       	cpi	r20, 0x01	; 1
 28c:	59 f4       	brne	.+22     	; 0x2a4 <DIO_write+0x32>
 28e:	2b b3       	in	r18, 0x1b	; 27
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_write+0x28>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_write+0x24>
 29e:	82 2b       	or	r24, r18
 2a0:	8b bb       	out	0x1b, r24	; 27
 2a2:	08 95       	ret
 2a4:	2b b3       	in	r18, 0x1b	; 27
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_write+0x3e>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_write+0x3a>
 2b4:	80 95       	com	r24
 2b6:	82 23       	and	r24, r18
 2b8:	8b bb       	out	0x1b, r24	; 27
 2ba:	08 95       	ret
 2bc:	41 30       	cpi	r20, 0x01	; 1
 2be:	59 f4       	brne	.+22     	; 0x2d6 <DIO_write+0x64>
 2c0:	28 b3       	in	r18, 0x18	; 24
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_write+0x5a>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	6a 95       	dec	r22
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_write+0x56>
 2d0:	82 2b       	or	r24, r18
 2d2:	88 bb       	out	0x18, r24	; 24
 2d4:	08 95       	ret
 2d6:	28 b3       	in	r18, 0x18	; 24
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_write+0x70>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_write+0x6c>
 2e6:	80 95       	com	r24
 2e8:	82 23       	and	r24, r18
 2ea:	88 bb       	out	0x18, r24	; 24
 2ec:	08 95       	ret
 2ee:	41 30       	cpi	r20, 0x01	; 1
 2f0:	59 f4       	brne	.+22     	; 0x308 <DIO_write+0x96>
 2f2:	25 b3       	in	r18, 0x15	; 21
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_write+0x8c>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	6a 95       	dec	r22
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_write+0x88>
 302:	82 2b       	or	r24, r18
 304:	85 bb       	out	0x15, r24	; 21
 306:	08 95       	ret
 308:	25 b3       	in	r18, 0x15	; 21
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_write+0xa2>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_write+0x9e>
 318:	80 95       	com	r24
 31a:	82 23       	and	r24, r18
 31c:	85 bb       	out	0x15, r24	; 21
 31e:	08 95       	ret
 320:	41 30       	cpi	r20, 0x01	; 1
 322:	59 f4       	brne	.+22     	; 0x33a <DIO_write+0xc8>
 324:	22 b3       	in	r18, 0x12	; 18
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_write+0xbe>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_write+0xba>
 334:	82 2b       	or	r24, r18
 336:	82 bb       	out	0x12, r24	; 18
 338:	08 95       	ret
 33a:	22 b3       	in	r18, 0x12	; 18
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_write+0xd4>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_write+0xd0>
 34a:	80 95       	com	r24
 34c:	82 23       	and	r24, r18
 34e:	82 bb       	out	0x12, r24	; 18
 350:	08 95       	ret

00000352 <write_high_nibble>:
	}
}

void write_high_nibble(u8 portname, u8 value)
{
	value <<= 4;
 352:	62 95       	swap	r22
 354:	60 7f       	andi	r22, 0xF0	; 240
	
	switch(portname)
 356:	82 34       	cpi	r24, 0x42	; 66
 358:	81 f0       	breq	.+32     	; 0x37a <write_high_nibble+0x28>
 35a:	18 f4       	brcc	.+6      	; 0x362 <write_high_nibble+0x10>
 35c:	81 34       	cpi	r24, 0x41	; 65
 35e:	31 f0       	breq	.+12     	; 0x36c <write_high_nibble+0x1a>
 360:	08 95       	ret
 362:	83 34       	cpi	r24, 0x43	; 67
 364:	89 f0       	breq	.+34     	; 0x388 <write_high_nibble+0x36>
 366:	84 34       	cpi	r24, 0x44	; 68
 368:	b1 f0       	breq	.+44     	; 0x396 <write_high_nibble+0x44>
 36a:	08 95       	ret
	{
		case 'A':
			PORTA &= 0x0f;
 36c:	8b b3       	in	r24, 0x1b	; 27
 36e:	8f 70       	andi	r24, 0x0F	; 15
 370:	8b bb       	out	0x1b, r24	; 27
			PORTA |= value;
 372:	8b b3       	in	r24, 0x1b	; 27
 374:	68 2b       	or	r22, r24
 376:	6b bb       	out	0x1b, r22	; 27
			break;
 378:	08 95       	ret
		case 'B':
			PORTB &= 0x0f;
 37a:	88 b3       	in	r24, 0x18	; 24
 37c:	8f 70       	andi	r24, 0x0F	; 15
 37e:	88 bb       	out	0x18, r24	; 24
			PORTB |= value;
 380:	88 b3       	in	r24, 0x18	; 24
 382:	68 2b       	or	r22, r24
 384:	68 bb       	out	0x18, r22	; 24
			break;
 386:	08 95       	ret
		case 'C':
			PORTC &= 0x0f;
 388:	85 b3       	in	r24, 0x15	; 21
 38a:	8f 70       	andi	r24, 0x0F	; 15
 38c:	85 bb       	out	0x15, r24	; 21
			PORTC |= value;
 38e:	85 b3       	in	r24, 0x15	; 21
 390:	68 2b       	or	r22, r24
 392:	65 bb       	out	0x15, r22	; 21
			break;
 394:	08 95       	ret
		case 'D':
			PORTD &= 0x0f;
 396:	82 b3       	in	r24, 0x12	; 18
 398:	8f 70       	andi	r24, 0x0F	; 15
 39a:	82 bb       	out	0x12, r24	; 18
			PORTD |= value;
 39c:	82 b3       	in	r24, 0x12	; 18
 39e:	68 2b       	or	r22, r24
 3a0:	62 bb       	out	0x12, r22	; 18
 3a2:	08 95       	ret

000003a4 <keypad_vInit>:
	{'*', '0', '#'}
};

void keypad_vInit(void)
{
	DDRC = 0x0f;
 3a4:	8f e0       	ldi	r24, 0x0F	; 15
 3a6:	84 bb       	out	0x14, r24	; 20
	CLR_BIT(SFIOR, PUD);
 3a8:	80 b7       	in	r24, 0x30	; 48
 3aa:	8b 7f       	andi	r24, 0xFB	; 251
 3ac:	80 bf       	out	0x30, r24	; 48
	PORTC = 0xff;
 3ae:	8f ef       	ldi	r24, 0xFF	; 255
 3b0:	85 bb       	out	0x15, r24	; 21
 3b2:	08 95       	ret

000003b4 <send_falling_edge>:

    for(counter = 0; data[counter] != '\0'; ++counter)
    {
	    LCD_vSend_char(data[counter]);
    }
}
 3b4:	41 e0       	ldi	r20, 0x01	; 1
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	81 e4       	ldi	r24, 0x41	; 65
 3ba:	0e 94 39 01 	call	0x272	; 0x272 <DIO_write>
 3be:	83 ef       	ldi	r24, 0xF3	; 243
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <send_falling_edge+0xe>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <send_falling_edge+0x14>
 3c8:	00 00       	nop
 3ca:	40 e0       	ldi	r20, 0x00	; 0
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	81 e4       	ldi	r24, 0x41	; 65
 3d0:	0e 94 39 01 	call	0x272	; 0x272 <DIO_write>
 3d4:	83 ef       	ldi	r24, 0xF3	; 243
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <send_falling_edge+0x24>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <send_falling_edge+0x2a>
 3de:	00 00       	nop
 3e0:	08 95       	ret

000003e2 <LCD_vSend_cmd>:
 3e2:	cf 93       	push	r28
 3e4:	c8 2f       	mov	r28, r24
 3e6:	68 2f       	mov	r22, r24
 3e8:	62 95       	swap	r22
 3ea:	6f 70       	andi	r22, 0x0F	; 15
 3ec:	84 e4       	ldi	r24, 0x44	; 68
 3ee:	0e 94 a9 01 	call	0x352	; 0x352 <write_high_nibble>
 3f2:	40 e0       	ldi	r20, 0x00	; 0
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	81 e4       	ldi	r24, 0x41	; 65
 3f8:	0e 94 39 01 	call	0x272	; 0x272 <DIO_write>
 3fc:	0e 94 da 01 	call	0x3b4	; 0x3b4 <send_falling_edge>
 400:	6c 2f       	mov	r22, r28
 402:	84 e4       	ldi	r24, 0x44	; 68
 404:	0e 94 a9 01 	call	0x352	; 0x352 <write_high_nibble>
 408:	40 e0       	ldi	r20, 0x00	; 0
 40a:	61 e0       	ldi	r22, 0x01	; 1
 40c:	81 e4       	ldi	r24, 0x41	; 65
 40e:	0e 94 39 01 	call	0x272	; 0x272 <DIO_write>
 412:	0e 94 da 01 	call	0x3b4	; 0x3b4 <send_falling_edge>
 416:	89 ef       	ldi	r24, 0xF9	; 249
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 420:	00 00       	nop
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <LCD_vInit>:
 426:	87 e8       	ldi	r24, 0x87	; 135
 428:	93 e1       	ldi	r25, 0x13	; 19
 42a:	01 97       	sbiw	r24, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <LCD_vInit+0x4>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <LCD_vInit+0xa>
 430:	00 00       	nop
 432:	41 e0       	ldi	r20, 0x01	; 1
 434:	64 e0       	ldi	r22, 0x04	; 4
 436:	84 e4       	ldi	r24, 0x44	; 68
 438:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vsetPINDir>
 43c:	41 e0       	ldi	r20, 0x01	; 1
 43e:	65 e0       	ldi	r22, 0x05	; 5
 440:	84 e4       	ldi	r24, 0x44	; 68
 442:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vsetPINDir>
 446:	41 e0       	ldi	r20, 0x01	; 1
 448:	66 e0       	ldi	r22, 0x06	; 6
 44a:	84 e4       	ldi	r24, 0x44	; 68
 44c:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vsetPINDir>
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	67 e0       	ldi	r22, 0x07	; 7
 454:	84 e4       	ldi	r24, 0x44	; 68
 456:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vsetPINDir>
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	81 e4       	ldi	r24, 0x41	; 65
 460:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vsetPINDir>
 464:	41 e0       	ldi	r20, 0x01	; 1
 466:	62 e0       	ldi	r22, 0x02	; 2
 468:	81 e4       	ldi	r24, 0x41	; 65
 46a:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vsetPINDir>
 46e:	41 e0       	ldi	r20, 0x01	; 1
 470:	61 e0       	ldi	r22, 0x01	; 1
 472:	81 e4       	ldi	r24, 0x41	; 65
 474:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vsetPINDir>
 478:	40 e0       	ldi	r20, 0x00	; 0
 47a:	62 e0       	ldi	r22, 0x02	; 2
 47c:	81 e4       	ldi	r24, 0x41	; 65
 47e:	0e 94 39 01 	call	0x272	; 0x272 <DIO_write>
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_vSend_cmd>
 488:	83 ec       	ldi	r24, 0xC3	; 195
 48a:	99 e0       	ldi	r25, 0x09	; 9
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <LCD_vInit+0x66>
 490:	00 c0       	rjmp	.+0      	; 0x492 <LCD_vInit+0x6c>
 492:	00 00       	nop
 494:	88 e2       	ldi	r24, 0x28	; 40
 496:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_vSend_cmd>
 49a:	89 ef       	ldi	r24, 0xF9	; 249
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	f1 f7       	brne	.-4      	; 0x49e <LCD_vInit+0x78>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <LCD_vInit+0x7e>
 4a4:	00 00       	nop
 4a6:	8e e0       	ldi	r24, 0x0E	; 14
 4a8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_vSend_cmd>
 4ac:	89 ef       	ldi	r24, 0xF9	; 249
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <LCD_vInit+0x8a>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <LCD_vInit+0x90>
 4b6:	00 00       	nop
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_vSend_cmd>
 4be:	83 ec       	ldi	r24, 0xC3	; 195
 4c0:	99 e0       	ldi	r25, 0x09	; 9
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <LCD_vInit+0x9c>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <LCD_vInit+0xa2>
 4c8:	00 00       	nop
 4ca:	86 e0       	ldi	r24, 0x06	; 6
 4cc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_vSend_cmd>
 4d0:	89 ef       	ldi	r24, 0xF9	; 249
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <LCD_vInit+0xae>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <LCD_vInit+0xb4>
 4da:	00 00       	nop
 4dc:	08 95       	ret

000004de <LCD_vSend_char>:
 4de:	cf 93       	push	r28
 4e0:	c8 2f       	mov	r28, r24
 4e2:	68 2f       	mov	r22, r24
 4e4:	62 95       	swap	r22
 4e6:	6f 70       	andi	r22, 0x0F	; 15
 4e8:	84 e4       	ldi	r24, 0x44	; 68
 4ea:	0e 94 a9 01 	call	0x352	; 0x352 <write_high_nibble>
 4ee:	41 e0       	ldi	r20, 0x01	; 1
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	81 e4       	ldi	r24, 0x41	; 65
 4f4:	0e 94 39 01 	call	0x272	; 0x272 <DIO_write>
 4f8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <send_falling_edge>
 4fc:	6c 2f       	mov	r22, r28
 4fe:	84 e4       	ldi	r24, 0x44	; 68
 500:	0e 94 a9 01 	call	0x352	; 0x352 <write_high_nibble>
 504:	41 e0       	ldi	r20, 0x01	; 1
 506:	61 e0       	ldi	r22, 0x01	; 1
 508:	81 e4       	ldi	r24, 0x41	; 65
 50a:	0e 94 39 01 	call	0x272	; 0x272 <DIO_write>
 50e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <send_falling_edge>
 512:	89 ef       	ldi	r24, 0xF9	; 249
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <LCD_vSend_char+0x38>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <LCD_vSend_char+0x3e>
 51c:	00 00       	nop
 51e:	cf 91       	pop	r28
 520:	08 95       	ret

00000522 <LCD_clearscreen>:

void LCD_clearscreen(void)
{
	LCD_vSend_cmd(CLR_SCREEN);
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_vSend_cmd>
 528:	83 ec       	ldi	r24, 0xC3	; 195
 52a:	99 e0       	ldi	r25, 0x09	; 9
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <LCD_clearscreen+0xa>
 530:	00 c0       	rjmp	.+0      	; 0x532 <LCD_clearscreen+0x10>
 532:	00 00       	nop
 534:	08 95       	ret

00000536 <LCD_movecursor>:

void LCD_movecursor(c8 row, c8 coloumn)
{
	char data = 0;
	
	if (row > 2 || row < 1 || coloumn > 16 || coloumn < 1)
 536:	9f ef       	ldi	r25, 0xFF	; 255
 538:	98 0f       	add	r25, r24
 53a:	92 30       	cpi	r25, 0x02	; 2
 53c:	70 f4       	brcc	.+28     	; 0x55a <LCD_movecursor+0x24>
 53e:	61 31       	cpi	r22, 0x11	; 17
 540:	70 f4       	brcc	.+28     	; 0x55e <LCD_movecursor+0x28>
 542:	66 23       	and	r22, r22
 544:	71 f0       	breq	.+28     	; 0x562 <LCD_movecursor+0x2c>
	{
		data = 0x80;
	}
	else if (row == 1)
 546:	81 30       	cpi	r24, 0x01	; 1
 548:	19 f4       	brne	.+6      	; 0x550 <LCD_movecursor+0x1a>
	{
		data = 0x80 + coloumn - 1;
 54a:	8f e7       	ldi	r24, 0x7F	; 127
 54c:	86 0f       	add	r24, r22
 54e:	0c c0       	rjmp	.+24     	; 0x568 <LCD_movecursor+0x32>
	}
	else if (row == 2)
 550:	82 30       	cpi	r24, 0x02	; 2
 552:	49 f4       	brne	.+18     	; 0x566 <LCD_movecursor+0x30>
	{
		data = 0xc0 + coloumn - 1;
 554:	8f eb       	ldi	r24, 0xBF	; 191
 556:	86 0f       	add	r24, r22
 558:	07 c0       	rjmp	.+14     	; 0x568 <LCD_movecursor+0x32>
{
	char data = 0;
	
	if (row > 2 || row < 1 || coloumn > 16 || coloumn < 1)
	{
		data = 0x80;
 55a:	80 e8       	ldi	r24, 0x80	; 128
 55c:	05 c0       	rjmp	.+10     	; 0x568 <LCD_movecursor+0x32>
 55e:	80 e8       	ldi	r24, 0x80	; 128
 560:	03 c0       	rjmp	.+6      	; 0x568 <LCD_movecursor+0x32>
 562:	80 e8       	ldi	r24, 0x80	; 128
 564:	01 c0       	rjmp	.+2      	; 0x568 <LCD_movecursor+0x32>
	_delay_ms(10);
}

void LCD_movecursor(c8 row, c8 coloumn)
{
	char data = 0;
 566:	80 e0       	ldi	r24, 0x00	; 0
	else if (row == 2)
	{
		data = 0xc0 + coloumn - 1;
	}
	
	LCD_vSend_cmd(data);
 568:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_vSend_cmd>
 56c:	89 ef       	ldi	r24, 0xF9	; 249
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	01 97       	sbiw	r24, 0x01	; 1
 572:	f1 f7       	brne	.-4      	; 0x570 <LCD_movecursor+0x3a>
 574:	00 c0       	rjmp	.+0      	; 0x576 <LCD_movecursor+0x40>
 576:	00 00       	nop
 578:	08 95       	ret

0000057a <LCD_SendStringRowCol>:
	_delay_ms(1);
}

void LCD_SendStringRowCol(u8 row, u8 col, c8 * data)
{
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
 57e:	ea 01       	movw	r28, r20
	LCD_movecursor(row, col);
 580:	0e 94 9b 02 	call	0x536	; 0x536 <LCD_movecursor>
    for(counter = 0; data[counter] != '\0'; ++counter)
 584:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <counter>
 588:	07 c0       	rjmp	.+14     	; 0x598 <LCD_SendStringRowCol+0x1e>
    {
	    LCD_vSend_char(data[counter]);
 58a:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_vSend_char>
}

void LCD_SendStringRowCol(u8 row, u8 col, c8 * data)
{
	LCD_movecursor(row, col);
    for(counter = 0; data[counter] != '\0'; ++counter)
 58e:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <counter>
 592:	8f 5f       	subi	r24, 0xFF	; 255
 594:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <counter>
 598:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <counter>
 59c:	fe 01       	movw	r30, r28
 59e:	e8 0f       	add	r30, r24
 5a0:	f1 1d       	adc	r31, r1
 5a2:	80 81       	ld	r24, Z
 5a4:	81 11       	cpse	r24, r1
 5a6:	f1 cf       	rjmp	.-30     	; 0x58a <LCD_SendStringRowCol+0x10>
    {
	    LCD_vSend_char(data[counter]);
    }
}
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	08 95       	ret

000005ae <main>:
#include "app.h"

int main(void)
{
	Init();
 5ae:	0e 94 49 00 	call	0x92	; 0x92 <Init>
	Welcome_Screen();
 5b2:	0e 94 5b 00 	call	0xb6	; 0xb6 <Welcome_Screen>
	IDLE_Screen();
 5b6:	0e 94 ad 00 	call	0x15a	; 0x15a <IDLE_Screen>
	
    /* Replace with your application code */
    while (1)
    {
		LCD_vSend_char('A');
 5ba:	81 e4       	ldi	r24, 0x41	; 65
 5bc:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_vSend_char>
		T0delay();
 5c0:	0e 94 14 03 	call	0x628	; 0x628 <T0delay>
		LCD_vSend_char('B');
 5c4:	82 e4       	ldi	r24, 0x42	; 66
 5c6:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_vSend_char>
		T0delay();
 5ca:	0e 94 14 03 	call	0x628	; 0x628 <T0delay>
 5ce:	f5 cf       	rjmp	.-22     	; 0x5ba <main+0xc>

000005d0 <SPI_masterInit>:
{
	/* wait for the SPI buffer's full */
	while(!(SPSR & (1 << SPIF)));
	/* return SPI buffer */
	return SPDR;
}
 5d0:	80 eb       	ldi	r24, 0xB0	; 176
 5d2:	87 bb       	out	0x17, r24	; 23
 5d4:	8d b1       	in	r24, 0x0d	; 13
 5d6:	80 61       	ori	r24, 0x10	; 16
 5d8:	8d b9       	out	0x0d, r24	; 13
 5da:	8d b1       	in	r24, 0x0d	; 13
 5dc:	81 60       	ori	r24, 0x01	; 1
 5de:	8d b9       	out	0x0d, r24	; 13
 5e0:	8d b1       	in	r24, 0x0d	; 13
 5e2:	82 60       	ori	r24, 0x02	; 2
 5e4:	8d b9       	out	0x0d, r24	; 13
 5e6:	8d b1       	in	r24, 0x0d	; 13
 5e8:	84 60       	ori	r24, 0x04	; 4
 5ea:	8d b9       	out	0x0d, r24	; 13
 5ec:	8d b1       	in	r24, 0x0d	; 13
 5ee:	80 64       	ori	r24, 0x40	; 64
 5f0:	8d b9       	out	0x0d, r24	; 13
 5f2:	8d b1       	in	r24, 0x0d	; 13
 5f4:	80 68       	ori	r24, 0x80	; 128
 5f6:	8d b9       	out	0x0d, r24	; 13
 5f8:	08 95       	ret

000005fa <SPI_masterTransmit>:
 5fa:	8f b9       	out	0x0f, r24	; 15
 5fc:	77 9b       	sbis	0x0e, 7	; 14
 5fe:	fe cf       	rjmp	.-4      	; 0x5fc <SPI_masterTransmit+0x2>
 600:	08 95       	ret

00000602 <TC72_Init>:

void TC72_Init(void)
{
	SET_BIT(PORTB, 4);
 602:	88 b3       	in	r24, 0x18	; 24
 604:	80 61       	ori	r24, 0x10	; 16
 606:	88 bb       	out	0x18, r24	; 24
	/* Select control register */
	SPI_masterTransmit(0x80);
 608:	80 e8       	ldi	r24, 0x80	; 128
 60a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <SPI_masterTransmit>
	
	/* Select Continuous temperature conversion */
	SPI_masterTransmit(0x04);
 60e:	84 e0       	ldi	r24, 0x04	; 4
 610:	0e 94 fd 02 	call	0x5fa	; 0x5fa <SPI_masterTransmit>
	CLR_BIT(PORTB, 4);
 614:	88 b3       	in	r24, 0x18	; 24
 616:	8f 7e       	andi	r24, 0xEF	; 239
 618:	88 bb       	out	0x18, r24	; 24
 61a:	8b e7       	ldi	r24, 0x7B	; 123
 61c:	92 e9       	ldi	r25, 0x92	; 146
 61e:	01 97       	sbiw	r24, 0x01	; 1
 620:	f1 f7       	brne	.-4      	; 0x61e <TC72_Init+0x1c>
 622:	00 c0       	rjmp	.+0      	; 0x624 <TC72_Init+0x22>
 624:	00 00       	nop
 626:	08 95       	ret

00000628 <T0delay>:
#include <avr/io.h>
#include "Timer.h"

void T0delay(void)
{
	TCCR0 = (1 << CS02) | (1 << CS00); /* Timer0, normal mode, /1024 prescalar */
 628:	85 e0       	ldi	r24, 0x05	; 5
 62a:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x64; // 0xb2;  		/* Load TCNT0, count for 10ms */
 62c:	84 e6       	ldi	r24, 0x64	; 100
 62e:	82 bf       	out	0x32, r24	; 50
	while((TIFR & 0x01) == 0);  /* Wait for TOV0 to roll over */
 630:	08 b6       	in	r0, 0x38	; 56
 632:	00 fe       	sbrs	r0, 0
 634:	fd cf       	rjmp	.-6      	; 0x630 <T0delay+0x8>
	TCCR0 = 0;
 636:	13 be       	out	0x33, r1	; 51
	TIFR = 0x1;  		/* Clear TOV0 flag */
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	88 bf       	out	0x38, r24	; 56
 63c:	08 95       	ret

0000063e <_exit>:
 63e:	f8 94       	cli

00000640 <__stop_program>:
 640:	ff cf       	rjmp	.-2      	; 0x640 <__stop_program>
