
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000006c6  0000075a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006c  0080006c  00000766  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000766  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000798  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013a5  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090e  00000000  00000000  00001c79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ada  00000000  00000000  00002587  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00003064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052b  00000000  00000000  00003224  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d43  00000000  00000000  0000374f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004492  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4f 03 	call	0x69e	; 0x69e <main>
  8a:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:
			PORTC &= 0xf0;
			PORTC |= value;
			break;
		case 'D':
			PORTD &= 0xf0;
			PORTD |= value;
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	19 f1       	breq	.+70     	; 0xdc <DIO_vsetPINDir+0x4a>
  96:	18 f4       	brcc	.+6      	; 0x9e <DIO_vsetPINDir+0xc>
  98:	81 34       	cpi	r24, 0x41	; 65
  9a:	39 f0       	breq	.+14     	; 0xaa <DIO_vsetPINDir+0x18>
  9c:	08 95       	ret
  9e:	83 34       	cpi	r24, 0x43	; 67
  a0:	b1 f1       	breq	.+108    	; 0x10e <DIO_vsetPINDir+0x7c>
  a2:	84 34       	cpi	r24, 0x44	; 68
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPINDir+0x16>
  a6:	4c c0       	rjmp	.+152    	; 0x140 <DIO_vsetPINDir+0xae>
  a8:	08 95       	ret
  aa:	41 30       	cpi	r20, 0x01	; 1
  ac:	59 f4       	brne	.+22     	; 0xc4 <DIO_vsetPINDir+0x32>
  ae:	2a b3       	in	r18, 0x1a	; 26
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_vsetPINDir+0x28>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_vsetPINDir+0x24>
  be:	82 2b       	or	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret
  c4:	2a b3       	in	r18, 0x1a	; 26
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_vsetPINDir+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_vsetPINDir+0x3a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	08 95       	ret
  dc:	41 30       	cpi	r20, 0x01	; 1
  de:	59 f4       	brne	.+22     	; 0xf6 <DIO_vsetPINDir+0x64>
  e0:	27 b3       	in	r18, 0x17	; 23
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_vsetPINDir+0x5a>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_vsetPINDir+0x56>
  f0:	82 2b       	or	r24, r18
  f2:	87 bb       	out	0x17, r24	; 23
  f4:	08 95       	ret
  f6:	27 b3       	in	r18, 0x17	; 23
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_vsetPINDir+0x70>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_vsetPINDir+0x6c>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	08 95       	ret
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	59 f4       	brne	.+22     	; 0x128 <DIO_vsetPINDir+0x96>
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_vsetPINDir+0x8c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_vsetPINDir+0x88>
 122:	82 2b       	or	r24, r18
 124:	84 bb       	out	0x14, r24	; 20
 126:	08 95       	ret
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_vsetPINDir+0xa2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_vsetPINDir+0x9e>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	59 f4       	brne	.+22     	; 0x15a <DIO_vsetPINDir+0xc8>
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0xbe>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0xba>
 154:	82 2b       	or	r24, r18
 156:	81 bb       	out	0x11, r24	; 17
 158:	08 95       	ret
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_vsetPINDir+0xd4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_vsetPINDir+0xd0>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	81 bb       	out	0x11, r24	; 17
 170:	08 95       	ret

00000172 <DIO_write>:
 172:	82 34       	cpi	r24, 0x42	; 66
 174:	19 f1       	breq	.+70     	; 0x1bc <DIO_write+0x4a>
 176:	18 f4       	brcc	.+6      	; 0x17e <DIO_write+0xc>
 178:	81 34       	cpi	r24, 0x41	; 65
 17a:	39 f0       	breq	.+14     	; 0x18a <DIO_write+0x18>
 17c:	08 95       	ret
 17e:	83 34       	cpi	r24, 0x43	; 67
 180:	b1 f1       	breq	.+108    	; 0x1ee <DIO_write+0x7c>
 182:	84 34       	cpi	r24, 0x44	; 68
 184:	09 f4       	brne	.+2      	; 0x188 <DIO_write+0x16>
 186:	4c c0       	rjmp	.+152    	; 0x220 <DIO_write+0xae>
 188:	08 95       	ret
 18a:	41 30       	cpi	r20, 0x01	; 1
 18c:	59 f4       	brne	.+22     	; 0x1a4 <DIO_write+0x32>
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_write+0x28>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_write+0x24>
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	08 95       	ret
 1a4:	2b b3       	in	r18, 0x1b	; 27
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_write+0x3e>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_write+0x3a>
 1b4:	80 95       	com	r24
 1b6:	82 23       	and	r24, r18
 1b8:	8b bb       	out	0x1b, r24	; 27
 1ba:	08 95       	ret
 1bc:	41 30       	cpi	r20, 0x01	; 1
 1be:	59 f4       	brne	.+22     	; 0x1d6 <DIO_write+0x64>
 1c0:	28 b3       	in	r18, 0x18	; 24
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_write+0x5a>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_write+0x56>
 1d0:	82 2b       	or	r24, r18
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	08 95       	ret
 1d6:	28 b3       	in	r18, 0x18	; 24
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x70>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x6c>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	08 95       	ret
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	59 f4       	brne	.+22     	; 0x208 <DIO_write+0x96>
 1f2:	25 b3       	in	r18, 0x15	; 21
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_write+0x8c>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_write+0x88>
 202:	82 2b       	or	r24, r18
 204:	85 bb       	out	0x15, r24	; 21
 206:	08 95       	ret
 208:	25 b3       	in	r18, 0x15	; 21
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_write+0xa2>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_write+0x9e>
 218:	80 95       	com	r24
 21a:	82 23       	and	r24, r18
 21c:	85 bb       	out	0x15, r24	; 21
 21e:	08 95       	ret
 220:	41 30       	cpi	r20, 0x01	; 1
 222:	59 f4       	brne	.+22     	; 0x23a <DIO_write+0xc8>
 224:	22 b3       	in	r18, 0x12	; 18
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_write+0xbe>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_write+0xba>
 234:	82 2b       	or	r24, r18
 236:	82 bb       	out	0x12, r24	; 18
 238:	08 95       	ret
 23a:	22 b3       	in	r18, 0x12	; 18
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_write+0xd4>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_write+0xd0>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	82 bb       	out	0x12, r24	; 18
 250:	08 95       	ret

00000252 <DIO_u8read>:
 252:	82 34       	cpi	r24, 0x42	; 66
 254:	e9 f0       	breq	.+58     	; 0x290 <DIO_u8read+0x3e>
 256:	18 f4       	brcc	.+6      	; 0x25e <DIO_u8read+0xc>
 258:	81 34       	cpi	r24, 0x41	; 65
 25a:	31 f0       	breq	.+12     	; 0x268 <DIO_u8read+0x16>
 25c:	55 c0       	rjmp	.+170    	; 0x308 <DIO_u8read+0xb6>
 25e:	83 34       	cpi	r24, 0x43	; 67
 260:	59 f1       	breq	.+86     	; 0x2b8 <DIO_u8read+0x66>
 262:	84 34       	cpi	r24, 0x44	; 68
 264:	e9 f1       	breq	.+122    	; 0x2e0 <DIO_u8read+0x8e>
 266:	50 c0       	rjmp	.+160    	; 0x308 <DIO_u8read+0xb6>
 268:	49 b3       	in	r20, 0x19	; 25
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	9c 01       	movw	r18, r24
 270:	06 2e       	mov	r0, r22
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_u8read+0x26>
 274:	22 0f       	add	r18, r18
 276:	33 1f       	adc	r19, r19
 278:	0a 94       	dec	r0
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_u8read+0x22>
 27c:	84 2f       	mov	r24, r20
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	82 23       	and	r24, r18
 282:	93 23       	and	r25, r19
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_u8read+0x38>
 286:	95 95       	asr	r25
 288:	87 95       	ror	r24
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_u8read+0x34>
 28e:	08 95       	ret
 290:	46 b3       	in	r20, 0x16	; 22
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	9c 01       	movw	r18, r24
 298:	06 2e       	mov	r0, r22
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_u8read+0x4e>
 29c:	22 0f       	add	r18, r18
 29e:	33 1f       	adc	r19, r19
 2a0:	0a 94       	dec	r0
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_u8read+0x4a>
 2a4:	84 2f       	mov	r24, r20
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	82 23       	and	r24, r18
 2aa:	93 23       	and	r25, r19
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_u8read+0x60>
 2ae:	95 95       	asr	r25
 2b0:	87 95       	ror	r24
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_u8read+0x5c>
 2b6:	08 95       	ret
 2b8:	43 b3       	in	r20, 0x13	; 19
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	9c 01       	movw	r18, r24
 2c0:	06 2e       	mov	r0, r22
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_u8read+0x76>
 2c4:	22 0f       	add	r18, r18
 2c6:	33 1f       	adc	r19, r19
 2c8:	0a 94       	dec	r0
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_u8read+0x72>
 2cc:	84 2f       	mov	r24, r20
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	82 23       	and	r24, r18
 2d2:	93 23       	and	r25, r19
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_u8read+0x88>
 2d6:	95 95       	asr	r25
 2d8:	87 95       	ror	r24
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_u8read+0x84>
 2de:	08 95       	ret
 2e0:	40 b3       	in	r20, 0x10	; 16
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	9c 01       	movw	r18, r24
 2e8:	06 2e       	mov	r0, r22
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_u8read+0x9e>
 2ec:	22 0f       	add	r18, r18
 2ee:	33 1f       	adc	r19, r19
 2f0:	0a 94       	dec	r0
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_u8read+0x9a>
 2f4:	84 2f       	mov	r24, r20
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	82 23       	and	r24, r18
 2fa:	93 23       	and	r25, r19
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_u8read+0xb0>
 2fe:	95 95       	asr	r25
 300:	87 95       	ror	r24
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_u8read+0xac>
 306:	08 95       	ret
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	08 95       	ret

0000030c <DIO_vconnectpullup>:
 30c:	82 34       	cpi	r24, 0x42	; 66
 30e:	19 f1       	breq	.+70     	; 0x356 <DIO_vconnectpullup+0x4a>
 310:	18 f4       	brcc	.+6      	; 0x318 <DIO_vconnectpullup+0xc>
 312:	81 34       	cpi	r24, 0x41	; 65
 314:	39 f0       	breq	.+14     	; 0x324 <DIO_vconnectpullup+0x18>
 316:	08 95       	ret
 318:	83 34       	cpi	r24, 0x43	; 67
 31a:	b1 f1       	breq	.+108    	; 0x388 <DIO_vconnectpullup+0x7c>
 31c:	84 34       	cpi	r24, 0x44	; 68
 31e:	09 f4       	brne	.+2      	; 0x322 <DIO_vconnectpullup+0x16>
 320:	4c c0       	rjmp	.+152    	; 0x3ba <DIO_vconnectpullup+0xae>
 322:	08 95       	ret
 324:	41 30       	cpi	r20, 0x01	; 1
 326:	59 f4       	brne	.+22     	; 0x33e <DIO_vconnectpullup+0x32>
 328:	2b b3       	in	r18, 0x1b	; 27
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_vconnectpullup+0x28>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_vconnectpullup+0x24>
 338:	82 2b       	or	r24, r18
 33a:	8b bb       	out	0x1b, r24	; 27
 33c:	08 95       	ret
 33e:	2b b3       	in	r18, 0x1b	; 27
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_vconnectpullup+0x3e>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_vconnectpullup+0x3a>
 34e:	80 95       	com	r24
 350:	82 23       	and	r24, r18
 352:	8b bb       	out	0x1b, r24	; 27
 354:	08 95       	ret
 356:	41 30       	cpi	r20, 0x01	; 1
 358:	59 f4       	brne	.+22     	; 0x370 <DIO_vconnectpullup+0x64>
 35a:	28 b3       	in	r18, 0x18	; 24
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_vconnectpullup+0x5a>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_vconnectpullup+0x56>
 36a:	82 2b       	or	r24, r18
 36c:	88 bb       	out	0x18, r24	; 24
 36e:	08 95       	ret
 370:	28 b3       	in	r18, 0x18	; 24
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_vconnectpullup+0x70>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_vconnectpullup+0x6c>
 380:	80 95       	com	r24
 382:	82 23       	and	r24, r18
 384:	88 bb       	out	0x18, r24	; 24
 386:	08 95       	ret
 388:	41 30       	cpi	r20, 0x01	; 1
 38a:	59 f4       	brne	.+22     	; 0x3a2 <DIO_vconnectpullup+0x96>
 38c:	25 b3       	in	r18, 0x15	; 21
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_vconnectpullup+0x8c>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_vconnectpullup+0x88>
 39c:	82 2b       	or	r24, r18
 39e:	85 bb       	out	0x15, r24	; 21
 3a0:	08 95       	ret
 3a2:	25 b3       	in	r18, 0x15	; 21
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_vconnectpullup+0xa2>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_vconnectpullup+0x9e>
 3b2:	80 95       	com	r24
 3b4:	82 23       	and	r24, r18
 3b6:	85 bb       	out	0x15, r24	; 21
 3b8:	08 95       	ret
 3ba:	41 30       	cpi	r20, 0x01	; 1
 3bc:	59 f4       	brne	.+22     	; 0x3d4 <DIO_vconnectpullup+0xc8>
 3be:	22 b3       	in	r18, 0x12	; 18
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_vconnectpullup+0xbe>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_vconnectpullup+0xba>
 3ce:	82 2b       	or	r24, r18
 3d0:	82 bb       	out	0x12, r24	; 18
 3d2:	08 95       	ret
 3d4:	22 b3       	in	r18, 0x12	; 18
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_vconnectpullup+0xd4>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	6a 95       	dec	r22
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_vconnectpullup+0xd0>
 3e4:	80 95       	com	r24
 3e6:	82 23       	and	r24, r18
 3e8:	82 bb       	out	0x12, r24	; 18
 3ea:	08 95       	ret

000003ec <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname, unsigned char value)
{
	value <<= 4;
 3ec:	62 95       	swap	r22
 3ee:	60 7f       	andi	r22, 0xF0	; 240
	
	switch(portname)
 3f0:	82 34       	cpi	r24, 0x42	; 66
 3f2:	81 f0       	breq	.+32     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3f4:	18 f4       	brcc	.+6      	; 0x3fc <write_high_nibble+0x10>
 3f6:	81 34       	cpi	r24, 0x41	; 65
 3f8:	31 f0       	breq	.+12     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3fa:	08 95       	ret
 3fc:	83 34       	cpi	r24, 0x43	; 67
 3fe:	89 f0       	breq	.+34     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 400:	84 34       	cpi	r24, 0x44	; 68
 402:	b1 f0       	breq	.+44     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 404:	08 95       	ret
	{
		case 'A':
			PORTA &= 0x0f;
 406:	8b b3       	in	r24, 0x1b	; 27
 408:	8f 70       	andi	r24, 0x0F	; 15
 40a:	8b bb       	out	0x1b, r24	; 27
			PORTA |= value;
 40c:	8b b3       	in	r24, 0x1b	; 27
 40e:	68 2b       	or	r22, r24
 410:	6b bb       	out	0x1b, r22	; 27
			break;
 412:	08 95       	ret
		case 'B':
			PORTB &= 0x0f;
 414:	88 b3       	in	r24, 0x18	; 24
 416:	8f 70       	andi	r24, 0x0F	; 15
 418:	88 bb       	out	0x18, r24	; 24
			PORTB |= value;
 41a:	88 b3       	in	r24, 0x18	; 24
 41c:	68 2b       	or	r22, r24
 41e:	68 bb       	out	0x18, r22	; 24
			break;
 420:	08 95       	ret
		case 'C':
			PORTC &= 0x0f;
 422:	85 b3       	in	r24, 0x15	; 21
 424:	8f 70       	andi	r24, 0x0F	; 15
 426:	85 bb       	out	0x15, r24	; 21
			PORTC |= value;
 428:	85 b3       	in	r24, 0x15	; 21
 42a:	68 2b       	or	r22, r24
 42c:	65 bb       	out	0x15, r22	; 21
			break;
 42e:	08 95       	ret
		case 'D':
			PORTD &= 0x0f;
 430:	82 b3       	in	r24, 0x12	; 18
 432:	8f 70       	andi	r24, 0x0F	; 15
 434:	82 bb       	out	0x12, r24	; 18
			PORTD |= value;
 436:	82 b3       	in	r24, 0x12	; 18
 438:	68 2b       	or	r22, r24
 43a:	62 bb       	out	0x12, r22	; 18
 43c:	08 95       	ret

0000043e <keypad_vInit>:
static uint8_t counter2 = 0;
const char arr[N_Row][N_Col] = { {'1', '2', '3'}, {'4', '5', '6'}, {'7', '8', '9'}, {'*', '0', '#'} };

void keypad_vInit(void)
{
	for (counter1 = 0; counter1 < KEY_NPINs - 4; ++counter1)
 43e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <counter1>
 442:	09 c0       	rjmp	.+18     	; 0x456 <keypad_vInit+0x18>
	{
		DIO_vsetPINDir(Keypad_PORT, counter1, 1);
 444:	41 e0       	ldi	r20, 0x01	; 1
 446:	83 e4       	ldi	r24, 0x43	; 67
 448:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
static uint8_t counter2 = 0;
const char arr[N_Row][N_Col] = { {'1', '2', '3'}, {'4', '5', '6'}, {'7', '8', '9'}, {'*', '0', '#'} };

void keypad_vInit(void)
{
	for (counter1 = 0; counter1 < KEY_NPINs - 4; ++counter1)
 44c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <counter1>
 450:	8f 5f       	subi	r24, 0xFF	; 255
 452:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <counter1>
 456:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <counter1>
 45a:	64 30       	cpi	r22, 0x04	; 4
 45c:	98 f3       	brcs	.-26     	; 0x444 <keypad_vInit+0x6>
	{
		DIO_vsetPINDir(Keypad_PORT, counter1, 1);
	}
	for (counter2 = 4; counter2 < KEY_NPINs; ++counter2)
 45e:	84 e0       	ldi	r24, 0x04	; 4
 460:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 464:	09 c0       	rjmp	.+18     	; 0x478 <keypad_vInit+0x3a>
	{
		DIO_vsetPINDir(Keypad_PORT, counter2, 0);
 466:	40 e0       	ldi	r20, 0x00	; 0
 468:	83 e4       	ldi	r24, 0x43	; 67
 46a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
{
	for (counter1 = 0; counter1 < KEY_NPINs - 4; ++counter1)
	{
		DIO_vsetPINDir(Keypad_PORT, counter1, 1);
	}
	for (counter2 = 4; counter2 < KEY_NPINs; ++counter2)
 46e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 472:	8f 5f       	subi	r24, 0xFF	; 255
 474:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 478:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <__data_end>
 47c:	68 30       	cpi	r22, 0x08	; 8
 47e:	98 f3       	brcs	.-26     	; 0x466 <keypad_vInit+0x28>
	{
		DIO_vsetPINDir(Keypad_PORT, counter2, 0);
	}
	DIO_vconnectpullup(Keypad_PORT, 4, 1);
 480:	41 e0       	ldi	r20, 0x01	; 1
 482:	64 e0       	ldi	r22, 0x04	; 4
 484:	83 e4       	ldi	r24, 0x43	; 67
 486:	0e 94 86 01 	call	0x30c	; 0x30c <DIO_vconnectpullup>
	DIO_vconnectpullup(Keypad_PORT, 5, 1);
 48a:	41 e0       	ldi	r20, 0x01	; 1
 48c:	65 e0       	ldi	r22, 0x05	; 5
 48e:	83 e4       	ldi	r24, 0x43	; 67
 490:	0e 94 86 01 	call	0x30c	; 0x30c <DIO_vconnectpullup>
	DIO_vconnectpullup(Keypad_PORT, 6, 1);
 494:	41 e0       	ldi	r20, 0x01	; 1
 496:	66 e0       	ldi	r22, 0x06	; 6
 498:	83 e4       	ldi	r24, 0x43	; 67
 49a:	0e 94 86 01 	call	0x30c	; 0x30c <DIO_vconnectpullup>
	DIO_vconnectpullup(Keypad_PORT, 7, 1);
 49e:	41 e0       	ldi	r20, 0x01	; 1
 4a0:	67 e0       	ldi	r22, 0x07	; 7
 4a2:	83 e4       	ldi	r24, 0x43	; 67
 4a4:	0e 94 86 01 	call	0x30c	; 0x30c <DIO_vconnectpullup>
 4a8:	08 95       	ret

000004aa <keypad_u8check_press>:
}

char keypad_u8check_press(void)
{
 4aa:	0f 93       	push	r16
 4ac:	1f 93       	push	r17
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
	char row = 0;
	char coloumn = 0;
	char x = 0;
	char returnval = NOTPRESSED;
 4b2:	0f ef       	ldi	r16, 0xFF	; 255

char keypad_u8check_press(void)
{
	char row = 0;
	char coloumn = 0;
	char x = 0;
 4b4:	d0 e0       	ldi	r29, 0x00	; 0
	char returnval = NOTPRESSED;
	 
	for(row = 0; row < N_Row; ++row)
 4b6:	10 e0       	ldi	r17, 0x00	; 0
 4b8:	36 c0       	rjmp	.+108    	; 0x526 <keypad_u8check_press+0x7c>
	{
		DIO_write(Keypad_PORT, 0, 1);
 4ba:	41 e0       	ldi	r20, 0x01	; 1
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	83 e4       	ldi	r24, 0x43	; 67
 4c0:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		DIO_write(Keypad_PORT, 1, 1);
 4c4:	41 e0       	ldi	r20, 0x01	; 1
 4c6:	61 e0       	ldi	r22, 0x01	; 1
 4c8:	83 e4       	ldi	r24, 0x43	; 67
 4ca:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		DIO_write(Keypad_PORT, 2, 1);
 4ce:	41 e0       	ldi	r20, 0x01	; 1
 4d0:	62 e0       	ldi	r22, 0x02	; 2
 4d2:	83 e4       	ldi	r24, 0x43	; 67
 4d4:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		DIO_write(Keypad_PORT, 3, 1);
 4d8:	41 e0       	ldi	r20, 0x01	; 1
 4da:	63 e0       	ldi	r22, 0x03	; 3
 4dc:	83 e4       	ldi	r24, 0x43	; 67
 4de:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		DIO_write(Keypad_PORT, row, 0);
 4e2:	40 e0       	ldi	r20, 0x00	; 0
 4e4:	61 2f       	mov	r22, r17
 4e6:	83 e4       	ldi	r24, 0x43	; 67
 4e8:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>

		for(coloumn = 0; coloumn < N_Col; ++coloumn)
 4ec:	c0 e0       	ldi	r28, 0x00	; 0
 4ee:	16 c0       	rjmp	.+44     	; 0x51c <keypad_u8check_press+0x72>
		{
			x = DIO_u8read(Keypad_PORT, (coloumn + N_Col));
 4f0:	63 e0       	ldi	r22, 0x03	; 3
 4f2:	6c 0f       	add	r22, r28
 4f4:	83 e4       	ldi	r24, 0x43	; 67
 4f6:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8read>
 4fa:	d8 2f       	mov	r29, r24
		
			if (x == 0)
 4fc:	81 11       	cpse	r24, r1
 4fe:	0d c0       	rjmp	.+26     	; 0x51a <keypad_u8check_press+0x70>
			{
				returnval = arr[row][coloumn];
 500:	81 2f       	mov	r24, r17
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	fc 01       	movw	r30, r24
 506:	ee 0f       	add	r30, r30
 508:	ff 1f       	adc	r31, r31
 50a:	e8 0f       	add	r30, r24
 50c:	f9 1f       	adc	r31, r25
 50e:	e0 5a       	subi	r30, 0xA0	; 160
 510:	ff 4f       	sbci	r31, 0xFF	; 255
 512:	ec 0f       	add	r30, r28
 514:	f1 1d       	adc	r31, r1
 516:	00 81       	ld	r16, Z
				break;
 518:	03 c0       	rjmp	.+6      	; 0x520 <keypad_u8check_press+0x76>
		DIO_write(Keypad_PORT, 1, 1);
		DIO_write(Keypad_PORT, 2, 1);
		DIO_write(Keypad_PORT, 3, 1);
		DIO_write(Keypad_PORT, row, 0);

		for(coloumn = 0; coloumn < N_Col; ++coloumn)
 51a:	cf 5f       	subi	r28, 0xFF	; 255
 51c:	c3 30       	cpi	r28, 0x03	; 3
 51e:	40 f3       	brcs	.-48     	; 0x4f0 <keypad_u8check_press+0x46>
				returnval = arr[row][coloumn];
				break;
			}  
		}
		
		if (x == 0)
 520:	dd 23       	and	r29, r29
 522:	19 f0       	breq	.+6      	; 0x52a <keypad_u8check_press+0x80>
	char row = 0;
	char coloumn = 0;
	char x = 0;
	char returnval = NOTPRESSED;
	 
	for(row = 0; row < N_Row; ++row)
 524:	1f 5f       	subi	r17, 0xFF	; 255
 526:	14 30       	cpi	r17, 0x04	; 4
 528:	40 f2       	brcs	.-112    	; 0x4ba <keypad_u8check_press+0x10>
			break;
		}
	}
	
	return returnval;
 52a:	80 2f       	mov	r24, r16
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	1f 91       	pop	r17
 532:	0f 91       	pop	r16
 534:	08 95       	ret

00000536 <send_falling_edge>:
	#endif
}

void send_falling_edge(void)
{
	DIO_write(EN_PORT, EN_PIN, 1);
 536:	41 e0       	ldi	r20, 0x01	; 1
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	82 e4       	ldi	r24, 0x42	; 66
 53c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 540:	83 ef       	ldi	r24, 0xF3	; 243
 542:	91 e0       	ldi	r25, 0x01	; 1
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <send_falling_edge+0xe>
 548:	00 c0       	rjmp	.+0      	; 0x54a <send_falling_edge+0x14>
 54a:	00 00       	nop
	_delay_ms(2);
	DIO_write(EN_PORT, EN_PIN, 0);
 54c:	40 e0       	ldi	r20, 0x00	; 0
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	82 e4       	ldi	r24, 0x42	; 66
 552:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 556:	83 ef       	ldi	r24, 0xF3	; 243
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	f1 f7       	brne	.-4      	; 0x55a <send_falling_edge+0x24>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <send_falling_edge+0x2a>
 560:	00 00       	nop
 562:	08 95       	ret

00000564 <LCD_vSend_cmd>:
	_delay_ms(2);
}

void LCD_vSend_cmd(char cmd)
{
 564:	cf 93       	push	r28
 566:	c8 2f       	mov	r28, r24
		DIO_write(RS_PORT, RS_PIN, 0);
		send_falling_edge();
	
	/* We will work on 4-bis Mode */
	#elif defined four_bits_mode
		write_high_nibble(LCD_PORT, cmd >> 4);
 568:	68 2f       	mov	r22, r24
 56a:	62 95       	swap	r22
 56c:	6f 70       	andi	r22, 0x0F	; 15
 56e:	81 e4       	ldi	r24, 0x41	; 65
 570:	0e 94 f6 01 	call	0x3ec	; 0x3ec <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 0);
 574:	40 e0       	ldi	r20, 0x00	; 0
 576:	61 e0       	ldi	r22, 0x01	; 1
 578:	82 e4       	ldi	r24, 0x42	; 66
 57a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		send_falling_edge();
 57e:	0e 94 9b 02 	call	0x536	; 0x536 <send_falling_edge>
		write_high_nibble(LCD_PORT, cmd);
 582:	6c 2f       	mov	r22, r28
 584:	81 e4       	ldi	r24, 0x41	; 65
 586:	0e 94 f6 01 	call	0x3ec	; 0x3ec <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 0);
 58a:	40 e0       	ldi	r20, 0x00	; 0
 58c:	61 e0       	ldi	r22, 0x01	; 1
 58e:	82 e4       	ldi	r24, 0x42	; 66
 590:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		send_falling_edge();
 594:	0e 94 9b 02 	call	0x536	; 0x536 <send_falling_edge>
 598:	89 ef       	ldi	r24, 0xF9	; 249
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	01 97       	sbiw	r24, 0x01	; 1
 59e:	f1 f7       	brne	.-4      	; 0x59c <LCD_vSend_cmd+0x38>
 5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <LCD_vSend_cmd+0x3e>
 5a2:	00 00       	nop

	#endif
	_delay_ms(1);
}
 5a4:	cf 91       	pop	r28
 5a6:	08 95       	ret

000005a8 <LCD_vInit>:
 5a8:	83 ed       	ldi	r24, 0xD3	; 211
 5aa:	90 e3       	ldi	r25, 0x30	; 48
 5ac:	01 97       	sbiw	r24, 0x01	; 1
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <LCD_vInit+0x4>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <LCD_vInit+0xa>
 5b2:	00 00       	nop
		LCD_vSend_cmd(ENTRY_MODE); /* Entry Mode */
		_delay_ms(1);
	
	/* We will work on 4-bis Mode */
	#elif defined four_bits_mode
		for (counter = 4; counter < LCD_NPINs; ++counter)
 5b4:	84 e0       	ldi	r24, 0x04	; 4
 5b6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <counter>
 5ba:	09 c0       	rjmp	.+18     	; 0x5ce <LCD_vInit+0x26>
		{
			DIO_vsetPINDir(LCD_PORT, counter, 1);
 5bc:	41 e0       	ldi	r20, 0x01	; 1
 5be:	81 e4       	ldi	r24, 0x41	; 65
 5c0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
		LCD_vSend_cmd(ENTRY_MODE); /* Entry Mode */
		_delay_ms(1);
	
	/* We will work on 4-bis Mode */
	#elif defined four_bits_mode
		for (counter = 4; counter < LCD_NPINs; ++counter)
 5c4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <counter>
 5c8:	8f 5f       	subi	r24, 0xFF	; 255
 5ca:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <counter>
 5ce:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <counter>
 5d2:	68 30       	cpi	r22, 0x08	; 8
 5d4:	98 f3       	brcs	.-26     	; 0x5bc <LCD_vInit+0x14>
		{
			DIO_vsetPINDir(LCD_PORT, counter, 1);
		}
		DIO_vsetPINDir(EN_PORT, EN_PIN, 1);
 5d6:	41 e0       	ldi	r20, 0x01	; 1
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	82 e4       	ldi	r24, 0x42	; 66
 5dc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
		DIO_vsetPINDir(RW_PORT, RW_PIN, 1);
 5e0:	41 e0       	ldi	r20, 0x01	; 1
 5e2:	62 e0       	ldi	r22, 0x02	; 2
 5e4:	82 e4       	ldi	r24, 0x42	; 66
 5e6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
		DIO_vsetPINDir(RS_PORT, RS_PIN, 1);
 5ea:	41 e0       	ldi	r20, 0x01	; 1
 5ec:	61 e0       	ldi	r22, 0x01	; 1
 5ee:	82 e4       	ldi	r24, 0x42	; 66
 5f0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
   		DIO_write(RW_PORT, RW_PIN, 0);
 5f4:	40 e0       	ldi	r20, 0x00	; 0
 5f6:	62 e0       	ldi	r22, 0x02	; 2
 5f8:	82 e4       	ldi	r24, 0x42	; 66
 5fa:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		LCD_vSend_cmd(RETURN_HOME); /* Return Home (row: 0, col: 0) */
 5fe:	82 e0       	ldi	r24, 0x02	; 2
 600:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_vSend_cmd>
 604:	83 ec       	ldi	r24, 0xC3	; 195
 606:	99 e0       	ldi	r25, 0x09	; 9
 608:	01 97       	sbiw	r24, 0x01	; 1
 60a:	f1 f7       	brne	.-4      	; 0x608 <LCD_vInit+0x60>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <LCD_vInit+0x66>
 60e:	00 00       	nop
		_delay_ms(10);
		LCD_vSend_cmd(FOUR_BITS); /* 4-bits Mode */
 610:	88 e2       	ldi	r24, 0x28	; 40
 612:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_vSend_cmd>
 616:	89 ef       	ldi	r24, 0xF9	; 249
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <LCD_vInit+0x72>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <LCD_vInit+0x78>
 620:	00 00       	nop
		_delay_ms(1);
		LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON); /* Display ON Cursor ON */
 622:	8e e0       	ldi	r24, 0x0E	; 14
 624:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_vSend_cmd>
 628:	89 ef       	ldi	r24, 0xF9	; 249
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	01 97       	sbiw	r24, 0x01	; 1
 62e:	f1 f7       	brne	.-4      	; 0x62c <LCD_vInit+0x84>
 630:	00 c0       	rjmp	.+0      	; 0x632 <LCD_vInit+0x8a>
 632:	00 00       	nop
		_delay_ms(1);
		LCD_vSend_cmd(CLR_SCREEN); /* Clear Screen */
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_vSend_cmd>
 63a:	83 ec       	ldi	r24, 0xC3	; 195
 63c:	99 e0       	ldi	r25, 0x09	; 9
 63e:	01 97       	sbiw	r24, 0x01	; 1
 640:	f1 f7       	brne	.-4      	; 0x63e <LCD_vInit+0x96>
 642:	00 c0       	rjmp	.+0      	; 0x644 <LCD_vInit+0x9c>
 644:	00 00       	nop
		_delay_ms(10);
		LCD_vSend_cmd(ENTRY_MODE); /* Entry Mode */
 646:	86 e0       	ldi	r24, 0x06	; 6
 648:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_vSend_cmd>
 64c:	89 ef       	ldi	r24, 0xF9	; 249
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	01 97       	sbiw	r24, 0x01	; 1
 652:	f1 f7       	brne	.-4      	; 0x650 <LCD_vInit+0xa8>
 654:	00 c0       	rjmp	.+0      	; 0x656 <LCD_vInit+0xae>
 656:	00 00       	nop
 658:	08 95       	ret

0000065a <LCD_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD_vSend_char(char data)
{
 65a:	cf 93       	push	r28
 65c:	c8 2f       	mov	r28, r24
		DIO_write(RS_PORT, RS_PIN, 1);
		send_falling_edge();
	
	/* We will work on 4-bis Mode */
	#elif defined four_bits_mode
		write_high_nibble(LCD_PORT, (data >> 4));
 65e:	68 2f       	mov	r22, r24
 660:	62 95       	swap	r22
 662:	6f 70       	andi	r22, 0x0F	; 15
 664:	81 e4       	ldi	r24, 0x41	; 65
 666:	0e 94 f6 01 	call	0x3ec	; 0x3ec <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 1);
 66a:	41 e0       	ldi	r20, 0x01	; 1
 66c:	61 e0       	ldi	r22, 0x01	; 1
 66e:	82 e4       	ldi	r24, 0x42	; 66
 670:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		send_falling_edge();
 674:	0e 94 9b 02 	call	0x536	; 0x536 <send_falling_edge>
		write_high_nibble(LCD_PORT, data);
 678:	6c 2f       	mov	r22, r28
 67a:	81 e4       	ldi	r24, 0x41	; 65
 67c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <write_high_nibble>
		DIO_write(RS_PORT, RS_PIN, 1);
 680:	41 e0       	ldi	r20, 0x01	; 1
 682:	61 e0       	ldi	r22, 0x01	; 1
 684:	82 e4       	ldi	r24, 0x42	; 66
 686:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		send_falling_edge();
 68a:	0e 94 9b 02 	call	0x536	; 0x536 <send_falling_edge>
 68e:	89 ef       	ldi	r24, 0xF9	; 249
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	01 97       	sbiw	r24, 0x01	; 1
 694:	f1 f7       	brne	.-4      	; 0x692 <LCD_vSend_char+0x38>
 696:	00 c0       	rjmp	.+0      	; 0x698 <LCD_vSend_char+0x3e>
 698:	00 00       	nop

	#endif
	_delay_ms(1);
}
 69a:	cf 91       	pop	r28
 69c:	08 95       	ret

0000069e <main>:
#include "Keypad.h"
#include "SPI.h"

int main(void)
{
	LCD_vInit();
 69e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <LCD_vInit>
	keypad_vInit();
 6a2:	0e 94 1f 02 	call	0x43e	; 0x43e <keypad_vInit>
	
    /* Replace with your application code */
    while (1) 
    {
		char Pressed_Value = keypad_u8check_press();
 6a6:	0e 94 55 02 	call	0x4aa	; 0x4aa <keypad_u8check_press>
		LCD_vSend_char(Pressed_Value);
 6aa:	0e 94 2d 03 	call	0x65a	; 0x65a <LCD_vSend_char>
 6ae:	2f ef       	ldi	r18, 0xFF	; 255
 6b0:	83 ed       	ldi	r24, 0xD3	; 211
 6b2:	90 e3       	ldi	r25, 0x30	; 48
 6b4:	21 50       	subi	r18, 0x01	; 1
 6b6:	80 40       	sbci	r24, 0x00	; 0
 6b8:	90 40       	sbci	r25, 0x00	; 0
 6ba:	e1 f7       	brne	.-8      	; 0x6b4 <main+0x16>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <main+0x20>
 6be:	00 00       	nop
 6c0:	f2 cf       	rjmp	.-28     	; 0x6a6 <main+0x8>

000006c2 <_exit>:
 6c2:	f8 94       	cli

000006c4 <__stop_program>:
 6c4:	ff cf       	rjmp	.-2      	; 0x6c4 <__stop_program>
