
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ada  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  00002ada  00002b6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  008000b8  008000b8  00002bc6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002bc6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002bf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00002c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e0e  00000000  00000000  00002edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cdf  00000000  00000000  00004cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f5d  00000000  00000000  000059c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000858  00000000  00000000  00007928  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083e  00000000  00000000  00008180  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ff5  00000000  00000000  000089be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  000099b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 c3 03 	jmp	0x786	; 0x786 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3b       	cpi	r26, 0xB8	; 184
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 eb       	ldi	r26, 0xB8	; 184
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3d       	cpi	r26, 0xDA	; 218
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b1 12 	call	0x2562	; 0x2562 <main>
      8a:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Init>:
		LCD_clearscreen();
	}
	
	_delay_ms(150);
	LCD_clearscreen();
}
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	2e 97       	sbiw	r28, 0x0e	; 14
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_vInit>
      aa:	0e 94 cf 06 	call	0xd9e	; 0xd9e <keypad_vInit>
      ae:	0e 94 a7 11 	call	0x234e	; 0x234e <SPI_masterInit>
      b2:	0e 94 13 12 	call	0x2426	; 0x2426 <TC72_Init>
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	a6 e1       	ldi	r26, 0x16	; 22
      bc:	b3 e4       	ldi	r27, 0x43	; 67
      be:	89 83       	std	Y+1, r24	; 0x01
      c0:	9a 83       	std	Y+2, r25	; 0x02
      c2:	ab 83       	std	Y+3, r26	; 0x03
      c4:	bc 83       	std	Y+4, r27	; 0x04
      c6:	20 e0       	ldi	r18, 0x00	; 0
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	4a e7       	ldi	r20, 0x7A	; 122
      cc:	55 e4       	ldi	r21, 0x45	; 69
      ce:	69 81       	ldd	r22, Y+1	; 0x01
      d0:	7a 81       	ldd	r23, Y+2	; 0x02
      d2:	8b 81       	ldd	r24, Y+3	; 0x03
      d4:	9c 81       	ldd	r25, Y+4	; 0x04
      d6:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
      da:	dc 01       	movw	r26, r24
      dc:	cb 01       	movw	r24, r22
      de:	8d 83       	std	Y+5, r24	; 0x05
      e0:	9e 83       	std	Y+6, r25	; 0x06
      e2:	af 83       	std	Y+7, r26	; 0x07
      e4:	b8 87       	std	Y+8, r27	; 0x08
      e6:	20 e0       	ldi	r18, 0x00	; 0
      e8:	30 e0       	ldi	r19, 0x00	; 0
      ea:	40 e8       	ldi	r20, 0x80	; 128
      ec:	5f e3       	ldi	r21, 0x3F	; 63
      ee:	6d 81       	ldd	r22, Y+5	; 0x05
      f0:	7e 81       	ldd	r23, Y+6	; 0x06
      f2:	8f 81       	ldd	r24, Y+7	; 0x07
      f4:	98 85       	ldd	r25, Y+8	; 0x08
      f6:	0e 94 2c 13 	call	0x2658	; 0x2658 <__cmpsf2>
      fa:	88 23       	and	r24, r24
      fc:	2c f4       	brge	.+10     	; 0x108 <Init+0x76>
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	9a 87       	std	Y+10, r25	; 0x0a
     104:	89 87       	std	Y+9, r24	; 0x09
     106:	3f c0       	rjmp	.+126    	; 0x186 <Init+0xf4>
     108:	20 e0       	ldi	r18, 0x00	; 0
     10a:	3f ef       	ldi	r19, 0xFF	; 255
     10c:	4f e7       	ldi	r20, 0x7F	; 127
     10e:	57 e4       	ldi	r21, 0x47	; 71
     110:	6d 81       	ldd	r22, Y+5	; 0x05
     112:	7e 81       	ldd	r23, Y+6	; 0x06
     114:	8f 81       	ldd	r24, Y+7	; 0x07
     116:	98 85       	ldd	r25, Y+8	; 0x08
     118:	0e 94 84 14 	call	0x2908	; 0x2908 <__gesf2>
     11c:	18 16       	cp	r1, r24
     11e:	4c f5       	brge	.+82     	; 0x172 <Init+0xe0>
     120:	20 e0       	ldi	r18, 0x00	; 0
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	40 e2       	ldi	r20, 0x20	; 32
     126:	51 e4       	ldi	r21, 0x41	; 65
     128:	69 81       	ldd	r22, Y+1	; 0x01
     12a:	7a 81       	ldd	r23, Y+2	; 0x02
     12c:	8b 81       	ldd	r24, Y+3	; 0x03
     12e:	9c 81       	ldd	r25, Y+4	; 0x04
     130:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
     134:	dc 01       	movw	r26, r24
     136:	cb 01       	movw	r24, r22
     138:	bc 01       	movw	r22, r24
     13a:	cd 01       	movw	r24, r26
     13c:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
     140:	dc 01       	movw	r26, r24
     142:	cb 01       	movw	r24, r22
     144:	9a 87       	std	Y+10, r25	; 0x0a
     146:	89 87       	std	Y+9, r24	; 0x09
     148:	0f c0       	rjmp	.+30     	; 0x168 <Init+0xd6>
     14a:	80 e9       	ldi	r24, 0x90	; 144
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	9c 87       	std	Y+12, r25	; 0x0c
     150:	8b 87       	std	Y+11, r24	; 0x0b
     152:	8b 85       	ldd	r24, Y+11	; 0x0b
     154:	9c 85       	ldd	r25, Y+12	; 0x0c
     156:	01 97       	sbiw	r24, 0x01	; 1
     158:	f1 f7       	brne	.-4      	; 0x156 <Init+0xc4>
     15a:	9c 87       	std	Y+12, r25	; 0x0c
     15c:	8b 87       	std	Y+11, r24	; 0x0b
     15e:	89 85       	ldd	r24, Y+9	; 0x09
     160:	9a 85       	ldd	r25, Y+10	; 0x0a
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	9a 87       	std	Y+10, r25	; 0x0a
     166:	89 87       	std	Y+9, r24	; 0x09
     168:	89 85       	ldd	r24, Y+9	; 0x09
     16a:	9a 85       	ldd	r25, Y+10	; 0x0a
     16c:	89 2b       	or	r24, r25
     16e:	69 f7       	brne	.-38     	; 0x14a <Init+0xb8>
     170:	14 c0       	rjmp	.+40     	; 0x19a <Init+0x108>
     172:	6d 81       	ldd	r22, Y+5	; 0x05
     174:	7e 81       	ldd	r23, Y+6	; 0x06
     176:	8f 81       	ldd	r24, Y+7	; 0x07
     178:	98 85       	ldd	r25, Y+8	; 0x08
     17a:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
     17e:	dc 01       	movw	r26, r24
     180:	cb 01       	movw	r24, r22
     182:	9a 87       	std	Y+10, r25	; 0x0a
     184:	89 87       	std	Y+9, r24	; 0x09
     186:	89 85       	ldd	r24, Y+9	; 0x09
     188:	9a 85       	ldd	r25, Y+10	; 0x0a
     18a:	9e 87       	std	Y+14, r25	; 0x0e
     18c:	8d 87       	std	Y+13, r24	; 0x0d
     18e:	8d 85       	ldd	r24, Y+13	; 0x0d
     190:	9e 85       	ldd	r25, Y+14	; 0x0e
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <Init+0x100>
     196:	9e 87       	std	Y+14, r25	; 0x0e
     198:	8d 87       	std	Y+13, r24	; 0x0d
     19a:	00 00       	nop
     19c:	2e 96       	adiw	r28, 0x0e	; 14
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	f8 94       	cli
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	cd bf       	out	0x3d, r28	; 61
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	08 95       	ret

000001ae <IDLE_Screen>:

void IDLE_Screen(void)
{
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
     1b6:	2e 97       	sbiw	r28, 0x0e	; 14
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	cd bf       	out	0x3d, r28	; 61
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	a0 e7       	ldi	r26, 0x70	; 112
     1c8:	b1 e4       	ldi	r27, 0x41	; 65
     1ca:	89 83       	std	Y+1, r24	; 0x01
     1cc:	9a 83       	std	Y+2, r25	; 0x02
     1ce:	ab 83       	std	Y+3, r26	; 0x03
     1d0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	4a e7       	ldi	r20, 0x7A	; 122
     1d8:	55 e4       	ldi	r21, 0x45	; 69
     1da:	69 81       	ldd	r22, Y+1	; 0x01
     1dc:	7a 81       	ldd	r23, Y+2	; 0x02
     1de:	8b 81       	ldd	r24, Y+3	; 0x03
     1e0:	9c 81       	ldd	r25, Y+4	; 0x04
     1e2:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
     1e6:	dc 01       	movw	r26, r24
     1e8:	cb 01       	movw	r24, r22
     1ea:	8d 83       	std	Y+5, r24	; 0x05
     1ec:	9e 83       	std	Y+6, r25	; 0x06
     1ee:	af 83       	std	Y+7, r26	; 0x07
     1f0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     1f2:	20 e0       	ldi	r18, 0x00	; 0
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	40 e8       	ldi	r20, 0x80	; 128
     1f8:	5f e3       	ldi	r21, 0x3F	; 63
     1fa:	6d 81       	ldd	r22, Y+5	; 0x05
     1fc:	7e 81       	ldd	r23, Y+6	; 0x06
     1fe:	8f 81       	ldd	r24, Y+7	; 0x07
     200:	98 85       	ldd	r25, Y+8	; 0x08
     202:	0e 94 2c 13 	call	0x2658	; 0x2658 <__cmpsf2>
     206:	88 23       	and	r24, r24
     208:	2c f4       	brge	.+10     	; 0x214 <IDLE_Screen+0x66>
		__ticks = 1;
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	9a 87       	std	Y+10, r25	; 0x0a
     210:	89 87       	std	Y+9, r24	; 0x09
     212:	3f c0       	rjmp	.+126    	; 0x292 <IDLE_Screen+0xe4>
	else if (__tmp > 65535)
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	3f ef       	ldi	r19, 0xFF	; 255
     218:	4f e7       	ldi	r20, 0x7F	; 127
     21a:	57 e4       	ldi	r21, 0x47	; 71
     21c:	6d 81       	ldd	r22, Y+5	; 0x05
     21e:	7e 81       	ldd	r23, Y+6	; 0x06
     220:	8f 81       	ldd	r24, Y+7	; 0x07
     222:	98 85       	ldd	r25, Y+8	; 0x08
     224:	0e 94 84 14 	call	0x2908	; 0x2908 <__gesf2>
     228:	18 16       	cp	r1, r24
     22a:	4c f5       	brge	.+82     	; 0x27e <IDLE_Screen+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	40 e2       	ldi	r20, 0x20	; 32
     232:	51 e4       	ldi	r21, 0x41	; 65
     234:	69 81       	ldd	r22, Y+1	; 0x01
     236:	7a 81       	ldd	r23, Y+2	; 0x02
     238:	8b 81       	ldd	r24, Y+3	; 0x03
     23a:	9c 81       	ldd	r25, Y+4	; 0x04
     23c:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
     240:	dc 01       	movw	r26, r24
     242:	cb 01       	movw	r24, r22
     244:	bc 01       	movw	r22, r24
     246:	cd 01       	movw	r24, r26
     248:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
     24c:	dc 01       	movw	r26, r24
     24e:	cb 01       	movw	r24, r22
     250:	9a 87       	std	Y+10, r25	; 0x0a
     252:	89 87       	std	Y+9, r24	; 0x09
     254:	0f c0       	rjmp	.+30     	; 0x274 <IDLE_Screen+0xc6>
     256:	80 e9       	ldi	r24, 0x90	; 144
     258:	91 e0       	ldi	r25, 0x01	; 1
     25a:	9c 87       	std	Y+12, r25	; 0x0c
     25c:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     25e:	8b 85       	ldd	r24, Y+11	; 0x0b
     260:	9c 85       	ldd	r25, Y+12	; 0x0c
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <IDLE_Screen+0xb4>
     266:	9c 87       	std	Y+12, r25	; 0x0c
     268:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     26a:	89 85       	ldd	r24, Y+9	; 0x09
     26c:	9a 85       	ldd	r25, Y+10	; 0x0a
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	9a 87       	std	Y+10, r25	; 0x0a
     272:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     274:	89 85       	ldd	r24, Y+9	; 0x09
     276:	9a 85       	ldd	r25, Y+10	; 0x0a
     278:	89 2b       	or	r24, r25
     27a:	69 f7       	brne	.-38     	; 0x256 <IDLE_Screen+0xa8>
     27c:	14 c0       	rjmp	.+40     	; 0x2a6 <IDLE_Screen+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     27e:	6d 81       	ldd	r22, Y+5	; 0x05
     280:	7e 81       	ldd	r23, Y+6	; 0x06
     282:	8f 81       	ldd	r24, Y+7	; 0x07
     284:	98 85       	ldd	r25, Y+8	; 0x08
     286:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
     28a:	dc 01       	movw	r26, r24
     28c:	cb 01       	movw	r24, r22
     28e:	9a 87       	std	Y+10, r25	; 0x0a
     290:	89 87       	std	Y+9, r24	; 0x09
     292:	89 85       	ldd	r24, Y+9	; 0x09
     294:	9a 85       	ldd	r25, Y+10	; 0x0a
     296:	9e 87       	std	Y+14, r25	; 0x0e
     298:	8d 87       	std	Y+13, r24	; 0x0d
     29a:	8d 85       	ldd	r24, Y+13	; 0x0d
     29c:	9e 85       	ldd	r25, Y+14	; 0x0e
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <IDLE_Screen+0xf0>
     2a2:	9e 87       	std	Y+14, r25	; 0x0e
     2a4:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(15);
	LCD_movecursor(1, 1);
     2a6:	61 e0       	ldi	r22, 0x01	; 1
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_movecursor>
	LCD_vSend_string("SET:25");
     2ae:	88 e6       	ldi	r24, 0x68	; 104
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_vSend_string>
	LCD_movecursor(1, 11);
     2b6:	6b e0       	ldi	r22, 0x0B	; 11
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_movecursor>
	LCD_vSend_string("CRT:");
     2be:	8f e6       	ldi	r24, 0x6F	; 111
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_vSend_string>
	LCD_movecursor(2, 1);
     2c6:	61 e0       	ldi	r22, 0x01	; 1
     2c8:	82 e0       	ldi	r24, 0x02	; 2
     2ca:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_movecursor>
	LCD_vSend_string("STATE:STANDBY");
     2ce:	84 e7       	ldi	r24, 0x74	; 116
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_vSend_string>
}
     2d6:	00 00       	nop
     2d8:	2e 96       	adiw	r28, 0x0e	; 14
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	cd bf       	out	0x3d, r28	; 61
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	08 95       	ret

000002ea <UsrGetVal>:

void UsrGetVal(void)
{
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	1f 92       	push	r1
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
	keyPress = 1;
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <keyPress>
	u8 val = 0;
     2fa:	19 82       	std	Y+1, r1	; 0x01
	static const u8 col = 5;
	static u8 counter = 0;
	
	LCD_movecursor(1, (counter + col));
     2fc:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <counter.2402>
     300:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <col.2401>
     304:	89 0f       	add	r24, r25
     306:	68 2f       	mov	r22, r24
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_movecursor>
	
	while (val != '*' && val != '#')
     30e:	1f c0       	rjmp	.+62     	; 0x34e <UsrGetVal+0x64>
	{
		//val != '*' && val != '#'
		val = getKey();
     310:	0e 94 5d 07 	call	0xeba	; 0xeba <getKey>
     314:	89 83       	std	Y+1, r24	; 0x01
		
		if (val != '*' && val != '#')
     316:	89 81       	ldd	r24, Y+1	; 0x01
     318:	8a 32       	cpi	r24, 0x2A	; 42
     31a:	f9 f0       	breq	.+62     	; 0x35a <UsrGetVal+0x70>
     31c:	89 81       	ldd	r24, Y+1	; 0x01
     31e:	83 32       	cpi	r24, 0x23	; 35
     320:	e1 f0       	breq	.+56     	; 0x35a <UsrGetVal+0x70>
		{
			LCD_vSend_char(val);
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_vSend_char>
		else
		{
			break;
		}
		
		temp[counter] = val;
     328:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <counter.2402>
     32c:	88 2f       	mov	r24, r24
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	84 54       	subi	r24, 0x44	; 68
     332:	9f 4f       	sbci	r25, 0xFF	; 255
     334:	29 81       	ldd	r18, Y+1	; 0x01
     336:	fc 01       	movw	r30, r24
     338:	20 83       	st	Z, r18
		counter = counter + 1;
     33a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <counter.2402>
     33e:	8f 5f       	subi	r24, 0xFF	; 255
     340:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <counter.2402>
		counter = counter % 2;
     344:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <counter.2402>
     348:	81 70       	andi	r24, 0x01	; 1
     34a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <counter.2402>
	static const u8 col = 5;
	static u8 counter = 0;
	
	LCD_movecursor(1, (counter + col));
	
	while (val != '*' && val != '#')
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	8a 32       	cpi	r24, 0x2A	; 42
     352:	19 f0       	breq	.+6      	; 0x35a <UsrGetVal+0x70>
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	83 32       	cpi	r24, 0x23	; 35
     358:	d9 f6       	brne	.-74     	; 0x310 <UsrGetVal+0x26>
		temp[counter] = val;
		counter = counter + 1;
		counter = counter % 2;
	}

	SetTemp = atoi(temp);
     35a:	8c eb       	ldi	r24, 0xBC	; 188
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <atoi>
     362:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <__data_end+0x1>
     366:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__data_end>
	hash_pressed = 1;
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <hash_pressed>
	keyPress = 0;
     370:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <keyPress>
}
     374:	00 00       	nop
     376:	0f 90       	pop	r0
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <tc72_read>:

c8 tc72_read(void)
{
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
     386:	2f 97       	sbiw	r28, 0x0f	; 15
     388:	0f b6       	in	r0, 0x3f	; 63
     38a:	f8 94       	cli
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	0f be       	out	0x3f, r0	; 63
     390:	cd bf       	out	0x3d, r28	; 61
    c8 MSB = 0;
     392:	19 82       	std	Y+1, r1	; 0x01
	
	while(1)
	{
		/* MSB */
		SPI_PORT |= (1 << SS);
     394:	88 e3       	ldi	r24, 0x38	; 56
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	28 e3       	ldi	r18, 0x38	; 56
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	f9 01       	movw	r30, r18
     39e:	20 81       	ld	r18, Z
     3a0:	20 61       	ori	r18, 0x10	; 16
     3a2:	fc 01       	movw	r30, r24
     3a4:	20 83       	st	Z, r18
		SPI_masterTransmit(0x02);            /* Read will be from MSB temperature register */
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <SPI_masterTransmit>
		SPI_masterTransmit(0x00);
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <SPI_masterTransmit>
		SPI_PORT &= ~(1 << SS);
     3b2:	88 e3       	ldi	r24, 0x38	; 56
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	28 e3       	ldi	r18, 0x38	; 56
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	f9 01       	movw	r30, r18
     3bc:	20 81       	ld	r18, Z
     3be:	2f 7e       	andi	r18, 0xEF	; 239
     3c0:	fc 01       	movw	r30, r24
     3c2:	20 83       	st	Z, r18
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	a0 e8       	ldi	r26, 0x80	; 128
     3ca:	bf e3       	ldi	r27, 0x3F	; 63
     3cc:	8a 83       	std	Y+2, r24	; 0x02
     3ce:	9b 83       	std	Y+3, r25	; 0x03
     3d0:	ac 83       	std	Y+4, r26	; 0x04
     3d2:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	4a e7       	ldi	r20, 0x7A	; 122
     3da:	55 e4       	ldi	r21, 0x45	; 69
     3dc:	6a 81       	ldd	r22, Y+2	; 0x02
     3de:	7b 81       	ldd	r23, Y+3	; 0x03
     3e0:	8c 81       	ldd	r24, Y+4	; 0x04
     3e2:	9d 81       	ldd	r25, Y+5	; 0x05
     3e4:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
     3e8:	dc 01       	movw	r26, r24
     3ea:	cb 01       	movw	r24, r22
     3ec:	8e 83       	std	Y+6, r24	; 0x06
     3ee:	9f 83       	std	Y+7, r25	; 0x07
     3f0:	a8 87       	std	Y+8, r26	; 0x08
     3f2:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	40 e8       	ldi	r20, 0x80	; 128
     3fa:	5f e3       	ldi	r21, 0x3F	; 63
     3fc:	6e 81       	ldd	r22, Y+6	; 0x06
     3fe:	7f 81       	ldd	r23, Y+7	; 0x07
     400:	88 85       	ldd	r24, Y+8	; 0x08
     402:	99 85       	ldd	r25, Y+9	; 0x09
     404:	0e 94 2c 13 	call	0x2658	; 0x2658 <__cmpsf2>
     408:	88 23       	and	r24, r24
     40a:	2c f4       	brge	.+10     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		__ticks = 1;
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	9b 87       	std	Y+11, r25	; 0x0b
     412:	8a 87       	std	Y+10, r24	; 0x0a
     414:	3f c0       	rjmp	.+126    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
	else if (__tmp > 65535)
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	3f ef       	ldi	r19, 0xFF	; 255
     41a:	4f e7       	ldi	r20, 0x7F	; 127
     41c:	57 e4       	ldi	r21, 0x47	; 71
     41e:	6e 81       	ldd	r22, Y+6	; 0x06
     420:	7f 81       	ldd	r23, Y+7	; 0x07
     422:	88 85       	ldd	r24, Y+8	; 0x08
     424:	99 85       	ldd	r25, Y+9	; 0x09
     426:	0e 94 84 14 	call	0x2908	; 0x2908 <__gesf2>
     42a:	18 16       	cp	r1, r24
     42c:	4c f5       	brge	.+82     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	40 e2       	ldi	r20, 0x20	; 32
     434:	51 e4       	ldi	r21, 0x41	; 65
     436:	6a 81       	ldd	r22, Y+2	; 0x02
     438:	7b 81       	ldd	r23, Y+3	; 0x03
     43a:	8c 81       	ldd	r24, Y+4	; 0x04
     43c:	9d 81       	ldd	r25, Y+5	; 0x05
     43e:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
     442:	dc 01       	movw	r26, r24
     444:	cb 01       	movw	r24, r22
     446:	bc 01       	movw	r22, r24
     448:	cd 01       	movw	r24, r26
     44a:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
     44e:	dc 01       	movw	r26, r24
     450:	cb 01       	movw	r24, r22
     452:	9b 87       	std	Y+11, r25	; 0x0b
     454:	8a 87       	std	Y+10, r24	; 0x0a
     456:	0f c0       	rjmp	.+30     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     458:	80 e9       	ldi	r24, 0x90	; 144
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	9d 87       	std	Y+13, r25	; 0x0d
     45e:	8c 87       	std	Y+12, r24	; 0x0c
     460:	8c 85       	ldd	r24, Y+12	; 0x0c
     462:	9d 85       	ldd	r25, Y+13	; 0x0d
     464:	01 97       	sbiw	r24, 0x01	; 1
     466:	f1 f7       	brne	.-4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     468:	9d 87       	std	Y+13, r25	; 0x0d
     46a:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     46c:	8a 85       	ldd	r24, Y+10	; 0x0a
     46e:	9b 85       	ldd	r25, Y+11	; 0x0b
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	9b 87       	std	Y+11, r25	; 0x0b
     474:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     476:	8a 85       	ldd	r24, Y+10	; 0x0a
     478:	9b 85       	ldd	r25, Y+11	; 0x0b
     47a:	89 2b       	or	r24, r25
     47c:	69 f7       	brne	.-38     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     47e:	14 c0       	rjmp	.+40     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     480:	6e 81       	ldd	r22, Y+6	; 0x06
     482:	7f 81       	ldd	r23, Y+7	; 0x07
     484:	88 85       	ldd	r24, Y+8	; 0x08
     486:	99 85       	ldd	r25, Y+9	; 0x09
     488:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
     48c:	dc 01       	movw	r26, r24
     48e:	cb 01       	movw	r24, r22
     490:	9b 87       	std	Y+11, r25	; 0x0b
     492:	8a 87       	std	Y+10, r24	; 0x0a
     494:	8a 85       	ldd	r24, Y+10	; 0x0a
     496:	9b 85       	ldd	r25, Y+11	; 0x0b
     498:	9f 87       	std	Y+15, r25	; 0x0f
     49a:	8e 87       	std	Y+14, r24	; 0x0e
     49c:	8e 85       	ldd	r24, Y+14	; 0x0e
     49e:	9f 85       	ldd	r25, Y+15	; 0x0f
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     4a4:	9f 87       	std	Y+15, r25	; 0x0f
     4a6:	8e 87       	std	Y+14, r24	; 0x0e

		_delay_ms(1);
		MSB = SPI_masterReceive();
     4a8:	0e 94 01 12 	call	0x2402	; 0x2402 <SPI_masterReceive>
     4ac:	89 83       	std	Y+1, r24	; 0x01
		
		return MSB;
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
     4b0:	2f 96       	adiw	r28, 0x0f	; 15
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <CRT_Temp>:

void CRT_Temp(void)
{
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	00 d0       	rcall	.+0      	; 0x4c8 <CRT_Temp+0x6>
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <CRT_Temp+0x8>
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
	u8 value = 0;
     4ce:	19 82       	std	Y+1, r1	; 0x01

	c8 CurrentTempString[2];
	c8 MSB = tc72_read();
     4d0:	0e 94 bf 01 	call	0x37e	; 0x37e <tc72_read>
     4d4:	8a 83       	std	Y+2, r24	; 0x02
	itoa(MSB, CurrentTempString, 10);
     4d6:	8a 81       	ldd	r24, Y+2	; 0x02
     4d8:	88 2f       	mov	r24, r24
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	9e 01       	movw	r18, r28
     4de:	2d 5f       	subi	r18, 0xFD	; 253
     4e0:	3f 4f       	sbci	r19, 0xFF	; 255
     4e2:	4a e0       	ldi	r20, 0x0A	; 10
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	b9 01       	movw	r22, r18
     4e8:	0e 94 23 15 	call	0x2a46	; 0x2a46 <itoa>
		
	LCD_movecursor(1, 15);
     4ec:	6f e0       	ldi	r22, 0x0F	; 15
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_movecursor>
	LCD_vSend_string(CurrentTempString);
     4f4:	ce 01       	movw	r24, r28
     4f6:	03 96       	adiw	r24, 0x03	; 3
     4f8:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_vSend_string>
	CrtTemp = atoi(CurrentTempString);
     4fc:	ce 01       	movw	r24, r28
     4fe:	03 96       	adiw	r24, 0x03	; 3
     500:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <atoi>
     504:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <CrtTemp+0x1>
     508:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <CrtTemp>
}
     50c:	00 00       	nop
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <getCurrentTemp>:

u16 getCurrentTemp(void)
{
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	cd b7       	in	r28, 0x3d	; 61
     522:	de b7       	in	r29, 0x3e	; 62
	return CrtTemp;
     524:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <CrtTemp>
     528:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <CrtTemp+0x1>
}
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	08 95       	ret

00000532 <getSetTemp>:

u16 getSetTemp(void)
{
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	cd b7       	in	r28, 0x3d	; 61
     538:	de b7       	in	r29, 0x3e	; 62
	return SetTemp;
     53a:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end>
     53e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__data_end+0x1>
}
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <GetVt>:

float64_t GetVt(void)
{
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
	Vt = (float64_t) ((getSetTemp() - getCurrentTemp()) / 100.0) * 10.0;
     554:	0e 94 99 02 	call	0x532	; 0x532 <getSetTemp>
     558:	8c 01       	movw	r16, r24
     55a:	0e 94 8e 02 	call	0x51c	; 0x51c <getCurrentTemp>
     55e:	98 01       	movw	r18, r16
     560:	28 1b       	sub	r18, r24
     562:	39 0b       	sbc	r19, r25
     564:	c9 01       	movw	r24, r18
     566:	cc 01       	movw	r24, r24
     568:	a0 e0       	ldi	r26, 0x00	; 0
     56a:	b0 e0       	ldi	r27, 0x00	; 0
     56c:	bc 01       	movw	r22, r24
     56e:	cd 01       	movw	r24, r26
     570:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__floatunsisf>
     574:	dc 01       	movw	r26, r24
     576:	cb 01       	movw	r24, r22
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	48 ec       	ldi	r20, 0xC8	; 200
     57e:	52 e4       	ldi	r21, 0x42	; 66
     580:	bc 01       	movw	r22, r24
     582:	cd 01       	movw	r24, r26
     584:	0e 94 31 13 	call	0x2662	; 0x2662 <__divsf3>
     588:	dc 01       	movw	r26, r24
     58a:	cb 01       	movw	r24, r22
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	40 e2       	ldi	r20, 0x20	; 32
     592:	51 e4       	ldi	r21, 0x41	; 65
     594:	bc 01       	movw	r22, r24
     596:	cd 01       	movw	r24, r26
     598:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
     59c:	dc 01       	movw	r26, r24
     59e:	cb 01       	movw	r24, r22
     5a0:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <Vt>
     5a4:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <Vt+0x1>
     5a8:	a0 93 cd 00 	sts	0x00CD, r26	; 0x8000cd <Vt+0x2>
     5ac:	b0 93 ce 00 	sts	0x00CE, r27	; 0x8000ce <Vt+0x3>
	return Vt;
     5b0:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <Vt>
     5b4:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <Vt+0x1>
     5b8:	a0 91 cd 00 	lds	r26, 0x00CD	; 0x8000cd <Vt+0x2>
     5bc:	b0 91 ce 00 	lds	r27, 0x00CE	; 0x8000ce <Vt+0x3>
}
     5c0:	bc 01       	movw	r22, r24
     5c2:	cd 01       	movw	r24, r26
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	08 95       	ret

000005ce <getADCVal>:

float64_t getADCVal(void)
{
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	00 d0       	rcall	.+0      	; 0x5d4 <getADCVal+0x6>
     5d4:	00 d0       	rcall	.+0      	; 0x5d6 <getADCVal+0x8>
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
	initADC0();
     5da:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <initADC0>
	u32 result = adc_read();
     5de:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <adc_read>
     5e2:	dc 01       	movw	r26, r24
     5e4:	cb 01       	movw	r24, r22
     5e6:	89 83       	std	Y+1, r24	; 0x01
     5e8:	9a 83       	std	Y+2, r25	; 0x02
     5ea:	ab 83       	std	Y+3, r26	; 0x03
     5ec:	bc 83       	std	Y+4, r27	; 0x04
	Vr = sampleToVolts(result);
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	9a 81       	ldd	r25, Y+2	; 0x02
     5f2:	ab 81       	ldd	r26, Y+3	; 0x03
     5f4:	bc 81       	ldd	r27, Y+4	; 0x04
     5f6:	bc 01       	movw	r22, r24
     5f8:	cd 01       	movw	r24, r26
     5fa:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <sampleToVolts>
     5fe:	88 2f       	mov	r24, r24
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	a0 e0       	ldi	r26, 0x00	; 0
     604:	b0 e0       	ldi	r27, 0x00	; 0
     606:	bc 01       	movw	r22, r24
     608:	cd 01       	movw	r24, r26
     60a:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__floatunsisf>
     60e:	dc 01       	movw	r26, r24
     610:	cb 01       	movw	r24, r22
     612:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <Vr>
     616:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <Vr+0x1>
     61a:	a0 93 d1 00 	sts	0x00D1, r26	; 0x8000d1 <Vr+0x2>
     61e:	b0 93 d2 00 	sts	0x00D2, r27	; 0x8000d2 <Vr+0x3>
	
	return Vr;
     622:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <Vr>
     626:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <Vr+0x1>
     62a:	a0 91 d1 00 	lds	r26, 0x00D1	; 0x8000d1 <Vr+0x2>
     62e:	b0 91 d2 00 	lds	r27, 0x00D2	; 0x8000d2 <Vr+0x3>
}
     632:	bc 01       	movw	r22, r24
     634:	cd 01       	movw	r24, r26
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <drivePWM>:

void drivePWM(void)
{
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	28 97       	sbiw	r28, 0x08	; 8
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	f8 94       	cli
     652:	de bf       	out	0x3e, r29	; 62
     654:	0f be       	out	0x3f, r0	; 63
     656:	cd bf       	out	0x3d, r28	; 61
	InitPWM();
     658:	0e 94 cb 05 	call	0xb96	; 0xb96 <InitPWM>
	float64_t Vt = GetVt();
     65c:	0e 94 a4 02 	call	0x548	; 0x548 <GetVt>
     660:	dc 01       	movw	r26, r24
     662:	cb 01       	movw	r24, r22
     664:	89 83       	std	Y+1, r24	; 0x01
     666:	9a 83       	std	Y+2, r25	; 0x02
     668:	ab 83       	std	Y+3, r26	; 0x03
     66a:	bc 83       	std	Y+4, r27	; 0x04
	float64_t Vr = getADCVal();
     66c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <getADCVal>
     670:	dc 01       	movw	r26, r24
     672:	cb 01       	movw	r24, r22
     674:	8d 83       	std	Y+5, r24	; 0x05
     676:	9e 83       	std	Y+6, r25	; 0x06
     678:	af 83       	std	Y+7, r26	; 0x07
     67a:	b8 87       	std	Y+8, r27	; 0x08
	SetPWMOutput(Vr, Vt);
     67c:	29 81       	ldd	r18, Y+1	; 0x01
     67e:	3a 81       	ldd	r19, Y+2	; 0x02
     680:	4b 81       	ldd	r20, Y+3	; 0x03
     682:	5c 81       	ldd	r21, Y+4	; 0x04
     684:	8d 81       	ldd	r24, Y+5	; 0x05
     686:	9e 81       	ldd	r25, Y+6	; 0x06
     688:	af 81       	ldd	r26, Y+7	; 0x07
     68a:	b8 85       	ldd	r27, Y+8	; 0x08
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <SetPWMOutput>
}
     694:	00 00       	nop
     696:	28 96       	adiw	r28, 0x08	; 8
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	cd bf       	out	0x3d, r28	; 61
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <setCountMinutes>:

// FLAG setter
void setCountMinutes(void)
{
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
	countMinutes = 1;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <countMinutes>
}
     6b6:	00 00       	nop
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <setCheckTemp>:
void setCheckTemp(void)
{
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
	checkTemp = 1;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <checkTemp>
}
     6cc:	00 00       	nop
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	08 95       	ret

000006d4 <setVoltModule>:
void setVoltModule(void)
{
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	cd b7       	in	r28, 0x3d	; 61
     6da:	de b7       	in	r29, 0x3e	; 62
	voltModule = 1;
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <voltModule>
}
     6e2:	00 00       	nop
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <setOverHeating>:
void setOverHeating(void)
{
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
	overHeating = 1;
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <overHeating>
}
     6f8:	00 00       	nop
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret

00000700 <setPoteinVal>:
void setPoteinVal(void)
{
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
	poteinVal = 1;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <poteinVal>
}
     70e:	00 00       	nop
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <clearCountMinutes>:

// FLAG clear
void clearCountMinutes(void)
{
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
	countMinutes = 0;
     71e:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <countMinutes>
	minute_counter = 0;
     722:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <minute_counter+0x1>
     726:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <minute_counter>
	minutes_elapsed = 0;
     72a:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <minutes_elapsed>
}
     72e:	00 00       	nop
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	08 95       	ret

00000736 <clearCheckTemp>:
void clearCheckTemp(void)
{
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
	checkTemp = 0;
     73e:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <checkTemp>
}
     742:	00 00       	nop
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	08 95       	ret

0000074a <clearVoltModule>:
void clearVoltModule(void)
{
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
	voltModule = 0;
     752:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <voltModule>
}
     756:	00 00       	nop
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	08 95       	ret

0000075e <clearOverHeating>:
void clearOverHeating(void)
{
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	cd b7       	in	r28, 0x3d	; 61
     764:	de b7       	in	r29, 0x3e	; 62
	overHeating = 0;
     766:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <overHeating>
}
     76a:	00 00       	nop
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <clearPoteinVal>:
void clearPoteinVal(void)
{
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
	poteinVal = 0;
     77a:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <poteinVal>
}
     77e:	00 00       	nop
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	08 95       	ret

00000786 <__vector_4>:

// ______________________

ISR (TIMER2_COMP_vect)
{
     786:	1f 92       	push	r1
     788:	0f 92       	push	r0
     78a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     78e:	0f 92       	push	r0
     790:	11 24       	eor	r1, r1
     792:	2f 93       	push	r18
     794:	3f 93       	push	r19
     796:	4f 93       	push	r20
     798:	5f 93       	push	r21
     79a:	6f 93       	push	r22
     79c:	7f 93       	push	r23
     79e:	8f 93       	push	r24
     7a0:	9f 93       	push	r25
     7a2:	af 93       	push	r26
     7a4:	bf 93       	push	r27
     7a6:	ef 93       	push	r30
     7a8:	ff 93       	push	r31
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
	if (keyPress == 0)
     7b2:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <keyPress>
     7b6:	88 23       	and	r24, r24
     7b8:	11 f4       	brne	.+4      	; 0x7be <__vector_4+0x38>
	{
		schedule();
     7ba:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <schedule>
	}
	else
	{
		
	}
}
     7be:	00 00       	nop
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	ff 91       	pop	r31
     7c6:	ef 91       	pop	r30
     7c8:	bf 91       	pop	r27
     7ca:	af 91       	pop	r26
     7cc:	9f 91       	pop	r25
     7ce:	8f 91       	pop	r24
     7d0:	7f 91       	pop	r23
     7d2:	6f 91       	pop	r22
     7d4:	5f 91       	pop	r21
     7d6:	4f 91       	pop	r20
     7d8:	3f 91       	pop	r19
     7da:	2f 91       	pop	r18
     7dc:	0f 90       	pop	r0
     7de:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     7e2:	0f 90       	pop	r0
     7e4:	1f 90       	pop	r1
     7e6:	18 95       	reti

000007e8 <schedule>:

void schedule(void)
{
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
	ms_elapsed = ms_elapsed + 1;
     7f0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <ms_elapsed>
     7f4:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <ms_elapsed+0x1>
     7f8:	01 96       	adiw	r24, 0x01	; 1
     7fa:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <ms_elapsed+0x1>
     7fe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <ms_elapsed>
	setState();
     802:	0e 94 a8 04 	call	0x950	; 0x950 <setState>
	//if (!(ms_elapsed % 1))
	//{
		//setState();
	//}

	if (!(ms_elapsed % 200))
     806:	40 91 c1 00 	lds	r20, 0x00C1	; 0x8000c1 <ms_elapsed>
     80a:	50 91 c2 00 	lds	r21, 0x00C2	; 0x8000c2 <ms_elapsed+0x1>
     80e:	ca 01       	movw	r24, r20
     810:	96 95       	lsr	r25
     812:	87 95       	ror	r24
     814:	96 95       	lsr	r25
     816:	87 95       	ror	r24
     818:	96 95       	lsr	r25
     81a:	87 95       	ror	r24
     81c:	9c 01       	movw	r18, r24
     81e:	ab e7       	ldi	r26, 0x7B	; 123
     820:	b4 e1       	ldi	r27, 0x14	; 20
     822:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__umulhisi3>
     826:	96 95       	lsr	r25
     828:	87 95       	ror	r24
     82a:	68 ec       	ldi	r22, 0xC8	; 200
     82c:	68 9f       	mul	r22, r24
     82e:	90 01       	movw	r18, r0
     830:	69 9f       	mul	r22, r25
     832:	30 0d       	add	r19, r0
     834:	11 24       	eor	r1, r1
     836:	ca 01       	movw	r24, r20
     838:	82 1b       	sub	r24, r18
     83a:	93 0b       	sbc	r25, r19
     83c:	89 2b       	or	r24, r25
     83e:	61 f4       	brne	.+24     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
	{
		if (checkTemp)
     840:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <checkTemp>
     844:	88 23       	and	r24, r24
     846:	11 f0       	breq	.+4      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
		{
			CRT_Temp();
     848:	0e 94 61 02 	call	0x4c2	; 0x4c2 <CRT_Temp>
		}
		if (voltModule)
     84c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <voltModule>
     850:	88 23       	and	r24, r24
     852:	11 f0       	breq	.+4      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
		{
			drivePWM();
     854:	0e 94 22 03 	call	0x644	; 0x644 <drivePWM>
		}
	}
	
	if (!(ms_elapsed % 500))
     858:	40 91 c1 00 	lds	r20, 0x00C1	; 0x8000c1 <ms_elapsed>
     85c:	50 91 c2 00 	lds	r21, 0x00C2	; 0x8000c2 <ms_elapsed+0x1>
     860:	ca 01       	movw	r24, r20
     862:	96 95       	lsr	r25
     864:	87 95       	ror	r24
     866:	96 95       	lsr	r25
     868:	87 95       	ror	r24
     86a:	9c 01       	movw	r18, r24
     86c:	a5 ec       	ldi	r26, 0xC5	; 197
     86e:	b0 e2       	ldi	r27, 0x20	; 32
     870:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__umulhisi3>
     874:	92 95       	swap	r25
     876:	82 95       	swap	r24
     878:	8f 70       	andi	r24, 0x0F	; 15
     87a:	89 27       	eor	r24, r25
     87c:	9f 70       	andi	r25, 0x0F	; 15
     87e:	89 27       	eor	r24, r25
     880:	64 ef       	ldi	r22, 0xF4	; 244
     882:	71 e0       	ldi	r23, 0x01	; 1
     884:	86 9f       	mul	r24, r22
     886:	90 01       	movw	r18, r0
     888:	87 9f       	mul	r24, r23
     88a:	30 0d       	add	r19, r0
     88c:	96 9f       	mul	r25, r22
     88e:	30 0d       	add	r19, r0
     890:	11 24       	eor	r1, r1
     892:	ca 01       	movw	r24, r20
     894:	82 1b       	sub	r24, r18
     896:	93 0b       	sbc	r25, r19
     898:	89 2b       	or	r24, r25
     89a:	31 f4       	brne	.+12     	; 0x8a8 <__stack+0x49>
	{
		if (poteinVal)
     89c:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <poteinVal>
     8a0:	88 23       	and	r24, r24
     8a2:	11 f0       	breq	.+4      	; 0x8a8 <__stack+0x49>
		{
			getADCVal();
     8a4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <getADCVal>
		{
			/* Do nothing */
		}
	}

	if (!(minutes_elapsed % 3))
     8a8:	20 91 c3 00 	lds	r18, 0x00C3	; 0x8000c3 <minutes_elapsed>
     8ac:	8b ea       	ldi	r24, 0xAB	; 171
     8ae:	28 9f       	mul	r18, r24
     8b0:	81 2d       	mov	r24, r1
     8b2:	11 24       	eor	r1, r1
     8b4:	98 2f       	mov	r25, r24
     8b6:	96 95       	lsr	r25
     8b8:	89 2f       	mov	r24, r25
     8ba:	88 0f       	add	r24, r24
     8bc:	89 0f       	add	r24, r25
     8be:	92 2f       	mov	r25, r18
     8c0:	98 1b       	sub	r25, r24
     8c2:	99 23       	and	r25, r25
     8c4:	31 f4       	brne	.+12     	; 0x8d2 <__stack+0x73>
	{
		if (overHeating)
     8c6:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <overHeating>
     8ca:	88 23       	and	r24, r24
     8cc:	11 f0       	breq	.+4      	; 0x8d2 <__stack+0x73>
		{
			setErrorFlag();
     8ce:	0e 94 9d 04 	call	0x93a	; 0x93a <setErrorFlag>
		}
	}

	if (countMinutes)
     8d2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <countMinutes>
     8d6:	88 23       	and	r24, r24
     8d8:	49 f0       	breq	.+18     	; 0x8ec <__stack+0x8d>
	{
		minute_counter = minute_counter + 1;
     8da:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <minute_counter>
     8de:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <minute_counter+0x1>
     8e2:	01 96       	adiw	r24, 0x01	; 1
     8e4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <minute_counter+0x1>
     8e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <minute_counter>
	}
	if (!(minute_counter % 60000))
     8ec:	20 91 c4 00 	lds	r18, 0x00C4	; 0x8000c4 <minute_counter>
     8f0:	30 91 c5 00 	lds	r19, 0x00C5	; 0x8000c5 <minute_counter+0x1>
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	20 36       	cpi	r18, 0x60	; 96
     8fa:	4a ee       	ldi	r20, 0xEA	; 234
     8fc:	34 07       	cpc	r19, r20
     8fe:	10 f4       	brcc	.+4      	; 0x904 <__stack+0xa5>
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	60 e6       	ldi	r22, 0x60	; 96
     906:	7a ee       	ldi	r23, 0xEA	; 234
     908:	86 9f       	mul	r24, r22
     90a:	a0 01       	movw	r20, r0
     90c:	87 9f       	mul	r24, r23
     90e:	50 0d       	add	r21, r0
     910:	96 9f       	mul	r25, r22
     912:	50 0d       	add	r21, r0
     914:	11 24       	eor	r1, r1
     916:	c9 01       	movw	r24, r18
     918:	84 1b       	sub	r24, r20
     91a:	95 0b       	sbc	r25, r21
     91c:	89 2b       	or	r24, r25
     91e:	49 f4       	brne	.+18     	; 0x932 <__stack+0xd3>
	{
		minute_counter = 0;
     920:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <minute_counter+0x1>
     924:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <minute_counter>
		minutes_elapsed = minutes_elapsed + 1;
     928:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <minutes_elapsed>
     92c:	8f 5f       	subi	r24, 0xFF	; 255
     92e:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <minutes_elapsed>
	}
}
     932:	00 00       	nop
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <setErrorFlag>:

void setErrorFlag(void)
{
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
	errorFlag = 1;
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <errorFlag>
}
     948:	00 00       	nop
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <setState>:

void setState(void)
{
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
	switch (curState)
     958:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <curState>
     95c:	88 2f       	mov	r24, r24
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	81 30       	cpi	r24, 0x01	; 1
     962:	91 05       	cpc	r25, r1
     964:	f9 f0       	breq	.+62     	; 0x9a4 <setState+0x54>
     966:	82 30       	cpi	r24, 0x02	; 2
     968:	91 05       	cpc	r25, r1
     96a:	1c f4       	brge	.+6      	; 0x972 <setState+0x22>
     96c:	89 2b       	or	r24, r25
     96e:	49 f0       	breq	.+18     	; 0x982 <setState+0x32>
			clearPoteinVal();
			break;
		}
		
		default:
			break;
     970:	0e c1       	rjmp	.+540    	; 0xb8e <setState+0x23e>
	errorFlag = 1;
}

void setState(void)
{
	switch (curState)
     972:	82 30       	cpi	r24, 0x02	; 2
     974:	91 05       	cpc	r25, r1
     976:	09 f4       	brne	.+2      	; 0x97a <setState+0x2a>
     978:	99 c0       	rjmp	.+306    	; 0xaac <setState+0x15c>
     97a:	03 97       	sbiw	r24, 0x03	; 3
     97c:	09 f4       	brne	.+2      	; 0x980 <setState+0x30>
     97e:	f3 c0       	rjmp	.+486    	; 0xb66 <setState+0x216>
			clearPoteinVal();
			break;
		}
		
		default:
			break;
     980:	06 c1       	rjmp	.+524    	; 0xb8e <setState+0x23e>
{
	switch (curState)
	{
		case STANDBY:
		{
			IDLE_Screen();
     982:	0e 94 d7 00 	call	0x1ae	; 0x1ae <IDLE_Screen>
			UsrGetVal();
     986:	0e 94 75 01 	call	0x2ea	; 0x2ea <UsrGetVal>
			clearVoltModule();
     98a:	0e 94 a5 03 	call	0x74a	; 0x74a <clearVoltModule>
			clearCheckTemp();
     98e:	0e 94 9b 03 	call	0x736	; 0x736 <clearCheckTemp>
			
			if (hash_pressed == 1)
     992:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <hash_pressed>
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	09 f0       	breq	.+2      	; 0x99c <setState+0x4c>
     99a:	f4 c0       	rjmp	.+488    	; 0xb84 <setState+0x234>
			{
				curState = OPERATION;
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <curState>
			}
			
			break;
     9a2:	f0 c0       	rjmp	.+480    	; 0xb84 <setState+0x234>
		}

		case OPERATION:
		{
			LCD_movecursor(2, 1);
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_movecursor>
			LCD_vSend_string("STATE:OPERATION");
     9ac:	82 e8       	ldi	r24, 0x82	; 130
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_vSend_string>
			setCheckTemp();
     9b4:	0e 94 5f 03 	call	0x6be	; 0x6be <setCheckTemp>
			setVoltModule();
     9b8:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <setVoltModule>
			setPoteinVal();
     9bc:	0e 94 80 03 	call	0x700	; 0x700 <setPoteinVal>
			CRT_Temp();
     9c0:	0e 94 61 02 	call	0x4c2	; 0x4c2 <CRT_Temp>

			currentTemp = getCurrentTemp();
     9c4:	0e 94 8e 02 	call	0x51c	; 0x51c <getCurrentTemp>
     9c8:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <currentTemp+0x1>
     9cc:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <currentTemp>
			setTemp = getSetTemp();
     9d0:	0e 94 99 02 	call	0x532	; 0x532 <getSetTemp>
     9d4:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <setTemp+0x1>
     9d8:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <setTemp>
			
			//if (setTemp <= currentTemp)
			//{
				///* Do nothing for now */
			//}
			if ((currentTemp > setTemp) && ((currentTemp - setTemp) <= 5))
     9dc:	20 91 d3 00 	lds	r18, 0x00D3	; 0x8000d3 <currentTemp>
     9e0:	30 91 d4 00 	lds	r19, 0x00D4	; 0x8000d4 <currentTemp+0x1>
     9e4:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <setTemp>
     9e8:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <setTemp+0x1>
     9ec:	82 17       	cp	r24, r18
     9ee:	93 07       	cpc	r25, r19
     9f0:	b0 f4       	brcc	.+44     	; 0xa1e <setState+0xce>
     9f2:	20 91 d3 00 	lds	r18, 0x00D3	; 0x8000d3 <currentTemp>
     9f6:	30 91 d4 00 	lds	r19, 0x00D4	; 0x8000d4 <currentTemp+0x1>
     9fa:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <setTemp>
     9fe:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <setTemp+0x1>
     a02:	a9 01       	movw	r20, r18
     a04:	48 1b       	sub	r20, r24
     a06:	59 0b       	sbc	r21, r25
     a08:	ca 01       	movw	r24, r20
     a0a:	06 97       	sbiw	r24, 0x06	; 6
     a0c:	40 f4       	brcc	.+16     	; 0xa1e <setState+0xce>
			{
				curState = NORMAL;
     a0e:	82 e0       	ldi	r24, 0x02	; 2
     a10:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <curState>
				clearCountMinutes();
     a14:	0e 94 8b 03 	call	0x716	; 0x716 <clearCountMinutes>
				clearOverHeating();
     a18:	0e 94 af 03 	call	0x75e	; 0x75e <clearOverHeating>
     a1c:	3e c0       	rjmp	.+124    	; 0xa9a <setState+0x14a>
			}
			else if ((currentTemp < setTemp) && ((setTemp - currentTemp) <= 5))
     a1e:	20 91 d3 00 	lds	r18, 0x00D3	; 0x8000d3 <currentTemp>
     a22:	30 91 d4 00 	lds	r19, 0x00D4	; 0x8000d4 <currentTemp+0x1>
     a26:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <setTemp>
     a2a:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <setTemp+0x1>
     a2e:	28 17       	cp	r18, r24
     a30:	39 07       	cpc	r19, r25
     a32:	b0 f4       	brcc	.+44     	; 0xa60 <setState+0x110>
     a34:	20 91 d5 00 	lds	r18, 0x00D5	; 0x8000d5 <setTemp>
     a38:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <setTemp+0x1>
     a3c:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <currentTemp>
     a40:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <currentTemp+0x1>
     a44:	a9 01       	movw	r20, r18
     a46:	48 1b       	sub	r20, r24
     a48:	59 0b       	sbc	r21, r25
     a4a:	ca 01       	movw	r24, r20
     a4c:	06 97       	sbiw	r24, 0x06	; 6
     a4e:	40 f4       	brcc	.+16     	; 0xa60 <setState+0x110>
			{
				curState = NORMAL;
     a50:	82 e0       	ldi	r24, 0x02	; 2
     a52:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <curState>
				clearCountMinutes();
     a56:	0e 94 8b 03 	call	0x716	; 0x716 <clearCountMinutes>
				clearOverHeating();
     a5a:	0e 94 af 03 	call	0x75e	; 0x75e <clearOverHeating>
     a5e:	1d c0       	rjmp	.+58     	; 0xa9a <setState+0x14a>
			}
			else if ((setTemp > currentTemp) && ((setTemp - currentTemp) > 5))
     a60:	20 91 d5 00 	lds	r18, 0x00D5	; 0x8000d5 <setTemp>
     a64:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <setTemp+0x1>
     a68:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <currentTemp>
     a6c:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <currentTemp+0x1>
     a70:	82 17       	cp	r24, r18
     a72:	93 07       	cpc	r25, r19
     a74:	90 f4       	brcc	.+36     	; 0xa9a <setState+0x14a>
     a76:	20 91 d5 00 	lds	r18, 0x00D5	; 0x8000d5 <setTemp>
     a7a:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <setTemp+0x1>
     a7e:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <currentTemp>
     a82:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <currentTemp+0x1>
     a86:	a9 01       	movw	r20, r18
     a88:	48 1b       	sub	r20, r24
     a8a:	59 0b       	sbc	r21, r25
     a8c:	ca 01       	movw	r24, r20
     a8e:	06 97       	sbiw	r24, 0x06	; 6
     a90:	20 f0       	brcs	.+8      	; 0xa9a <setState+0x14a>
			{
				setCountMinutes();
     a92:	0e 94 54 03 	call	0x6a8	; 0x6a8 <setCountMinutes>
				setOverHeating();
     a96:	0e 94 75 03 	call	0x6ea	; 0x6ea <setOverHeating>

			//if (hash_pressed == 1)
			//{
				//curState = STANDBY;
			//}
			if (errorFlag == 1)
     a9a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <errorFlag>
     a9e:	81 30       	cpi	r24, 0x01	; 1
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <setState+0x154>
     aa2:	72 c0       	rjmp	.+228    	; 0xb88 <setState+0x238>
			{
				curState = ERROR;
     aa4:	83 e0       	ldi	r24, 0x03	; 3
     aa6:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <curState>
			}
			break;
     aaa:	6e c0       	rjmp	.+220    	; 0xb88 <setState+0x238>
		}

		case NORMAL:
		{
			LCD_movecursor(2, 1);
     aac:	61 e0       	ldi	r22, 0x01	; 1
     aae:	82 e0       	ldi	r24, 0x02	; 2
     ab0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_movecursor>
			LCD_vSend_string("STATE:NORMAL");
     ab4:	82 e9       	ldi	r24, 0x92	; 146
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_vSend_string>
			setCheckTemp();
     abc:	0e 94 5f 03 	call	0x6be	; 0x6be <setCheckTemp>
			setPoteinVal();
     ac0:	0e 94 80 03 	call	0x700	; 0x700 <setPoteinVal>
			clearVoltModule();
     ac4:	0e 94 a5 03 	call	0x74a	; 0x74a <clearVoltModule>
			CRT_Temp();
     ac8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <CRT_Temp>
			
			currentTemp = getCurrentTemp();
     acc:	0e 94 8e 02 	call	0x51c	; 0x51c <getCurrentTemp>
     ad0:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <currentTemp+0x1>
     ad4:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <currentTemp>
			setTemp = getSetTemp();
     ad8:	0e 94 99 02 	call	0x532	; 0x532 <getSetTemp>
     adc:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <setTemp+0x1>
     ae0:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <setTemp>
			
			if ((setTemp > currentTemp) && (setTemp - currentTemp) > 5)
     ae4:	20 91 d5 00 	lds	r18, 0x00D5	; 0x8000d5 <setTemp>
     ae8:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <setTemp+0x1>
     aec:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <currentTemp>
     af0:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <currentTemp+0x1>
     af4:	82 17       	cp	r24, r18
     af6:	93 07       	cpc	r25, r19
     af8:	90 f4       	brcc	.+36     	; 0xb1e <setState+0x1ce>
     afa:	20 91 d5 00 	lds	r18, 0x00D5	; 0x8000d5 <setTemp>
     afe:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <setTemp+0x1>
     b02:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <currentTemp>
     b06:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <currentTemp+0x1>
     b0a:	a9 01       	movw	r20, r18
     b0c:	48 1b       	sub	r20, r24
     b0e:	59 0b       	sbc	r21, r25
     b10:	ca 01       	movw	r24, r20
     b12:	06 97       	sbiw	r24, 0x06	; 6
     b14:	20 f0       	brcs	.+8      	; 0xb1e <setState+0x1ce>
			{
				curState = OPERATION;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <curState>
     b1c:	1c c0       	rjmp	.+56     	; 0xb56 <setState+0x206>
			}
			else if ((currentTemp > setTemp) && ((currentTemp - setTemp) > 10))
     b1e:	20 91 d3 00 	lds	r18, 0x00D3	; 0x8000d3 <currentTemp>
     b22:	30 91 d4 00 	lds	r19, 0x00D4	; 0x8000d4 <currentTemp+0x1>
     b26:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <setTemp>
     b2a:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <setTemp+0x1>
     b2e:	82 17       	cp	r24, r18
     b30:	93 07       	cpc	r25, r19
     b32:	88 f4       	brcc	.+34     	; 0xb56 <setState+0x206>
     b34:	20 91 d3 00 	lds	r18, 0x00D3	; 0x8000d3 <currentTemp>
     b38:	30 91 d4 00 	lds	r19, 0x00D4	; 0x8000d4 <currentTemp+0x1>
     b3c:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <setTemp>
     b40:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <setTemp+0x1>
     b44:	a9 01       	movw	r20, r18
     b46:	48 1b       	sub	r20, r24
     b48:	59 0b       	sbc	r21, r25
     b4a:	ca 01       	movw	r24, r20
     b4c:	0b 97       	sbiw	r24, 0x0b	; 11
     b4e:	18 f0       	brcs	.+6      	; 0xb56 <setState+0x206>
			{
				curState = ERROR;
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <curState>
			else
			{
				/* Do nothing */
			}
			
			if (errorFlag)
     b56:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <errorFlag>
     b5a:	88 23       	and	r24, r24
     b5c:	b9 f0       	breq	.+46     	; 0xb8c <setState+0x23c>
			{
				curState = ERROR;
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <curState>
			}
			break;
     b64:	13 c0       	rjmp	.+38     	; 0xb8c <setState+0x23c>
		}

		case ERROR:
		{
			LCD_movecursor(2, 1);
     b66:	61 e0       	ldi	r22, 0x01	; 1
     b68:	82 e0       	ldi	r24, 0x02	; 2
     b6a:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_movecursor>
			LCD_vSend_string("STATE:ERROR");
     b6e:	8f e9       	ldi	r24, 0x9F	; 159
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_vSend_string>
			clearCheckTemp();
     b76:	0e 94 9b 03 	call	0x736	; 0x736 <clearCheckTemp>
			clearVoltModule();
     b7a:	0e 94 a5 03 	call	0x74a	; 0x74a <clearVoltModule>
			clearPoteinVal();
     b7e:	0e 94 b9 03 	call	0x772	; 0x772 <clearPoteinVal>
			break;
     b82:	05 c0       	rjmp	.+10     	; 0xb8e <setState+0x23e>
			if (hash_pressed == 1)
			{
				curState = OPERATION;
			}
			
			break;
     b84:	00 00       	nop
     b86:	03 c0       	rjmp	.+6      	; 0xb8e <setState+0x23e>
			//}
			if (errorFlag == 1)
			{
				curState = ERROR;
			}
			break;
     b88:	00 00       	nop
     b8a:	01 c0       	rjmp	.+2      	; 0xb8e <setState+0x23e>
			
			if (errorFlag)
			{
				curState = ERROR;
			}
			break;
     b8c:	00 00       	nop
		}
		
		default:
			break;
	}
     b8e:	00 00       	nop
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret

00000b96 <InitPWM>:
#include "pwm.h"

void InitPWM(void)
{
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS00);
     b9e:	83 e5       	ldi	r24, 0x53	; 83
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	23 e5       	ldi	r18, 0x53	; 83
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	f9 01       	movw	r30, r18
     ba8:	20 81       	ld	r18, Z
     baa:	29 66       	ori	r18, 0x69	; 105
     bac:	fc 01       	movw	r30, r24
     bae:	20 83       	st	Z, r18
	PWM_DDR |= (1 << PWM_PIN);
     bb0:	87 e3       	ldi	r24, 0x37	; 55
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	27 e3       	ldi	r18, 0x37	; 55
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	f9 01       	movw	r30, r18
     bba:	20 81       	ld	r18, Z
     bbc:	28 60       	ori	r18, 0x08	; 8
     bbe:	fc 01       	movw	r30, r24
     bc0:	20 83       	st	Z, r18
	OCR1A = 3000;
     bc2:	8a e4       	ldi	r24, 0x4A	; 74
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	28 eb       	ldi	r18, 0xB8	; 184
     bc8:	3b e0       	ldi	r19, 0x0B	; 11
     bca:	fc 01       	movw	r30, r24
     bcc:	31 83       	std	Z+1, r19	; 0x01
     bce:	20 83       	st	Z, r18
	//TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS00);
	//PWM_DDR |= (1 << PWM_PIN);  /*set OC0 pin as output*/
	//OCR1A = 3000;
}
     bd0:	00 00       	nop
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <SetPWMOutput>:

void SetPWMOutput(float64_t vr, float64_t vt)
{
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	2c 97       	sbiw	r28, 0x0c	; 12
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	6d 83       	std	Y+5, r22	; 0x05
     bf2:	7e 83       	std	Y+6, r23	; 0x06
     bf4:	8f 83       	std	Y+7, r24	; 0x07
     bf6:	98 87       	std	Y+8, r25	; 0x08
     bf8:	29 87       	std	Y+9, r18	; 0x09
     bfa:	3a 87       	std	Y+10, r19	; 0x0a
     bfc:	4b 87       	std	Y+11, r20	; 0x0b
     bfe:	5c 87       	std	Y+12, r21	; 0x0c
	float64_t duty = 0;
     c00:	19 82       	std	Y+1, r1	; 0x01
     c02:	1a 82       	std	Y+2, r1	; 0x02
     c04:	1b 82       	std	Y+3, r1	; 0x03
     c06:	1c 82       	std	Y+4, r1	; 0x04
	duty = (((vr * 2) / 10) * vt) / 10;
     c08:	8d 81       	ldd	r24, Y+5	; 0x05
     c0a:	9e 81       	ldd	r25, Y+6	; 0x06
     c0c:	af 81       	ldd	r26, Y+7	; 0x07
     c0e:	b8 85       	ldd	r27, Y+8	; 0x08
     c10:	9c 01       	movw	r18, r24
     c12:	ad 01       	movw	r20, r26
     c14:	bc 01       	movw	r22, r24
     c16:	cd 01       	movw	r24, r26
     c18:	0e 94 c0 12 	call	0x2580	; 0x2580 <__addsf3>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	40 e2       	ldi	r20, 0x20	; 32
     c26:	51 e4       	ldi	r21, 0x41	; 65
     c28:	bc 01       	movw	r22, r24
     c2a:	cd 01       	movw	r24, r26
     c2c:	0e 94 31 13 	call	0x2662	; 0x2662 <__divsf3>
     c30:	dc 01       	movw	r26, r24
     c32:	cb 01       	movw	r24, r22
     c34:	29 85       	ldd	r18, Y+9	; 0x09
     c36:	3a 85       	ldd	r19, Y+10	; 0x0a
     c38:	4b 85       	ldd	r20, Y+11	; 0x0b
     c3a:	5c 85       	ldd	r21, Y+12	; 0x0c
     c3c:	bc 01       	movw	r22, r24
     c3e:	cd 01       	movw	r24, r26
     c40:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e2       	ldi	r20, 0x20	; 32
     c4e:	51 e4       	ldi	r21, 0x41	; 65
     c50:	bc 01       	movw	r22, r24
     c52:	cd 01       	movw	r24, r26
     c54:	0e 94 31 13 	call	0x2662	; 0x2662 <__divsf3>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	9a 83       	std	Y+2, r25	; 0x02
     c60:	ab 83       	std	Y+3, r26	; 0x03
     c62:	bc 83       	std	Y+4, r27	; 0x04
	OCR0 = duty;
     c64:	0c e5       	ldi	r16, 0x5C	; 92
     c66:	10 e0       	ldi	r17, 0x00	; 0
     c68:	69 81       	ldd	r22, Y+1	; 0x01
     c6a:	7a 81       	ldd	r23, Y+2	; 0x02
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	9c 81       	ldd	r25, Y+4	; 0x04
     c70:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	f8 01       	movw	r30, r16
     c7a:	80 83       	st	Z, r24
}
     c7c:	00 00       	nop
     c7e:	2c 96       	adiw	r28, 0x0c	; 12
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	de bf       	out	0x3e, r29	; 62
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	08 95       	ret

00000c94 <init_timer_CTC>:
	/*
	Watchdog timer enables with typical timeout period 2.1 
	second.
	*/
	WDTCR = (1<<WDE)|(1<<WDP2)|(1<<WDP1)|(1<<WDP0);
}
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	00 d0       	rcall	.+0      	; 0xc9a <init_timer_CTC+0x6>
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <init_timer_CTC+0x8>
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	8b 83       	std	Y+3, r24	; 0x03
     ca2:	6c 83       	std	Y+4, r22	; 0x04
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	82 30       	cpi	r24, 0x02	; 2
     ca8:	18 f0       	brcs	.+6      	; 0xcb0 <init_timer_CTC+0x1c>
     caa:	0e 94 9d 04 	call	0x93a	; 0x93a <setErrorFlag>
     cae:	5f c0       	rjmp	.+190    	; 0xd6e <init_timer_CTC+0xda>
     cb0:	8c 81       	ldd	r24, Y+4	; 0x04
     cb2:	88 2f       	mov	r24, r24
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	09 2e       	mov	r0, r25
     cb8:	00 0c       	add	r0, r0
     cba:	aa 0b       	sbc	r26, r26
     cbc:	bb 0b       	sbc	r27, r27
     cbe:	bc 01       	movw	r22, r24
     cc0:	cd 01       	movw	r24, r26
     cc2:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <__floatsisf>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	24 e2       	ldi	r18, 0x24	; 36
     ccc:	3b ed       	ldi	r19, 0xDB	; 219
     cce:	49 e7       	ldi	r20, 0x79	; 121
     cd0:	5f e3       	ldi	r21, 0x3F	; 63
     cd2:	bc 01       	movw	r22, r24
     cd4:	cd 01       	movw	r24, r26
     cd6:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
     cda:	dc 01       	movw	r26, r24
     cdc:	cb 01       	movw	r24, r22
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e8       	ldi	r20, 0x80	; 128
     ce4:	5f e3       	ldi	r21, 0x3F	; 63
     ce6:	bc 01       	movw	r22, r24
     ce8:	cd 01       	movw	r24, r26
     cea:	0e 94 bf 12 	call	0x257e	; 0x257e <__subsf3>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	bc 01       	movw	r22, r24
     cf4:	cd 01       	movw	r24, r26
     cf6:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	9a 83       	std	Y+2, r25	; 0x02
     d00:	89 83       	std	Y+1, r24	; 0x01
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	9a 81       	ldd	r25, Y+2	; 0x02
     d06:	8f 3f       	cpi	r24, 0xFF	; 255
     d08:	91 05       	cpc	r25, r1
     d0a:	21 f0       	breq	.+8      	; 0xd14 <init_timer_CTC+0x80>
     d0c:	18 f0       	brcs	.+6      	; 0xd14 <init_timer_CTC+0x80>
     d0e:	0e 94 9d 04 	call	0x93a	; 0x93a <setErrorFlag>
     d12:	2d c0       	rjmp	.+90     	; 0xd6e <init_timer_CTC+0xda>
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	88 23       	and	r24, r24
     d18:	a1 f4       	brne	.+40     	; 0xd42 <init_timer_CTC+0xae>
     d1a:	8c e5       	ldi	r24, 0x5C	; 92
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	29 81       	ldd	r18, Y+1	; 0x01
     d20:	fc 01       	movw	r30, r24
     d22:	20 83       	st	Z, r18
     d24:	83 e5       	ldi	r24, 0x53	; 83
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	2d e0       	ldi	r18, 0x0D	; 13
     d2a:	fc 01       	movw	r30, r24
     d2c:	20 83       	st	Z, r18
     d2e:	89 e5       	ldi	r24, 0x59	; 89
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	29 e5       	ldi	r18, 0x59	; 89
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	f9 01       	movw	r30, r18
     d38:	20 81       	ld	r18, Z
     d3a:	22 60       	ori	r18, 0x02	; 2
     d3c:	fc 01       	movw	r30, r24
     d3e:	20 83       	st	Z, r18
     d40:	16 c0       	rjmp	.+44     	; 0xd6e <init_timer_CTC+0xda>
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	81 30       	cpi	r24, 0x01	; 1
     d46:	99 f4       	brne	.+38     	; 0xd6e <init_timer_CTC+0xda>
     d48:	83 e4       	ldi	r24, 0x43	; 67
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	29 81       	ldd	r18, Y+1	; 0x01
     d4e:	fc 01       	movw	r30, r24
     d50:	20 83       	st	Z, r18
     d52:	85 e4       	ldi	r24, 0x45	; 69
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	2d e0       	ldi	r18, 0x0D	; 13
     d58:	fc 01       	movw	r30, r24
     d5a:	20 83       	st	Z, r18
     d5c:	89 e5       	ldi	r24, 0x59	; 89
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	29 e5       	ldi	r18, 0x59	; 89
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	f9 01       	movw	r30, r18
     d66:	20 81       	ld	r18, Z
     d68:	20 68       	ori	r18, 0x80	; 128
     d6a:	fc 01       	movw	r30, r24
     d6c:	20 83       	st	Z, r18
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <WDT_OFF>:

void WDT_OFF(void)
{
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
	/*
	This function use for disable the watchdog timer.
	*/
	WDTCR = (1<<WDTOE)|(1<<WDE);
     d84:	81 e4       	ldi	r24, 0x41	; 65
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	28 e1       	ldi	r18, 0x18	; 24
     d8a:	fc 01       	movw	r30, r24
     d8c:	20 83       	st	Z, r18
	WDTCR = 0x00;
     d8e:	81 e4       	ldi	r24, 0x41	; 65
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	fc 01       	movw	r30, r24
     d94:	10 82       	st	Z, r1
}
     d96:	00 00       	nop
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	08 95       	ret

00000d9e <keypad_vInit>:
	{'7', '8', '9'},
	{'*', '0', '#'}
};

void keypad_vInit(void)
{
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
	DIO_set_port_direction(KEYPAD_PORT, 0x0f);
     da6:	6f e0       	ldi	r22, 0x0F	; 15
     da8:	83 e4       	ldi	r24, 0x43	; 67
     daa:	0e 94 c0 10 	call	0x2180	; 0x2180 <DIO_set_port_direction>
	CLR_BIT(SFIOR, PUD);
     dae:	80 e5       	ldi	r24, 0x50	; 80
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	20 e5       	ldi	r18, 0x50	; 80
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	f9 01       	movw	r30, r18
     db8:	20 81       	ld	r18, Z
     dba:	2b 7f       	andi	r18, 0xFB	; 251
     dbc:	fc 01       	movw	r30, r24
     dbe:	20 83       	st	Z, r18
	DIO_write_port(KEYPAD_PORT, 0xff);
     dc0:	6f ef       	ldi	r22, 0xFF	; 255
     dc2:	83 e4       	ldi	r24, 0x43	; 67
     dc4:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <DIO_write_port>
}
     dc8:	00 00       	nop
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	08 95       	ret

00000dd0 <Keypad_u8Scan>:

u8 Keypad_u8Scan(void)
{
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <Keypad_u8Scan+0x6>
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <Keypad_u8Scan+0x8>
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
	u8 row = 0;
     ddc:	19 82       	std	Y+1, r1	; 0x01
	u8 column = 0;
     dde:	1a 82       	std	Y+2, r1	; 0x02
	u8 scan = 0;
     de0:	1c 82       	std	Y+4, r1	; 0x04
	u8 buttonPressed = 0;
     de2:	1b 82       	std	Y+3, r1	; 0x03

	for(row = 0; row < N_Row; ++row)
     de4:	19 82       	std	Y+1, r1	; 0x01
     de6:	5d c0       	rjmp	.+186    	; 0xea2 <Keypad_u8Scan+0xd2>
	{
		KEYPAD_PORTC |= 0x0f;
     de8:	85 e3       	ldi	r24, 0x35	; 53
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	25 e3       	ldi	r18, 0x35	; 53
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	f9 01       	movw	r30, r18
     df2:	20 81       	ld	r18, Z
     df4:	2f 60       	ori	r18, 0x0F	; 15
     df6:	fc 01       	movw	r30, r24
     df8:	20 83       	st	Z, r18
		CLR_BIT(KEYPAD_PORTC, row);
     dfa:	85 e3       	ldi	r24, 0x35	; 53
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	25 e3       	ldi	r18, 0x35	; 53
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	f9 01       	movw	r30, r18
     e04:	20 81       	ld	r18, Z
     e06:	62 2f       	mov	r22, r18
     e08:	29 81       	ldd	r18, Y+1	; 0x01
     e0a:	42 2f       	mov	r20, r18
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	21 e0       	ldi	r18, 0x01	; 1
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <Keypad_u8Scan+0x48>
     e14:	22 0f       	add	r18, r18
     e16:	33 1f       	adc	r19, r19
     e18:	4a 95       	dec	r20
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <Keypad_u8Scan+0x44>
     e1c:	20 95       	com	r18
     e1e:	26 23       	and	r18, r22
     e20:	fc 01       	movw	r30, r24
     e22:	20 83       	st	Z, r18
		
		for(column = 4; column < (N_Row + N_Col); ++column)
     e24:	84 e0       	ldi	r24, 0x04	; 4
     e26:	8a 83       	std	Y+2, r24	; 0x02
     e28:	36 c0       	rjmp	.+108    	; 0xe96 <Keypad_u8Scan+0xc6>
		{
			scan = READ_BIT(KEYPAD_PINs, column);
     e2a:	83 e3       	ldi	r24, 0x33	; 51
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	fc 01       	movw	r30, r24
     e30:	80 81       	ld	r24, Z
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	48 2f       	mov	r20, r24
     e3a:	50 e0       	ldi	r21, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <Keypad_u8Scan+0x76>
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	4a 95       	dec	r20
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <Keypad_u8Scan+0x72>
     e4a:	82 23       	and	r24, r18
     e4c:	93 23       	and	r25, r19
     e4e:	2a 81       	ldd	r18, Y+2	; 0x02
     e50:	22 2f       	mov	r18, r18
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <Keypad_u8Scan+0x8a>
     e56:	95 95       	asr	r25
     e58:	87 95       	ror	r24
     e5a:	2a 95       	dec	r18
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <Keypad_u8Scan+0x86>
     e5e:	8c 83       	std	Y+4, r24	; 0x04
			if(scan == 0)
     e60:	8c 81       	ldd	r24, Y+4	; 0x04
     e62:	88 23       	and	r24, r24
     e64:	a9 f4       	brne	.+42     	; 0xe90 <Keypad_u8Scan+0xc0>
			{
				buttonPressed = kp[row][column - 4];
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	88 2f       	mov	r24, r24
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	ac 01       	movw	r20, r24
     e74:	44 50       	subi	r20, 0x04	; 4
     e76:	51 09       	sbc	r21, r1
     e78:	c9 01       	movw	r24, r18
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	82 0f       	add	r24, r18
     e80:	93 1f       	adc	r25, r19
     e82:	84 0f       	add	r24, r20
     e84:	95 1f       	adc	r25, r21
     e86:	84 55       	subi	r24, 0x54	; 84
     e88:	9f 4f       	sbci	r25, 0xFF	; 255
     e8a:	fc 01       	movw	r30, r24
     e8c:	80 81       	ld	r24, Z
     e8e:	8b 83       	std	Y+3, r24	; 0x03
	for(row = 0; row < N_Row; ++row)
	{
		KEYPAD_PORTC |= 0x0f;
		CLR_BIT(KEYPAD_PORTC, row);
		
		for(column = 4; column < (N_Row + N_Col); ++column)
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	8f 5f       	subi	r24, 0xFF	; 255
     e94:	8a 83       	std	Y+2, r24	; 0x02
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	87 30       	cpi	r24, 0x07	; 7
     e9a:	38 f2       	brcs	.-114    	; 0xe2a <Keypad_u8Scan+0x5a>
	u8 row = 0;
	u8 column = 0;
	u8 scan = 0;
	u8 buttonPressed = 0;

	for(row = 0; row < N_Row; ++row)
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	8f 5f       	subi	r24, 0xFF	; 255
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	84 30       	cpi	r24, 0x04	; 4
     ea6:	08 f4       	brcc	.+2      	; 0xeaa <Keypad_u8Scan+0xda>
     ea8:	9f cf       	rjmp	.-194    	; 0xde8 <Keypad_u8Scan+0x18>
				buttonPressed = kp[row][column - 4];
			}
		}
	}
	
	return buttonPressed;
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <getKey>:

u8 getKey(void)
{
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	2f 97       	sbiw	r28, 0x0f	; 15
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
	u8 key = 0;
     ece:	19 82       	std	Y+1, r1	; 0x01

	/* Wait for key release if pressed on entry */
	while (Keypad_u8Scan() != 0)
     ed0:	72 c0       	rjmp	.+228    	; 0xfb6 <getKey+0xfc>
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	a0 e2       	ldi	r26, 0x20	; 32
     ed8:	b1 e4       	ldi	r27, 0x41	; 65
     eda:	8a 83       	std	Y+2, r24	; 0x02
     edc:	9b 83       	std	Y+3, r25	; 0x03
     ede:	ac 83       	std	Y+4, r26	; 0x04
     ee0:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	4a e7       	ldi	r20, 0x7A	; 122
     ee8:	53 e4       	ldi	r21, 0x43	; 67
     eea:	6a 81       	ldd	r22, Y+2	; 0x02
     eec:	7b 81       	ldd	r23, Y+3	; 0x03
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	9d 81       	ldd	r25, Y+5	; 0x05
     ef2:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	8e 83       	std	Y+6, r24	; 0x06
     efc:	9f 83       	std	Y+7, r25	; 0x07
     efe:	a8 87       	std	Y+8, r26	; 0x08
     f00:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	40 e8       	ldi	r20, 0x80	; 128
     f08:	5f e3       	ldi	r21, 0x3F	; 63
     f0a:	6e 81       	ldd	r22, Y+6	; 0x06
     f0c:	7f 81       	ldd	r23, Y+7	; 0x07
     f0e:	88 85       	ldd	r24, Y+8	; 0x08
     f10:	99 85       	ldd	r25, Y+9	; 0x09
     f12:	0e 94 2c 13 	call	0x2658	; 0x2658 <__cmpsf2>
     f16:	88 23       	and	r24, r24
     f18:	2c f4       	brge	.+10     	; 0xf24 <getKey+0x6a>
		__ticks = 1;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	9b 87       	std	Y+11, r25	; 0x0b
     f20:	8a 87       	std	Y+10, r24	; 0x0a
     f22:	3f c0       	rjmp	.+126    	; 0xfa2 <getKey+0xe8>
	else if (__tmp > 65535)
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	3f ef       	ldi	r19, 0xFF	; 255
     f28:	4f e7       	ldi	r20, 0x7F	; 127
     f2a:	57 e4       	ldi	r21, 0x47	; 71
     f2c:	6e 81       	ldd	r22, Y+6	; 0x06
     f2e:	7f 81       	ldd	r23, Y+7	; 0x07
     f30:	88 85       	ldd	r24, Y+8	; 0x08
     f32:	99 85       	ldd	r25, Y+9	; 0x09
     f34:	0e 94 84 14 	call	0x2908	; 0x2908 <__gesf2>
     f38:	18 16       	cp	r1, r24
     f3a:	4c f5       	brge	.+82     	; 0xf8e <getKey+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 e2       	ldi	r20, 0x20	; 32
     f42:	51 e4       	ldi	r21, 0x41	; 65
     f44:	6a 81       	ldd	r22, Y+2	; 0x02
     f46:	7b 81       	ldd	r23, Y+3	; 0x03
     f48:	8c 81       	ldd	r24, Y+4	; 0x04
     f4a:	9d 81       	ldd	r25, Y+5	; 0x05
     f4c:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	bc 01       	movw	r22, r24
     f56:	cd 01       	movw	r24, r26
     f58:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	9b 87       	std	Y+11, r25	; 0x0b
     f62:	8a 87       	std	Y+10, r24	; 0x0a
     f64:	0f c0       	rjmp	.+30     	; 0xf84 <getKey+0xca>
     f66:	89 e1       	ldi	r24, 0x19	; 25
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	9d 87       	std	Y+13, r25	; 0x0d
     f6c:	8c 87       	std	Y+12, r24	; 0x0c
     f6e:	8c 85       	ldd	r24, Y+12	; 0x0c
     f70:	9d 85       	ldd	r25, Y+13	; 0x0d
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <getKey+0xb8>
     f76:	9d 87       	std	Y+13, r25	; 0x0d
     f78:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f7c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	9b 87       	std	Y+11, r25	; 0x0b
     f82:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f84:	8a 85       	ldd	r24, Y+10	; 0x0a
     f86:	9b 85       	ldd	r25, Y+11	; 0x0b
     f88:	89 2b       	or	r24, r25
     f8a:	69 f7       	brne	.-38     	; 0xf66 <getKey+0xac>
     f8c:	14 c0       	rjmp	.+40     	; 0xfb6 <getKey+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8e:	6e 81       	ldd	r22, Y+6	; 0x06
     f90:	7f 81       	ldd	r23, Y+7	; 0x07
     f92:	88 85       	ldd	r24, Y+8	; 0x08
     f94:	99 85       	ldd	r25, Y+9	; 0x09
     f96:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	9b 87       	std	Y+11, r25	; 0x0b
     fa0:	8a 87       	std	Y+10, r24	; 0x0a
     fa2:	8a 85       	ldd	r24, Y+10	; 0x0a
     fa4:	9b 85       	ldd	r25, Y+11	; 0x0b
     fa6:	9f 87       	std	Y+15, r25	; 0x0f
     fa8:	8e 87       	std	Y+14, r24	; 0x0e
     faa:	8e 85       	ldd	r24, Y+14	; 0x0e
     fac:	9f 85       	ldd	r25, Y+15	; 0x0f
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <getKey+0xf4>
     fb2:	9f 87       	std	Y+15, r25	; 0x0f
     fb4:	8e 87       	std	Y+14, r24	; 0x0e
     fb6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <Keypad_u8Scan>
     fba:	88 23       	and	r24, r24
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <getKey+0x106>
     fbe:	89 cf       	rjmp	.-238    	; 0xed2 <getKey+0x18>
	}

	/* Wait for new key press */
	do
	{
		key = Keypad_u8Scan();
     fc0:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <Keypad_u8Scan>
     fc4:	89 83       	std	Y+1, r24	; 0x01

	} while(key == 0);
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	88 23       	and	r24, r24
     fca:	d1 f3       	breq	.-12     	; 0xfc0 <getKey+0x106>

	return key;
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	2f 96       	adiw	r28, 0x0f	; 15
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	08 95       	ret

00000fe0 <LCD_vInit>:

void LCD_clearscreen(void)
{
	LCD_vSend_cmd(CLR_SCREEN);
	_delay_ms(10);
}
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	c4 55       	subi	r28, 0x54	; 84
     fee:	d1 09       	sbc	r29, r1
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	a0 ea       	ldi	r26, 0xA0	; 160
    1000:	b1 e4       	ldi	r27, 0x41	; 65
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	9a 83       	std	Y+2, r25	; 0x02
    1006:	ab 83       	std	Y+3, r26	; 0x03
    1008:	bc 83       	std	Y+4, r27	; 0x04
    100a:	8e 01       	movw	r16, r28
    100c:	05 5b       	subi	r16, 0xB5	; 181
    100e:	1f 4f       	sbci	r17, 0xFF	; 255
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	4a e7       	ldi	r20, 0x7A	; 122
    1016:	53 e4       	ldi	r21, 0x43	; 67
    1018:	69 81       	ldd	r22, Y+1	; 0x01
    101a:	7a 81       	ldd	r23, Y+2	; 0x02
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	f8 01       	movw	r30, r16
    102a:	80 83       	st	Z, r24
    102c:	91 83       	std	Z+1, r25	; 0x01
    102e:	a2 83       	std	Z+2, r26	; 0x02
    1030:	b3 83       	std	Z+3, r27	; 0x03
    1032:	ce 01       	movw	r24, r28
    1034:	85 5b       	subi	r24, 0xB5	; 181
    1036:	9f 4f       	sbci	r25, 0xFF	; 255
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e8       	ldi	r20, 0x80	; 128
    103e:	5f e3       	ldi	r21, 0x3F	; 63
    1040:	fc 01       	movw	r30, r24
    1042:	60 81       	ld	r22, Z
    1044:	71 81       	ldd	r23, Z+1	; 0x01
    1046:	82 81       	ldd	r24, Z+2	; 0x02
    1048:	93 81       	ldd	r25, Z+3	; 0x03
    104a:	0e 94 2c 13 	call	0x2658	; 0x2658 <__cmpsf2>
    104e:	88 23       	and	r24, r24
    1050:	4c f4       	brge	.+18     	; 0x1064 <LCD_vInit+0x84>
    1052:	ce 01       	movw	r24, r28
    1054:	81 5b       	subi	r24, 0xB1	; 177
    1056:	9f 4f       	sbci	r25, 0xFF	; 255
    1058:	21 e0       	ldi	r18, 0x01	; 1
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	fc 01       	movw	r30, r24
    105e:	31 83       	std	Z+1, r19	; 0x01
    1060:	20 83       	st	Z, r18
    1062:	69 c0       	rjmp	.+210    	; 0x1136 <LCD_vInit+0x156>
    1064:	ce 01       	movw	r24, r28
    1066:	85 5b       	subi	r24, 0xB5	; 181
    1068:	9f 4f       	sbci	r25, 0xFF	; 255
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	3f ef       	ldi	r19, 0xFF	; 255
    106e:	4f e7       	ldi	r20, 0x7F	; 127
    1070:	57 e4       	ldi	r21, 0x47	; 71
    1072:	fc 01       	movw	r30, r24
    1074:	60 81       	ld	r22, Z
    1076:	71 81       	ldd	r23, Z+1	; 0x01
    1078:	82 81       	ldd	r24, Z+2	; 0x02
    107a:	93 81       	ldd	r25, Z+3	; 0x03
    107c:	0e 94 84 14 	call	0x2908	; 0x2908 <__gesf2>
    1080:	18 16       	cp	r1, r24
    1082:	0c f0       	brlt	.+2      	; 0x1086 <LCD_vInit+0xa6>
    1084:	46 c0       	rjmp	.+140    	; 0x1112 <LCD_vInit+0x132>
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e2       	ldi	r20, 0x20	; 32
    108c:	51 e4       	ldi	r21, 0x41	; 65
    108e:	69 81       	ldd	r22, Y+1	; 0x01
    1090:	7a 81       	ldd	r23, Y+2	; 0x02
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	9c 81       	ldd	r25, Y+4	; 0x04
    1096:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	8e 01       	movw	r16, r28
    10a0:	01 5b       	subi	r16, 0xB1	; 177
    10a2:	1f 4f       	sbci	r17, 0xFF	; 255
    10a4:	bc 01       	movw	r22, r24
    10a6:	cd 01       	movw	r24, r26
    10a8:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	f8 01       	movw	r30, r16
    10b2:	91 83       	std	Z+1, r25	; 0x01
    10b4:	80 83       	st	Z, r24
    10b6:	24 c0       	rjmp	.+72     	; 0x1100 <LCD_vInit+0x120>
    10b8:	ce 01       	movw	r24, r28
    10ba:	8f 5a       	subi	r24, 0xAF	; 175
    10bc:	9f 4f       	sbci	r25, 0xFF	; 255
    10be:	29 e1       	ldi	r18, 0x19	; 25
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	fc 01       	movw	r30, r24
    10c4:	31 83       	std	Z+1, r19	; 0x01
    10c6:	20 83       	st	Z, r18
    10c8:	ce 01       	movw	r24, r28
    10ca:	8f 5a       	subi	r24, 0xAF	; 175
    10cc:	9f 4f       	sbci	r25, 0xFF	; 255
    10ce:	fc 01       	movw	r30, r24
    10d0:	80 81       	ld	r24, Z
    10d2:	91 81       	ldd	r25, Z+1	; 0x01
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <LCD_vInit+0xf4>
    10d8:	9e 01       	movw	r18, r28
    10da:	2f 5a       	subi	r18, 0xAF	; 175
    10dc:	3f 4f       	sbci	r19, 0xFF	; 255
    10de:	f9 01       	movw	r30, r18
    10e0:	91 83       	std	Z+1, r25	; 0x01
    10e2:	80 83       	st	Z, r24
    10e4:	ce 01       	movw	r24, r28
    10e6:	81 5b       	subi	r24, 0xB1	; 177
    10e8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ea:	9e 01       	movw	r18, r28
    10ec:	21 5b       	subi	r18, 0xB1	; 177
    10ee:	3f 4f       	sbci	r19, 0xFF	; 255
    10f0:	f9 01       	movw	r30, r18
    10f2:	20 81       	ld	r18, Z
    10f4:	31 81       	ldd	r19, Z+1	; 0x01
    10f6:	21 50       	subi	r18, 0x01	; 1
    10f8:	31 09       	sbc	r19, r1
    10fa:	fc 01       	movw	r30, r24
    10fc:	31 83       	std	Z+1, r19	; 0x01
    10fe:	20 83       	st	Z, r18
    1100:	ce 01       	movw	r24, r28
    1102:	81 5b       	subi	r24, 0xB1	; 177
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	fc 01       	movw	r30, r24
    1108:	80 81       	ld	r24, Z
    110a:	91 81       	ldd	r25, Z+1	; 0x01
    110c:	89 2b       	or	r24, r25
    110e:	a1 f6       	brne	.-88     	; 0x10b8 <LCD_vInit+0xd8>
    1110:	2c c0       	rjmp	.+88     	; 0x116a <LCD_vInit+0x18a>
    1112:	8e 01       	movw	r16, r28
    1114:	01 5b       	subi	r16, 0xB1	; 177
    1116:	1f 4f       	sbci	r17, 0xFF	; 255
    1118:	ce 01       	movw	r24, r28
    111a:	85 5b       	subi	r24, 0xB5	; 181
    111c:	9f 4f       	sbci	r25, 0xFF	; 255
    111e:	fc 01       	movw	r30, r24
    1120:	60 81       	ld	r22, Z
    1122:	71 81       	ldd	r23, Z+1	; 0x01
    1124:	82 81       	ldd	r24, Z+2	; 0x02
    1126:	93 81       	ldd	r25, Z+3	; 0x03
    1128:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	f8 01       	movw	r30, r16
    1132:	91 83       	std	Z+1, r25	; 0x01
    1134:	80 83       	st	Z, r24
    1136:	ce 01       	movw	r24, r28
    1138:	8d 5a       	subi	r24, 0xAD	; 173
    113a:	9f 4f       	sbci	r25, 0xFF	; 255
    113c:	9e 01       	movw	r18, r28
    113e:	21 5b       	subi	r18, 0xB1	; 177
    1140:	3f 4f       	sbci	r19, 0xFF	; 255
    1142:	f9 01       	movw	r30, r18
    1144:	20 81       	ld	r18, Z
    1146:	31 81       	ldd	r19, Z+1	; 0x01
    1148:	fc 01       	movw	r30, r24
    114a:	31 83       	std	Z+1, r19	; 0x01
    114c:	20 83       	st	Z, r18
    114e:	ce 01       	movw	r24, r28
    1150:	8d 5a       	subi	r24, 0xAD	; 173
    1152:	9f 4f       	sbci	r25, 0xFF	; 255
    1154:	fc 01       	movw	r30, r24
    1156:	80 81       	ld	r24, Z
    1158:	91 81       	ldd	r25, Z+1	; 0x01
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	f1 f7       	brne	.-4      	; 0x115a <LCD_vInit+0x17a>
    115e:	9e 01       	movw	r18, r28
    1160:	2d 5a       	subi	r18, 0xAD	; 173
    1162:	3f 4f       	sbci	r19, 0xFF	; 255
    1164:	f9 01       	movw	r30, r18
    1166:	91 83       	std	Z+1, r25	; 0x01
    1168:	80 83       	st	Z, r24
    116a:	41 e0       	ldi	r20, 0x01	; 1
    116c:	64 e0       	ldi	r22, 0x04	; 4
    116e:	84 e4       	ldi	r24, 0x44	; 68
    1170:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <DIO_vsetPINDir>
    1174:	41 e0       	ldi	r20, 0x01	; 1
    1176:	65 e0       	ldi	r22, 0x05	; 5
    1178:	84 e4       	ldi	r24, 0x44	; 68
    117a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <DIO_vsetPINDir>
    117e:	41 e0       	ldi	r20, 0x01	; 1
    1180:	66 e0       	ldi	r22, 0x06	; 6
    1182:	84 e4       	ldi	r24, 0x44	; 68
    1184:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <DIO_vsetPINDir>
    1188:	41 e0       	ldi	r20, 0x01	; 1
    118a:	67 e0       	ldi	r22, 0x07	; 7
    118c:	84 e4       	ldi	r24, 0x44	; 68
    118e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <DIO_vsetPINDir>
    1192:	41 e0       	ldi	r20, 0x01	; 1
    1194:	63 e0       	ldi	r22, 0x03	; 3
    1196:	81 e4       	ldi	r24, 0x41	; 65
    1198:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <DIO_vsetPINDir>
    119c:	41 e0       	ldi	r20, 0x01	; 1
    119e:	62 e0       	ldi	r22, 0x02	; 2
    11a0:	81 e4       	ldi	r24, 0x41	; 65
    11a2:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <DIO_vsetPINDir>
    11a6:	41 e0       	ldi	r20, 0x01	; 1
    11a8:	61 e0       	ldi	r22, 0x01	; 1
    11aa:	81 e4       	ldi	r24, 0x41	; 65
    11ac:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <DIO_vsetPINDir>
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	62 e0       	ldi	r22, 0x02	; 2
    11b4:	81 e4       	ldi	r24, 0x41	; 65
    11b6:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <DIO_write>
    11ba:	82 e0       	ldi	r24, 0x02	; 2
    11bc:	0e 94 85 0c 	call	0x190a	; 0x190a <LCD_vSend_cmd>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	a0 e2       	ldi	r26, 0x20	; 32
    11c6:	b1 e4       	ldi	r27, 0x41	; 65
    11c8:	8d 83       	std	Y+5, r24	; 0x05
    11ca:	9e 83       	std	Y+6, r25	; 0x06
    11cc:	af 83       	std	Y+7, r26	; 0x07
    11ce:	b8 87       	std	Y+8, r27	; 0x08
    11d0:	8e 01       	movw	r16, r28
    11d2:	0f 5b       	subi	r16, 0xBF	; 191
    11d4:	1f 4f       	sbci	r17, 0xFF	; 255
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	4a e7       	ldi	r20, 0x7A	; 122
    11dc:	53 e4       	ldi	r21, 0x43	; 67
    11de:	6d 81       	ldd	r22, Y+5	; 0x05
    11e0:	7e 81       	ldd	r23, Y+6	; 0x06
    11e2:	8f 81       	ldd	r24, Y+7	; 0x07
    11e4:	98 85       	ldd	r25, Y+8	; 0x08
    11e6:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	f8 01       	movw	r30, r16
    11f0:	80 83       	st	Z, r24
    11f2:	91 83       	std	Z+1, r25	; 0x01
    11f4:	a2 83       	std	Z+2, r26	; 0x02
    11f6:	b3 83       	std	Z+3, r27	; 0x03
    11f8:	ce 01       	movw	r24, r28
    11fa:	8f 5b       	subi	r24, 0xBF	; 191
    11fc:	9f 4f       	sbci	r25, 0xFF	; 255
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e8       	ldi	r20, 0x80	; 128
    1204:	5f e3       	ldi	r21, 0x3F	; 63
    1206:	fc 01       	movw	r30, r24
    1208:	60 81       	ld	r22, Z
    120a:	71 81       	ldd	r23, Z+1	; 0x01
    120c:	82 81       	ldd	r24, Z+2	; 0x02
    120e:	93 81       	ldd	r25, Z+3	; 0x03
    1210:	0e 94 2c 13 	call	0x2658	; 0x2658 <__cmpsf2>
    1214:	88 23       	and	r24, r24
    1216:	4c f4       	brge	.+18     	; 0x122a <LCD_vInit+0x24a>
    1218:	ce 01       	movw	r24, r28
    121a:	8b 5b       	subi	r24, 0xBB	; 187
    121c:	9f 4f       	sbci	r25, 0xFF	; 255
    121e:	21 e0       	ldi	r18, 0x01	; 1
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	fc 01       	movw	r30, r24
    1224:	31 83       	std	Z+1, r19	; 0x01
    1226:	20 83       	st	Z, r18
    1228:	69 c0       	rjmp	.+210    	; 0x12fc <LCD_vInit+0x31c>
    122a:	ce 01       	movw	r24, r28
    122c:	8f 5b       	subi	r24, 0xBF	; 191
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	3f ef       	ldi	r19, 0xFF	; 255
    1234:	4f e7       	ldi	r20, 0x7F	; 127
    1236:	57 e4       	ldi	r21, 0x47	; 71
    1238:	fc 01       	movw	r30, r24
    123a:	60 81       	ld	r22, Z
    123c:	71 81       	ldd	r23, Z+1	; 0x01
    123e:	82 81       	ldd	r24, Z+2	; 0x02
    1240:	93 81       	ldd	r25, Z+3	; 0x03
    1242:	0e 94 84 14 	call	0x2908	; 0x2908 <__gesf2>
    1246:	18 16       	cp	r1, r24
    1248:	0c f0       	brlt	.+2      	; 0x124c <LCD_vInit+0x26c>
    124a:	46 c0       	rjmp	.+140    	; 0x12d8 <LCD_vInit+0x2f8>
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e2       	ldi	r20, 0x20	; 32
    1252:	51 e4       	ldi	r21, 0x41	; 65
    1254:	6d 81       	ldd	r22, Y+5	; 0x05
    1256:	7e 81       	ldd	r23, Y+6	; 0x06
    1258:	8f 81       	ldd	r24, Y+7	; 0x07
    125a:	98 85       	ldd	r25, Y+8	; 0x08
    125c:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	8e 01       	movw	r16, r28
    1266:	0b 5b       	subi	r16, 0xBB	; 187
    1268:	1f 4f       	sbci	r17, 0xFF	; 255
    126a:	bc 01       	movw	r22, r24
    126c:	cd 01       	movw	r24, r26
    126e:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	f8 01       	movw	r30, r16
    1278:	91 83       	std	Z+1, r25	; 0x01
    127a:	80 83       	st	Z, r24
    127c:	24 c0       	rjmp	.+72     	; 0x12c6 <LCD_vInit+0x2e6>
    127e:	ce 01       	movw	r24, r28
    1280:	89 5b       	subi	r24, 0xB9	; 185
    1282:	9f 4f       	sbci	r25, 0xFF	; 255
    1284:	29 e1       	ldi	r18, 0x19	; 25
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	fc 01       	movw	r30, r24
    128a:	31 83       	std	Z+1, r19	; 0x01
    128c:	20 83       	st	Z, r18
    128e:	ce 01       	movw	r24, r28
    1290:	89 5b       	subi	r24, 0xB9	; 185
    1292:	9f 4f       	sbci	r25, 0xFF	; 255
    1294:	fc 01       	movw	r30, r24
    1296:	80 81       	ld	r24, Z
    1298:	91 81       	ldd	r25, Z+1	; 0x01
    129a:	01 97       	sbiw	r24, 0x01	; 1
    129c:	f1 f7       	brne	.-4      	; 0x129a <LCD_vInit+0x2ba>
    129e:	9e 01       	movw	r18, r28
    12a0:	29 5b       	subi	r18, 0xB9	; 185
    12a2:	3f 4f       	sbci	r19, 0xFF	; 255
    12a4:	f9 01       	movw	r30, r18
    12a6:	91 83       	std	Z+1, r25	; 0x01
    12a8:	80 83       	st	Z, r24
    12aa:	ce 01       	movw	r24, r28
    12ac:	8b 5b       	subi	r24, 0xBB	; 187
    12ae:	9f 4f       	sbci	r25, 0xFF	; 255
    12b0:	9e 01       	movw	r18, r28
    12b2:	2b 5b       	subi	r18, 0xBB	; 187
    12b4:	3f 4f       	sbci	r19, 0xFF	; 255
    12b6:	f9 01       	movw	r30, r18
    12b8:	20 81       	ld	r18, Z
    12ba:	31 81       	ldd	r19, Z+1	; 0x01
    12bc:	21 50       	subi	r18, 0x01	; 1
    12be:	31 09       	sbc	r19, r1
    12c0:	fc 01       	movw	r30, r24
    12c2:	31 83       	std	Z+1, r19	; 0x01
    12c4:	20 83       	st	Z, r18
    12c6:	ce 01       	movw	r24, r28
    12c8:	8b 5b       	subi	r24, 0xBB	; 187
    12ca:	9f 4f       	sbci	r25, 0xFF	; 255
    12cc:	fc 01       	movw	r30, r24
    12ce:	80 81       	ld	r24, Z
    12d0:	91 81       	ldd	r25, Z+1	; 0x01
    12d2:	89 2b       	or	r24, r25
    12d4:	a1 f6       	brne	.-88     	; 0x127e <LCD_vInit+0x29e>
    12d6:	2c c0       	rjmp	.+88     	; 0x1330 <LCD_vInit+0x350>
    12d8:	8e 01       	movw	r16, r28
    12da:	0b 5b       	subi	r16, 0xBB	; 187
    12dc:	1f 4f       	sbci	r17, 0xFF	; 255
    12de:	ce 01       	movw	r24, r28
    12e0:	8f 5b       	subi	r24, 0xBF	; 191
    12e2:	9f 4f       	sbci	r25, 0xFF	; 255
    12e4:	fc 01       	movw	r30, r24
    12e6:	60 81       	ld	r22, Z
    12e8:	71 81       	ldd	r23, Z+1	; 0x01
    12ea:	82 81       	ldd	r24, Z+2	; 0x02
    12ec:	93 81       	ldd	r25, Z+3	; 0x03
    12ee:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	f8 01       	movw	r30, r16
    12f8:	91 83       	std	Z+1, r25	; 0x01
    12fa:	80 83       	st	Z, r24
    12fc:	ce 01       	movw	r24, r28
    12fe:	87 5b       	subi	r24, 0xB7	; 183
    1300:	9f 4f       	sbci	r25, 0xFF	; 255
    1302:	9e 01       	movw	r18, r28
    1304:	2b 5b       	subi	r18, 0xBB	; 187
    1306:	3f 4f       	sbci	r19, 0xFF	; 255
    1308:	f9 01       	movw	r30, r18
    130a:	20 81       	ld	r18, Z
    130c:	31 81       	ldd	r19, Z+1	; 0x01
    130e:	fc 01       	movw	r30, r24
    1310:	31 83       	std	Z+1, r19	; 0x01
    1312:	20 83       	st	Z, r18
    1314:	ce 01       	movw	r24, r28
    1316:	87 5b       	subi	r24, 0xB7	; 183
    1318:	9f 4f       	sbci	r25, 0xFF	; 255
    131a:	fc 01       	movw	r30, r24
    131c:	80 81       	ld	r24, Z
    131e:	91 81       	ldd	r25, Z+1	; 0x01
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	f1 f7       	brne	.-4      	; 0x1320 <LCD_vInit+0x340>
    1324:	9e 01       	movw	r18, r28
    1326:	27 5b       	subi	r18, 0xB7	; 183
    1328:	3f 4f       	sbci	r19, 0xFF	; 255
    132a:	f9 01       	movw	r30, r18
    132c:	91 83       	std	Z+1, r25	; 0x01
    132e:	80 83       	st	Z, r24
    1330:	88 e2       	ldi	r24, 0x28	; 40
    1332:	0e 94 85 0c 	call	0x190a	; 0x190a <LCD_vSend_cmd>
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	a0 e8       	ldi	r26, 0x80	; 128
    133c:	bf e3       	ldi	r27, 0x3F	; 63
    133e:	89 87       	std	Y+9, r24	; 0x09
    1340:	9a 87       	std	Y+10, r25	; 0x0a
    1342:	ab 87       	std	Y+11, r26	; 0x0b
    1344:	bc 87       	std	Y+12, r27	; 0x0c
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	4a e7       	ldi	r20, 0x7A	; 122
    134c:	53 e4       	ldi	r21, 0x43	; 67
    134e:	69 85       	ldd	r22, Y+9	; 0x09
    1350:	7a 85       	ldd	r23, Y+10	; 0x0a
    1352:	8b 85       	ldd	r24, Y+11	; 0x0b
    1354:	9c 85       	ldd	r25, Y+12	; 0x0c
    1356:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	8f ab       	std	Y+55, r24	; 0x37
    1360:	98 af       	std	Y+56, r25	; 0x38
    1362:	a9 af       	std	Y+57, r26	; 0x39
    1364:	ba af       	std	Y+58, r27	; 0x3a
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 e8       	ldi	r20, 0x80	; 128
    136c:	5f e3       	ldi	r21, 0x3F	; 63
    136e:	6f a9       	ldd	r22, Y+55	; 0x37
    1370:	78 ad       	ldd	r23, Y+56	; 0x38
    1372:	89 ad       	ldd	r24, Y+57	; 0x39
    1374:	9a ad       	ldd	r25, Y+58	; 0x3a
    1376:	0e 94 2c 13 	call	0x2658	; 0x2658 <__cmpsf2>
    137a:	88 23       	and	r24, r24
    137c:	2c f4       	brge	.+10     	; 0x1388 <LCD_vInit+0x3a8>
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	9c af       	std	Y+60, r25	; 0x3c
    1384:	8b af       	std	Y+59, r24	; 0x3b
    1386:	3f c0       	rjmp	.+126    	; 0x1406 <LCD_vInit+0x426>
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	3f ef       	ldi	r19, 0xFF	; 255
    138c:	4f e7       	ldi	r20, 0x7F	; 127
    138e:	57 e4       	ldi	r21, 0x47	; 71
    1390:	6f a9       	ldd	r22, Y+55	; 0x37
    1392:	78 ad       	ldd	r23, Y+56	; 0x38
    1394:	89 ad       	ldd	r24, Y+57	; 0x39
    1396:	9a ad       	ldd	r25, Y+58	; 0x3a
    1398:	0e 94 84 14 	call	0x2908	; 0x2908 <__gesf2>
    139c:	18 16       	cp	r1, r24
    139e:	4c f5       	brge	.+82     	; 0x13f2 <LCD_vInit+0x412>
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e2       	ldi	r20, 0x20	; 32
    13a6:	51 e4       	ldi	r21, 0x41	; 65
    13a8:	69 85       	ldd	r22, Y+9	; 0x09
    13aa:	7a 85       	ldd	r23, Y+10	; 0x0a
    13ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    13ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    13b0:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	9c af       	std	Y+60, r25	; 0x3c
    13c6:	8b af       	std	Y+59, r24	; 0x3b
    13c8:	0f c0       	rjmp	.+30     	; 0x13e8 <LCD_vInit+0x408>
    13ca:	89 e1       	ldi	r24, 0x19	; 25
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	9e af       	std	Y+62, r25	; 0x3e
    13d0:	8d af       	std	Y+61, r24	; 0x3d
    13d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    13d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	f1 f7       	brne	.-4      	; 0x13d6 <LCD_vInit+0x3f6>
    13da:	9e af       	std	Y+62, r25	; 0x3e
    13dc:	8d af       	std	Y+61, r24	; 0x3d
    13de:	8b ad       	ldd	r24, Y+59	; 0x3b
    13e0:	9c ad       	ldd	r25, Y+60	; 0x3c
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	9c af       	std	Y+60, r25	; 0x3c
    13e6:	8b af       	std	Y+59, r24	; 0x3b
    13e8:	8b ad       	ldd	r24, Y+59	; 0x3b
    13ea:	9c ad       	ldd	r25, Y+60	; 0x3c
    13ec:	89 2b       	or	r24, r25
    13ee:	69 f7       	brne	.-38     	; 0x13ca <LCD_vInit+0x3ea>
    13f0:	1e c0       	rjmp	.+60     	; 0x142e <LCD_vInit+0x44e>
    13f2:	6f a9       	ldd	r22, Y+55	; 0x37
    13f4:	78 ad       	ldd	r23, Y+56	; 0x38
    13f6:	89 ad       	ldd	r24, Y+57	; 0x39
    13f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    13fa:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	9c af       	std	Y+60, r25	; 0x3c
    1404:	8b af       	std	Y+59, r24	; 0x3b
    1406:	2b ad       	ldd	r18, Y+59	; 0x3b
    1408:	3c ad       	ldd	r19, Y+60	; 0x3c
    140a:	ce 01       	movw	r24, r28
    140c:	cf 96       	adiw	r24, 0x3f	; 63
    140e:	fc 01       	movw	r30, r24
    1410:	31 83       	std	Z+1, r19	; 0x01
    1412:	20 83       	st	Z, r18
    1414:	ce 01       	movw	r24, r28
    1416:	cf 96       	adiw	r24, 0x3f	; 63
    1418:	fc 01       	movw	r30, r24
    141a:	80 81       	ld	r24, Z
    141c:	91 81       	ldd	r25, Z+1	; 0x01
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <LCD_vInit+0x43e>
    1422:	9e 01       	movw	r18, r28
    1424:	21 5c       	subi	r18, 0xC1	; 193
    1426:	3f 4f       	sbci	r19, 0xFF	; 255
    1428:	f9 01       	movw	r30, r18
    142a:	91 83       	std	Z+1, r25	; 0x01
    142c:	80 83       	st	Z, r24
    142e:	8c e0       	ldi	r24, 0x0C	; 12
    1430:	0e 94 85 0c 	call	0x190a	; 0x190a <LCD_vSend_cmd>
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	a0 e8       	ldi	r26, 0x80	; 128
    143a:	bf e3       	ldi	r27, 0x3F	; 63
    143c:	8d 87       	std	Y+13, r24	; 0x0d
    143e:	9e 87       	std	Y+14, r25	; 0x0e
    1440:	af 87       	std	Y+15, r26	; 0x0f
    1442:	b8 8b       	std	Y+16, r27	; 0x10
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	4a e7       	ldi	r20, 0x7A	; 122
    144a:	53 e4       	ldi	r21, 0x43	; 67
    144c:	6d 85       	ldd	r22, Y+13	; 0x0d
    144e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1450:	8f 85       	ldd	r24, Y+15	; 0x0f
    1452:	98 89       	ldd	r25, Y+16	; 0x10
    1454:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	8d a7       	std	Y+45, r24	; 0x2d
    145e:	9e a7       	std	Y+46, r25	; 0x2e
    1460:	af a7       	std	Y+47, r26	; 0x2f
    1462:	b8 ab       	std	Y+48, r27	; 0x30
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	40 e8       	ldi	r20, 0x80	; 128
    146a:	5f e3       	ldi	r21, 0x3F	; 63
    146c:	6d a5       	ldd	r22, Y+45	; 0x2d
    146e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1470:	8f a5       	ldd	r24, Y+47	; 0x2f
    1472:	98 a9       	ldd	r25, Y+48	; 0x30
    1474:	0e 94 2c 13 	call	0x2658	; 0x2658 <__cmpsf2>
    1478:	88 23       	and	r24, r24
    147a:	2c f4       	brge	.+10     	; 0x1486 <LCD_vInit+0x4a6>
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	9a ab       	std	Y+50, r25	; 0x32
    1482:	89 ab       	std	Y+49, r24	; 0x31
    1484:	3f c0       	rjmp	.+126    	; 0x1504 <LCD_vInit+0x524>
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	3f ef       	ldi	r19, 0xFF	; 255
    148a:	4f e7       	ldi	r20, 0x7F	; 127
    148c:	57 e4       	ldi	r21, 0x47	; 71
    148e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1490:	7e a5       	ldd	r23, Y+46	; 0x2e
    1492:	8f a5       	ldd	r24, Y+47	; 0x2f
    1494:	98 a9       	ldd	r25, Y+48	; 0x30
    1496:	0e 94 84 14 	call	0x2908	; 0x2908 <__gesf2>
    149a:	18 16       	cp	r1, r24
    149c:	4c f5       	brge	.+82     	; 0x14f0 <LCD_vInit+0x510>
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	40 e2       	ldi	r20, 0x20	; 32
    14a4:	51 e4       	ldi	r21, 0x41	; 65
    14a6:	6d 85       	ldd	r22, Y+13	; 0x0d
    14a8:	7e 85       	ldd	r23, Y+14	; 0x0e
    14aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ac:	98 89       	ldd	r25, Y+16	; 0x10
    14ae:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	bc 01       	movw	r22, r24
    14b8:	cd 01       	movw	r24, r26
    14ba:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	9a ab       	std	Y+50, r25	; 0x32
    14c4:	89 ab       	std	Y+49, r24	; 0x31
    14c6:	0f c0       	rjmp	.+30     	; 0x14e6 <LCD_vInit+0x506>
    14c8:	89 e1       	ldi	r24, 0x19	; 25
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	9c ab       	std	Y+52, r25	; 0x34
    14ce:	8b ab       	std	Y+51, r24	; 0x33
    14d0:	8b a9       	ldd	r24, Y+51	; 0x33
    14d2:	9c a9       	ldd	r25, Y+52	; 0x34
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <LCD_vInit+0x4f4>
    14d8:	9c ab       	std	Y+52, r25	; 0x34
    14da:	8b ab       	std	Y+51, r24	; 0x33
    14dc:	89 a9       	ldd	r24, Y+49	; 0x31
    14de:	9a a9       	ldd	r25, Y+50	; 0x32
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	9a ab       	std	Y+50, r25	; 0x32
    14e4:	89 ab       	std	Y+49, r24	; 0x31
    14e6:	89 a9       	ldd	r24, Y+49	; 0x31
    14e8:	9a a9       	ldd	r25, Y+50	; 0x32
    14ea:	89 2b       	or	r24, r25
    14ec:	69 f7       	brne	.-38     	; 0x14c8 <LCD_vInit+0x4e8>
    14ee:	14 c0       	rjmp	.+40     	; 0x1518 <LCD_vInit+0x538>
    14f0:	6d a5       	ldd	r22, Y+45	; 0x2d
    14f2:	7e a5       	ldd	r23, Y+46	; 0x2e
    14f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    14f6:	98 a9       	ldd	r25, Y+48	; 0x30
    14f8:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	9a ab       	std	Y+50, r25	; 0x32
    1502:	89 ab       	std	Y+49, r24	; 0x31
    1504:	89 a9       	ldd	r24, Y+49	; 0x31
    1506:	9a a9       	ldd	r25, Y+50	; 0x32
    1508:	9e ab       	std	Y+54, r25	; 0x36
    150a:	8d ab       	std	Y+53, r24	; 0x35
    150c:	8d a9       	ldd	r24, Y+53	; 0x35
    150e:	9e a9       	ldd	r25, Y+54	; 0x36
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <LCD_vInit+0x530>
    1514:	9e ab       	std	Y+54, r25	; 0x36
    1516:	8d ab       	std	Y+53, r24	; 0x35
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	0e 94 85 0c 	call	0x190a	; 0x190a <LCD_vSend_cmd>
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	a0 e2       	ldi	r26, 0x20	; 32
    1524:	b1 e4       	ldi	r27, 0x41	; 65
    1526:	89 8b       	std	Y+17, r24	; 0x11
    1528:	9a 8b       	std	Y+18, r25	; 0x12
    152a:	ab 8b       	std	Y+19, r26	; 0x13
    152c:	bc 8b       	std	Y+20, r27	; 0x14
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	4a e7       	ldi	r20, 0x7A	; 122
    1534:	53 e4       	ldi	r21, 0x43	; 67
    1536:	69 89       	ldd	r22, Y+17	; 0x11
    1538:	7a 89       	ldd	r23, Y+18	; 0x12
    153a:	8b 89       	ldd	r24, Y+19	; 0x13
    153c:	9c 89       	ldd	r25, Y+20	; 0x14
    153e:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	8b a3       	std	Y+35, r24	; 0x23
    1548:	9c a3       	std	Y+36, r25	; 0x24
    154a:	ad a3       	std	Y+37, r26	; 0x25
    154c:	be a3       	std	Y+38, r27	; 0x26
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e8       	ldi	r20, 0x80	; 128
    1554:	5f e3       	ldi	r21, 0x3F	; 63
    1556:	6b a1       	ldd	r22, Y+35	; 0x23
    1558:	7c a1       	ldd	r23, Y+36	; 0x24
    155a:	8d a1       	ldd	r24, Y+37	; 0x25
    155c:	9e a1       	ldd	r25, Y+38	; 0x26
    155e:	0e 94 2c 13 	call	0x2658	; 0x2658 <__cmpsf2>
    1562:	88 23       	and	r24, r24
    1564:	2c f4       	brge	.+10     	; 0x1570 <LCD_vInit+0x590>
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	98 a7       	std	Y+40, r25	; 0x28
    156c:	8f a3       	std	Y+39, r24	; 0x27
    156e:	3f c0       	rjmp	.+126    	; 0x15ee <LCD_vInit+0x60e>
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	3f ef       	ldi	r19, 0xFF	; 255
    1574:	4f e7       	ldi	r20, 0x7F	; 127
    1576:	57 e4       	ldi	r21, 0x47	; 71
    1578:	6b a1       	ldd	r22, Y+35	; 0x23
    157a:	7c a1       	ldd	r23, Y+36	; 0x24
    157c:	8d a1       	ldd	r24, Y+37	; 0x25
    157e:	9e a1       	ldd	r25, Y+38	; 0x26
    1580:	0e 94 84 14 	call	0x2908	; 0x2908 <__gesf2>
    1584:	18 16       	cp	r1, r24
    1586:	4c f5       	brge	.+82     	; 0x15da <LCD_vInit+0x5fa>
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e2       	ldi	r20, 0x20	; 32
    158e:	51 e4       	ldi	r21, 0x41	; 65
    1590:	69 89       	ldd	r22, Y+17	; 0x11
    1592:	7a 89       	ldd	r23, Y+18	; 0x12
    1594:	8b 89       	ldd	r24, Y+19	; 0x13
    1596:	9c 89       	ldd	r25, Y+20	; 0x14
    1598:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	bc 01       	movw	r22, r24
    15a2:	cd 01       	movw	r24, r26
    15a4:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	98 a7       	std	Y+40, r25	; 0x28
    15ae:	8f a3       	std	Y+39, r24	; 0x27
    15b0:	0f c0       	rjmp	.+30     	; 0x15d0 <LCD_vInit+0x5f0>
    15b2:	89 e1       	ldi	r24, 0x19	; 25
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	9a a7       	std	Y+42, r25	; 0x2a
    15b8:	89 a7       	std	Y+41, r24	; 0x29
    15ba:	89 a5       	ldd	r24, Y+41	; 0x29
    15bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	f1 f7       	brne	.-4      	; 0x15be <LCD_vInit+0x5de>
    15c2:	9a a7       	std	Y+42, r25	; 0x2a
    15c4:	89 a7       	std	Y+41, r24	; 0x29
    15c6:	8f a1       	ldd	r24, Y+39	; 0x27
    15c8:	98 a5       	ldd	r25, Y+40	; 0x28
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	98 a7       	std	Y+40, r25	; 0x28
    15ce:	8f a3       	std	Y+39, r24	; 0x27
    15d0:	8f a1       	ldd	r24, Y+39	; 0x27
    15d2:	98 a5       	ldd	r25, Y+40	; 0x28
    15d4:	89 2b       	or	r24, r25
    15d6:	69 f7       	brne	.-38     	; 0x15b2 <LCD_vInit+0x5d2>
    15d8:	14 c0       	rjmp	.+40     	; 0x1602 <LCD_vInit+0x622>
    15da:	6b a1       	ldd	r22, Y+35	; 0x23
    15dc:	7c a1       	ldd	r23, Y+36	; 0x24
    15de:	8d a1       	ldd	r24, Y+37	; 0x25
    15e0:	9e a1       	ldd	r25, Y+38	; 0x26
    15e2:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	98 a7       	std	Y+40, r25	; 0x28
    15ec:	8f a3       	std	Y+39, r24	; 0x27
    15ee:	8f a1       	ldd	r24, Y+39	; 0x27
    15f0:	98 a5       	ldd	r25, Y+40	; 0x28
    15f2:	9c a7       	std	Y+44, r25	; 0x2c
    15f4:	8b a7       	std	Y+43, r24	; 0x2b
    15f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    15f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	f1 f7       	brne	.-4      	; 0x15fa <LCD_vInit+0x61a>
    15fe:	9c a7       	std	Y+44, r25	; 0x2c
    1600:	8b a7       	std	Y+43, r24	; 0x2b
    1602:	86 e0       	ldi	r24, 0x06	; 6
    1604:	0e 94 85 0c 	call	0x190a	; 0x190a <LCD_vSend_cmd>
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	a0 e8       	ldi	r26, 0x80	; 128
    160e:	bf e3       	ldi	r27, 0x3F	; 63
    1610:	8d 8b       	std	Y+21, r24	; 0x15
    1612:	9e 8b       	std	Y+22, r25	; 0x16
    1614:	af 8b       	std	Y+23, r26	; 0x17
    1616:	b8 8f       	std	Y+24, r27	; 0x18
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	4a e7       	ldi	r20, 0x7A	; 122
    161e:	53 e4       	ldi	r21, 0x43	; 67
    1620:	6d 89       	ldd	r22, Y+21	; 0x15
    1622:	7e 89       	ldd	r23, Y+22	; 0x16
    1624:	8f 89       	ldd	r24, Y+23	; 0x17
    1626:	98 8d       	ldd	r25, Y+24	; 0x18
    1628:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	89 8f       	std	Y+25, r24	; 0x19
    1632:	9a 8f       	std	Y+26, r25	; 0x1a
    1634:	ab 8f       	std	Y+27, r26	; 0x1b
    1636:	bc 8f       	std	Y+28, r27	; 0x1c
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e8       	ldi	r20, 0x80	; 128
    163e:	5f e3       	ldi	r21, 0x3F	; 63
    1640:	69 8d       	ldd	r22, Y+25	; 0x19
    1642:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1644:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1646:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1648:	0e 94 2c 13 	call	0x2658	; 0x2658 <__cmpsf2>
    164c:	88 23       	and	r24, r24
    164e:	2c f4       	brge	.+10     	; 0x165a <LCD_vInit+0x67a>
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	9e 8f       	std	Y+30, r25	; 0x1e
    1656:	8d 8f       	std	Y+29, r24	; 0x1d
    1658:	3f c0       	rjmp	.+126    	; 0x16d8 <LCD_vInit+0x6f8>
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	3f ef       	ldi	r19, 0xFF	; 255
    165e:	4f e7       	ldi	r20, 0x7F	; 127
    1660:	57 e4       	ldi	r21, 0x47	; 71
    1662:	69 8d       	ldd	r22, Y+25	; 0x19
    1664:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1666:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1668:	9c 8d       	ldd	r25, Y+28	; 0x1c
    166a:	0e 94 84 14 	call	0x2908	; 0x2908 <__gesf2>
    166e:	18 16       	cp	r1, r24
    1670:	4c f5       	brge	.+82     	; 0x16c4 <LCD_vInit+0x6e4>
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e2       	ldi	r20, 0x20	; 32
    1678:	51 e4       	ldi	r21, 0x41	; 65
    167a:	6d 89       	ldd	r22, Y+21	; 0x15
    167c:	7e 89       	ldd	r23, Y+22	; 0x16
    167e:	8f 89       	ldd	r24, Y+23	; 0x17
    1680:	98 8d       	ldd	r25, Y+24	; 0x18
    1682:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	bc 01       	movw	r22, r24
    168c:	cd 01       	movw	r24, r26
    168e:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	9e 8f       	std	Y+30, r25	; 0x1e
    1698:	8d 8f       	std	Y+29, r24	; 0x1d
    169a:	0f c0       	rjmp	.+30     	; 0x16ba <LCD_vInit+0x6da>
    169c:	89 e1       	ldi	r24, 0x19	; 25
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	98 a3       	std	Y+32, r25	; 0x20
    16a2:	8f 8f       	std	Y+31, r24	; 0x1f
    16a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16a6:	98 a1       	ldd	r25, Y+32	; 0x20
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	f1 f7       	brne	.-4      	; 0x16a8 <LCD_vInit+0x6c8>
    16ac:	98 a3       	std	Y+32, r25	; 0x20
    16ae:	8f 8f       	std	Y+31, r24	; 0x1f
    16b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	9e 8f       	std	Y+30, r25	; 0x1e
    16b8:	8d 8f       	std	Y+29, r24	; 0x1d
    16ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16be:	89 2b       	or	r24, r25
    16c0:	69 f7       	brne	.-38     	; 0x169c <LCD_vInit+0x6bc>
    16c2:	14 c0       	rjmp	.+40     	; 0x16ec <LCD_vInit+0x70c>
    16c4:	69 8d       	ldd	r22, Y+25	; 0x19
    16c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16cc:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	9e 8f       	std	Y+30, r25	; 0x1e
    16d6:	8d 8f       	std	Y+29, r24	; 0x1d
    16d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16dc:	9a a3       	std	Y+34, r25	; 0x22
    16de:	89 a3       	std	Y+33, r24	; 0x21
    16e0:	89 a1       	ldd	r24, Y+33	; 0x21
    16e2:	9a a1       	ldd	r25, Y+34	; 0x22
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <LCD_vInit+0x704>
    16e8:	9a a3       	std	Y+34, r25	; 0x22
    16ea:	89 a3       	std	Y+33, r24	; 0x21
    16ec:	00 00       	nop
    16ee:	cc 5a       	subi	r28, 0xAC	; 172
    16f0:	df 4f       	sbci	r29, 0xFF	; 255
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	de bf       	out	0x3e, r29	; 62
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	cd bf       	out	0x3d, r28	; 61
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	1f 91       	pop	r17
    1702:	0f 91       	pop	r16
    1704:	08 95       	ret

00001706 <send_falling_edge>:
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	6c 97       	sbiw	r28, 0x1c	; 28
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	41 e0       	ldi	r20, 0x01	; 1
    171c:	63 e0       	ldi	r22, 0x03	; 3
    171e:	81 e4       	ldi	r24, 0x41	; 65
    1720:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <DIO_write>
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	a0 e0       	ldi	r26, 0x00	; 0
    172a:	b0 e4       	ldi	r27, 0x40	; 64
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	9a 83       	std	Y+2, r25	; 0x02
    1730:	ab 83       	std	Y+3, r26	; 0x03
    1732:	bc 83       	std	Y+4, r27	; 0x04
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	4a e7       	ldi	r20, 0x7A	; 122
    173a:	53 e4       	ldi	r21, 0x43	; 67
    173c:	69 81       	ldd	r22, Y+1	; 0x01
    173e:	7a 81       	ldd	r23, Y+2	; 0x02
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	8b 8b       	std	Y+19, r24	; 0x13
    174e:	9c 8b       	std	Y+20, r25	; 0x14
    1750:	ad 8b       	std	Y+21, r26	; 0x15
    1752:	be 8b       	std	Y+22, r27	; 0x16
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e8       	ldi	r20, 0x80	; 128
    175a:	5f e3       	ldi	r21, 0x3F	; 63
    175c:	6b 89       	ldd	r22, Y+19	; 0x13
    175e:	7c 89       	ldd	r23, Y+20	; 0x14
    1760:	8d 89       	ldd	r24, Y+21	; 0x15
    1762:	9e 89       	ldd	r25, Y+22	; 0x16
    1764:	0e 94 2c 13 	call	0x2658	; 0x2658 <__cmpsf2>
    1768:	88 23       	and	r24, r24
    176a:	2c f4       	brge	.+10     	; 0x1776 <send_falling_edge+0x70>
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	98 8f       	std	Y+24, r25	; 0x18
    1772:	8f 8b       	std	Y+23, r24	; 0x17
    1774:	3f c0       	rjmp	.+126    	; 0x17f4 <send_falling_edge+0xee>
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	3f ef       	ldi	r19, 0xFF	; 255
    177a:	4f e7       	ldi	r20, 0x7F	; 127
    177c:	57 e4       	ldi	r21, 0x47	; 71
    177e:	6b 89       	ldd	r22, Y+19	; 0x13
    1780:	7c 89       	ldd	r23, Y+20	; 0x14
    1782:	8d 89       	ldd	r24, Y+21	; 0x15
    1784:	9e 89       	ldd	r25, Y+22	; 0x16
    1786:	0e 94 84 14 	call	0x2908	; 0x2908 <__gesf2>
    178a:	18 16       	cp	r1, r24
    178c:	4c f5       	brge	.+82     	; 0x17e0 <send_falling_edge+0xda>
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e2       	ldi	r20, 0x20	; 32
    1794:	51 e4       	ldi	r21, 0x41	; 65
    1796:	69 81       	ldd	r22, Y+1	; 0x01
    1798:	7a 81       	ldd	r23, Y+2	; 0x02
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	bc 01       	movw	r22, r24
    17a8:	cd 01       	movw	r24, r26
    17aa:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	98 8f       	std	Y+24, r25	; 0x18
    17b4:	8f 8b       	std	Y+23, r24	; 0x17
    17b6:	0f c0       	rjmp	.+30     	; 0x17d6 <send_falling_edge+0xd0>
    17b8:	89 e1       	ldi	r24, 0x19	; 25
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	9a 8f       	std	Y+26, r25	; 0x1a
    17be:	89 8f       	std	Y+25, r24	; 0x19
    17c0:	89 8d       	ldd	r24, Y+25	; 0x19
    17c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <send_falling_edge+0xbe>
    17c8:	9a 8f       	std	Y+26, r25	; 0x1a
    17ca:	89 8f       	std	Y+25, r24	; 0x19
    17cc:	8f 89       	ldd	r24, Y+23	; 0x17
    17ce:	98 8d       	ldd	r25, Y+24	; 0x18
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	98 8f       	std	Y+24, r25	; 0x18
    17d4:	8f 8b       	std	Y+23, r24	; 0x17
    17d6:	8f 89       	ldd	r24, Y+23	; 0x17
    17d8:	98 8d       	ldd	r25, Y+24	; 0x18
    17da:	89 2b       	or	r24, r25
    17dc:	69 f7       	brne	.-38     	; 0x17b8 <send_falling_edge+0xb2>
    17de:	14 c0       	rjmp	.+40     	; 0x1808 <send_falling_edge+0x102>
    17e0:	6b 89       	ldd	r22, Y+19	; 0x13
    17e2:	7c 89       	ldd	r23, Y+20	; 0x14
    17e4:	8d 89       	ldd	r24, Y+21	; 0x15
    17e6:	9e 89       	ldd	r25, Y+22	; 0x16
    17e8:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	98 8f       	std	Y+24, r25	; 0x18
    17f2:	8f 8b       	std	Y+23, r24	; 0x17
    17f4:	8f 89       	ldd	r24, Y+23	; 0x17
    17f6:	98 8d       	ldd	r25, Y+24	; 0x18
    17f8:	9c 8f       	std	Y+28, r25	; 0x1c
    17fa:	8b 8f       	std	Y+27, r24	; 0x1b
    17fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <send_falling_edge+0xfa>
    1804:	9c 8f       	std	Y+28, r25	; 0x1c
    1806:	8b 8f       	std	Y+27, r24	; 0x1b
    1808:	40 e0       	ldi	r20, 0x00	; 0
    180a:	63 e0       	ldi	r22, 0x03	; 3
    180c:	81 e4       	ldi	r24, 0x41	; 65
    180e:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <DIO_write>
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	a0 e0       	ldi	r26, 0x00	; 0
    1818:	b0 e4       	ldi	r27, 0x40	; 64
    181a:	8d 83       	std	Y+5, r24	; 0x05
    181c:	9e 83       	std	Y+6, r25	; 0x06
    181e:	af 83       	std	Y+7, r26	; 0x07
    1820:	b8 87       	std	Y+8, r27	; 0x08
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	4a e7       	ldi	r20, 0x7A	; 122
    1828:	53 e4       	ldi	r21, 0x43	; 67
    182a:	6d 81       	ldd	r22, Y+5	; 0x05
    182c:	7e 81       	ldd	r23, Y+6	; 0x06
    182e:	8f 81       	ldd	r24, Y+7	; 0x07
    1830:	98 85       	ldd	r25, Y+8	; 0x08
    1832:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	89 87       	std	Y+9, r24	; 0x09
    183c:	9a 87       	std	Y+10, r25	; 0x0a
    183e:	ab 87       	std	Y+11, r26	; 0x0b
    1840:	bc 87       	std	Y+12, r27	; 0x0c
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e8       	ldi	r20, 0x80	; 128
    1848:	5f e3       	ldi	r21, 0x3F	; 63
    184a:	69 85       	ldd	r22, Y+9	; 0x09
    184c:	7a 85       	ldd	r23, Y+10	; 0x0a
    184e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1850:	9c 85       	ldd	r25, Y+12	; 0x0c
    1852:	0e 94 2c 13 	call	0x2658	; 0x2658 <__cmpsf2>
    1856:	88 23       	and	r24, r24
    1858:	2c f4       	brge	.+10     	; 0x1864 <send_falling_edge+0x15e>
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	9e 87       	std	Y+14, r25	; 0x0e
    1860:	8d 87       	std	Y+13, r24	; 0x0d
    1862:	3f c0       	rjmp	.+126    	; 0x18e2 <send_falling_edge+0x1dc>
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	3f ef       	ldi	r19, 0xFF	; 255
    1868:	4f e7       	ldi	r20, 0x7F	; 127
    186a:	57 e4       	ldi	r21, 0x47	; 71
    186c:	69 85       	ldd	r22, Y+9	; 0x09
    186e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1870:	8b 85       	ldd	r24, Y+11	; 0x0b
    1872:	9c 85       	ldd	r25, Y+12	; 0x0c
    1874:	0e 94 84 14 	call	0x2908	; 0x2908 <__gesf2>
    1878:	18 16       	cp	r1, r24
    187a:	4c f5       	brge	.+82     	; 0x18ce <send_falling_edge+0x1c8>
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e2       	ldi	r20, 0x20	; 32
    1882:	51 e4       	ldi	r21, 0x41	; 65
    1884:	6d 81       	ldd	r22, Y+5	; 0x05
    1886:	7e 81       	ldd	r23, Y+6	; 0x06
    1888:	8f 81       	ldd	r24, Y+7	; 0x07
    188a:	98 85       	ldd	r25, Y+8	; 0x08
    188c:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	bc 01       	movw	r22, r24
    1896:	cd 01       	movw	r24, r26
    1898:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	9e 87       	std	Y+14, r25	; 0x0e
    18a2:	8d 87       	std	Y+13, r24	; 0x0d
    18a4:	0f c0       	rjmp	.+30     	; 0x18c4 <send_falling_edge+0x1be>
    18a6:	89 e1       	ldi	r24, 0x19	; 25
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	98 8b       	std	Y+16, r25	; 0x10
    18ac:	8f 87       	std	Y+15, r24	; 0x0f
    18ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    18b0:	98 89       	ldd	r25, Y+16	; 0x10
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <send_falling_edge+0x1ac>
    18b6:	98 8b       	std	Y+16, r25	; 0x10
    18b8:	8f 87       	std	Y+15, r24	; 0x0f
    18ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    18bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	9e 87       	std	Y+14, r25	; 0x0e
    18c2:	8d 87       	std	Y+13, r24	; 0x0d
    18c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c8:	89 2b       	or	r24, r25
    18ca:	69 f7       	brne	.-38     	; 0x18a6 <send_falling_edge+0x1a0>
    18cc:	14 c0       	rjmp	.+40     	; 0x18f6 <send_falling_edge+0x1f0>
    18ce:	69 85       	ldd	r22, Y+9	; 0x09
    18d0:	7a 85       	ldd	r23, Y+10	; 0x0a
    18d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    18d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    18d6:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	9e 87       	std	Y+14, r25	; 0x0e
    18e0:	8d 87       	std	Y+13, r24	; 0x0d
    18e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e6:	9a 8b       	std	Y+18, r25	; 0x12
    18e8:	89 8b       	std	Y+17, r24	; 0x11
    18ea:	89 89       	ldd	r24, Y+17	; 0x11
    18ec:	9a 89       	ldd	r25, Y+18	; 0x12
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <send_falling_edge+0x1e8>
    18f2:	9a 8b       	std	Y+18, r25	; 0x12
    18f4:	89 8b       	std	Y+17, r24	; 0x11
    18f6:	00 00       	nop
    18f8:	6c 96       	adiw	r28, 0x1c	; 28
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	08 95       	ret

0000190a <LCD_vSend_cmd>:
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	2f 97       	sbiw	r28, 0x0f	; 15
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	8f 87       	std	Y+15, r24	; 0x0f
    1920:	8f 85       	ldd	r24, Y+15	; 0x0f
    1922:	82 95       	swap	r24
    1924:	8f 70       	andi	r24, 0x0F	; 15
    1926:	68 2f       	mov	r22, r24
    1928:	84 e4       	ldi	r24, 0x44	; 68
    192a:	0e 94 32 11 	call	0x2264	; 0x2264 <write_high_nibble>
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	61 e0       	ldi	r22, 0x01	; 1
    1932:	81 e4       	ldi	r24, 0x41	; 65
    1934:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <DIO_write>
    1938:	0e 94 83 0b 	call	0x1706	; 0x1706 <send_falling_edge>
    193c:	6f 85       	ldd	r22, Y+15	; 0x0f
    193e:	84 e4       	ldi	r24, 0x44	; 68
    1940:	0e 94 32 11 	call	0x2264	; 0x2264 <write_high_nibble>
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	61 e0       	ldi	r22, 0x01	; 1
    1948:	81 e4       	ldi	r24, 0x41	; 65
    194a:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <DIO_write>
    194e:	0e 94 83 0b 	call	0x1706	; 0x1706 <send_falling_edge>
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	a0 e8       	ldi	r26, 0x80	; 128
    1958:	bf e3       	ldi	r27, 0x3F	; 63
    195a:	89 83       	std	Y+1, r24	; 0x01
    195c:	9a 83       	std	Y+2, r25	; 0x02
    195e:	ab 83       	std	Y+3, r26	; 0x03
    1960:	bc 83       	std	Y+4, r27	; 0x04
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	4a e7       	ldi	r20, 0x7A	; 122
    1968:	53 e4       	ldi	r21, 0x43	; 67
    196a:	69 81       	ldd	r22, Y+1	; 0x01
    196c:	7a 81       	ldd	r23, Y+2	; 0x02
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	9c 81       	ldd	r25, Y+4	; 0x04
    1972:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	8d 83       	std	Y+5, r24	; 0x05
    197c:	9e 83       	std	Y+6, r25	; 0x06
    197e:	af 83       	std	Y+7, r26	; 0x07
    1980:	b8 87       	std	Y+8, r27	; 0x08
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e8       	ldi	r20, 0x80	; 128
    1988:	5f e3       	ldi	r21, 0x3F	; 63
    198a:	6d 81       	ldd	r22, Y+5	; 0x05
    198c:	7e 81       	ldd	r23, Y+6	; 0x06
    198e:	8f 81       	ldd	r24, Y+7	; 0x07
    1990:	98 85       	ldd	r25, Y+8	; 0x08
    1992:	0e 94 2c 13 	call	0x2658	; 0x2658 <__cmpsf2>
    1996:	88 23       	and	r24, r24
    1998:	2c f4       	brge	.+10     	; 0x19a4 <LCD_vSend_cmd+0x9a>
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	9a 87       	std	Y+10, r25	; 0x0a
    19a0:	89 87       	std	Y+9, r24	; 0x09
    19a2:	3f c0       	rjmp	.+126    	; 0x1a22 <LCD_vSend_cmd+0x118>
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	3f ef       	ldi	r19, 0xFF	; 255
    19a8:	4f e7       	ldi	r20, 0x7F	; 127
    19aa:	57 e4       	ldi	r21, 0x47	; 71
    19ac:	6d 81       	ldd	r22, Y+5	; 0x05
    19ae:	7e 81       	ldd	r23, Y+6	; 0x06
    19b0:	8f 81       	ldd	r24, Y+7	; 0x07
    19b2:	98 85       	ldd	r25, Y+8	; 0x08
    19b4:	0e 94 84 14 	call	0x2908	; 0x2908 <__gesf2>
    19b8:	18 16       	cp	r1, r24
    19ba:	4c f5       	brge	.+82     	; 0x1a0e <LCD_vSend_cmd+0x104>
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e2       	ldi	r20, 0x20	; 32
    19c2:	51 e4       	ldi	r21, 0x41	; 65
    19c4:	69 81       	ldd	r22, Y+1	; 0x01
    19c6:	7a 81       	ldd	r23, Y+2	; 0x02
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	bc 01       	movw	r22, r24
    19d6:	cd 01       	movw	r24, r26
    19d8:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	9a 87       	std	Y+10, r25	; 0x0a
    19e2:	89 87       	std	Y+9, r24	; 0x09
    19e4:	0f c0       	rjmp	.+30     	; 0x1a04 <LCD_vSend_cmd+0xfa>
    19e6:	89 e1       	ldi	r24, 0x19	; 25
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	9c 87       	std	Y+12, r25	; 0x0c
    19ec:	8b 87       	std	Y+11, r24	; 0x0b
    19ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    19f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <LCD_vSend_cmd+0xe8>
    19f6:	9c 87       	std	Y+12, r25	; 0x0c
    19f8:	8b 87       	std	Y+11, r24	; 0x0b
    19fa:	89 85       	ldd	r24, Y+9	; 0x09
    19fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	9a 87       	std	Y+10, r25	; 0x0a
    1a02:	89 87       	std	Y+9, r24	; 0x09
    1a04:	89 85       	ldd	r24, Y+9	; 0x09
    1a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a08:	89 2b       	or	r24, r25
    1a0a:	69 f7       	brne	.-38     	; 0x19e6 <LCD_vSend_cmd+0xdc>
    1a0c:	14 c0       	rjmp	.+40     	; 0x1a36 <LCD_vSend_cmd+0x12c>
    1a0e:	6d 81       	ldd	r22, Y+5	; 0x05
    1a10:	7e 81       	ldd	r23, Y+6	; 0x06
    1a12:	8f 81       	ldd	r24, Y+7	; 0x07
    1a14:	98 85       	ldd	r25, Y+8	; 0x08
    1a16:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	9a 87       	std	Y+10, r25	; 0x0a
    1a20:	89 87       	std	Y+9, r24	; 0x09
    1a22:	89 85       	ldd	r24, Y+9	; 0x09
    1a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a26:	9e 87       	std	Y+14, r25	; 0x0e
    1a28:	8d 87       	std	Y+13, r24	; 0x0d
    1a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	f1 f7       	brne	.-4      	; 0x1a2e <LCD_vSend_cmd+0x124>
    1a32:	9e 87       	std	Y+14, r25	; 0x0e
    1a34:	8d 87       	std	Y+13, r24	; 0x0d
    1a36:	00 00       	nop
    1a38:	2f 96       	adiw	r28, 0x0f	; 15
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	08 95       	ret

00001a4a <LCD_vSend_char>:
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	2f 97       	sbiw	r28, 0x0f	; 15
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	de bf       	out	0x3e, r29	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	8f 87       	std	Y+15, r24	; 0x0f
    1a60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a62:	82 95       	swap	r24
    1a64:	8f 70       	andi	r24, 0x0F	; 15
    1a66:	68 2f       	mov	r22, r24
    1a68:	84 e4       	ldi	r24, 0x44	; 68
    1a6a:	0e 94 32 11 	call	0x2264	; 0x2264 <write_high_nibble>
    1a6e:	41 e0       	ldi	r20, 0x01	; 1
    1a70:	61 e0       	ldi	r22, 0x01	; 1
    1a72:	81 e4       	ldi	r24, 0x41	; 65
    1a74:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <DIO_write>
    1a78:	0e 94 83 0b 	call	0x1706	; 0x1706 <send_falling_edge>
    1a7c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a7e:	84 e4       	ldi	r24, 0x44	; 68
    1a80:	0e 94 32 11 	call	0x2264	; 0x2264 <write_high_nibble>
    1a84:	41 e0       	ldi	r20, 0x01	; 1
    1a86:	61 e0       	ldi	r22, 0x01	; 1
    1a88:	81 e4       	ldi	r24, 0x41	; 65
    1a8a:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <DIO_write>
    1a8e:	0e 94 83 0b 	call	0x1706	; 0x1706 <send_falling_edge>
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	a0 e8       	ldi	r26, 0x80	; 128
    1a98:	bf e3       	ldi	r27, 0x3F	; 63
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	9a 83       	std	Y+2, r25	; 0x02
    1a9e:	ab 83       	std	Y+3, r26	; 0x03
    1aa0:	bc 83       	std	Y+4, r27	; 0x04
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	4a e7       	ldi	r20, 0x7A	; 122
    1aa8:	53 e4       	ldi	r21, 0x43	; 67
    1aaa:	69 81       	ldd	r22, Y+1	; 0x01
    1aac:	7a 81       	ldd	r23, Y+2	; 0x02
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab2:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	8d 83       	std	Y+5, r24	; 0x05
    1abc:	9e 83       	std	Y+6, r25	; 0x06
    1abe:	af 83       	std	Y+7, r26	; 0x07
    1ac0:	b8 87       	std	Y+8, r27	; 0x08
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e8       	ldi	r20, 0x80	; 128
    1ac8:	5f e3       	ldi	r21, 0x3F	; 63
    1aca:	6d 81       	ldd	r22, Y+5	; 0x05
    1acc:	7e 81       	ldd	r23, Y+6	; 0x06
    1ace:	8f 81       	ldd	r24, Y+7	; 0x07
    1ad0:	98 85       	ldd	r25, Y+8	; 0x08
    1ad2:	0e 94 2c 13 	call	0x2658	; 0x2658 <__cmpsf2>
    1ad6:	88 23       	and	r24, r24
    1ad8:	2c f4       	brge	.+10     	; 0x1ae4 <LCD_vSend_char+0x9a>
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	9a 87       	std	Y+10, r25	; 0x0a
    1ae0:	89 87       	std	Y+9, r24	; 0x09
    1ae2:	3f c0       	rjmp	.+126    	; 0x1b62 <LCD_vSend_char+0x118>
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	3f ef       	ldi	r19, 0xFF	; 255
    1ae8:	4f e7       	ldi	r20, 0x7F	; 127
    1aea:	57 e4       	ldi	r21, 0x47	; 71
    1aec:	6d 81       	ldd	r22, Y+5	; 0x05
    1aee:	7e 81       	ldd	r23, Y+6	; 0x06
    1af0:	8f 81       	ldd	r24, Y+7	; 0x07
    1af2:	98 85       	ldd	r25, Y+8	; 0x08
    1af4:	0e 94 84 14 	call	0x2908	; 0x2908 <__gesf2>
    1af8:	18 16       	cp	r1, r24
    1afa:	4c f5       	brge	.+82     	; 0x1b4e <LCD_vSend_char+0x104>
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e2       	ldi	r20, 0x20	; 32
    1b02:	51 e4       	ldi	r21, 0x41	; 65
    1b04:	69 81       	ldd	r22, Y+1	; 0x01
    1b06:	7a 81       	ldd	r23, Y+2	; 0x02
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	bc 01       	movw	r22, r24
    1b16:	cd 01       	movw	r24, r26
    1b18:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	9a 87       	std	Y+10, r25	; 0x0a
    1b22:	89 87       	std	Y+9, r24	; 0x09
    1b24:	0f c0       	rjmp	.+30     	; 0x1b44 <LCD_vSend_char+0xfa>
    1b26:	89 e1       	ldi	r24, 0x19	; 25
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	9c 87       	std	Y+12, r25	; 0x0c
    1b2c:	8b 87       	std	Y+11, r24	; 0x0b
    1b2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b30:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <LCD_vSend_char+0xe8>
    1b36:	9c 87       	std	Y+12, r25	; 0x0c
    1b38:	8b 87       	std	Y+11, r24	; 0x0b
    1b3a:	89 85       	ldd	r24, Y+9	; 0x09
    1b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	9a 87       	std	Y+10, r25	; 0x0a
    1b42:	89 87       	std	Y+9, r24	; 0x09
    1b44:	89 85       	ldd	r24, Y+9	; 0x09
    1b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b48:	89 2b       	or	r24, r25
    1b4a:	69 f7       	brne	.-38     	; 0x1b26 <LCD_vSend_char+0xdc>
    1b4c:	14 c0       	rjmp	.+40     	; 0x1b76 <LCD_vSend_char+0x12c>
    1b4e:	6d 81       	ldd	r22, Y+5	; 0x05
    1b50:	7e 81       	ldd	r23, Y+6	; 0x06
    1b52:	8f 81       	ldd	r24, Y+7	; 0x07
    1b54:	98 85       	ldd	r25, Y+8	; 0x08
    1b56:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	9a 87       	std	Y+10, r25	; 0x0a
    1b60:	89 87       	std	Y+9, r24	; 0x09
    1b62:	89 85       	ldd	r24, Y+9	; 0x09
    1b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b66:	9e 87       	std	Y+14, r25	; 0x0e
    1b68:	8d 87       	std	Y+13, r24	; 0x0d
    1b6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <LCD_vSend_char+0x124>
    1b72:	9e 87       	std	Y+14, r25	; 0x0e
    1b74:	8d 87       	std	Y+13, r24	; 0x0d
    1b76:	00 00       	nop
    1b78:	2f 96       	adiw	r28, 0x0f	; 15
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	de bf       	out	0x3e, r29	; 62
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	cd bf       	out	0x3d, r28	; 61
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	08 95       	ret

00001b8a <LCD_vSend_string>:
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <LCD_vSend_string+0x6>
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	9a 83       	std	Y+2, r25	; 0x02
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <counter>
    1b9c:	11 c0       	rjmp	.+34     	; 0x1bc0 <LCD_vSend_string+0x36>
    1b9e:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <counter>
    1ba2:	88 2f       	mov	r24, r24
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	29 81       	ldd	r18, Y+1	; 0x01
    1ba8:	3a 81       	ldd	r19, Y+2	; 0x02
    1baa:	82 0f       	add	r24, r18
    1bac:	93 1f       	adc	r25, r19
    1bae:	fc 01       	movw	r30, r24
    1bb0:	80 81       	ld	r24, Z
    1bb2:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_vSend_char>
    1bb6:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <counter>
    1bba:	8f 5f       	subi	r24, 0xFF	; 255
    1bbc:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <counter>
    1bc0:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <counter>
    1bc4:	88 2f       	mov	r24, r24
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	29 81       	ldd	r18, Y+1	; 0x01
    1bca:	3a 81       	ldd	r19, Y+2	; 0x02
    1bcc:	82 0f       	add	r24, r18
    1bce:	93 1f       	adc	r25, r19
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	80 81       	ld	r24, Z
    1bd4:	88 23       	and	r24, r24
    1bd6:	19 f7       	brne	.-58     	; 0x1b9e <LCD_vSend_string+0x14>
    1bd8:	00 00       	nop
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	08 95       	ret

00001be4 <LCD_movecursor>:

void LCD_movecursor(c8 row, c8 coloumn)
{
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	61 97       	sbiw	r28, 0x11	; 17
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	de bf       	out	0x3e, r29	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	cd bf       	out	0x3d, r28	; 61
    1bf8:	88 8b       	std	Y+16, r24	; 0x10
    1bfa:	69 8b       	std	Y+17, r22	; 0x11
	char data = 0;
    1bfc:	19 82       	std	Y+1, r1	; 0x01
	
	if (row > 2 || row < 1 || coloumn > 16 || coloumn < 1)
    1bfe:	88 89       	ldd	r24, Y+16	; 0x10
    1c00:	83 30       	cpi	r24, 0x03	; 3
    1c02:	48 f4       	brcc	.+18     	; 0x1c16 <LCD_movecursor+0x32>
    1c04:	88 89       	ldd	r24, Y+16	; 0x10
    1c06:	88 23       	and	r24, r24
    1c08:	31 f0       	breq	.+12     	; 0x1c16 <LCD_movecursor+0x32>
    1c0a:	89 89       	ldd	r24, Y+17	; 0x11
    1c0c:	81 31       	cpi	r24, 0x11	; 17
    1c0e:	18 f4       	brcc	.+6      	; 0x1c16 <LCD_movecursor+0x32>
    1c10:	89 89       	ldd	r24, Y+17	; 0x11
    1c12:	88 23       	and	r24, r24
    1c14:	19 f4       	brne	.+6      	; 0x1c1c <LCD_movecursor+0x38>
	{
		data = 0x80;
    1c16:	80 e8       	ldi	r24, 0x80	; 128
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	0d c0       	rjmp	.+26     	; 0x1c36 <LCD_movecursor+0x52>
	}
	else if (row == 1)
    1c1c:	88 89       	ldd	r24, Y+16	; 0x10
    1c1e:	81 30       	cpi	r24, 0x01	; 1
    1c20:	21 f4       	brne	.+8      	; 0x1c2a <LCD_movecursor+0x46>
	{
		data = 0x80 + coloumn - 1;
    1c22:	89 89       	ldd	r24, Y+17	; 0x11
    1c24:	81 58       	subi	r24, 0x81	; 129
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	06 c0       	rjmp	.+12     	; 0x1c36 <LCD_movecursor+0x52>
	}
	else if (row == 2)
    1c2a:	88 89       	ldd	r24, Y+16	; 0x10
    1c2c:	82 30       	cpi	r24, 0x02	; 2
    1c2e:	19 f4       	brne	.+6      	; 0x1c36 <LCD_movecursor+0x52>
	{
		data = 0xc0 + coloumn - 1;
    1c30:	89 89       	ldd	r24, Y+17	; 0x11
    1c32:	81 54       	subi	r24, 0x41	; 65
    1c34:	89 83       	std	Y+1, r24	; 0x01
	}
	
	LCD_vSend_cmd(data);
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	0e 94 85 0c 	call	0x190a	; 0x190a <LCD_vSend_cmd>
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	a0 e8       	ldi	r26, 0x80	; 128
    1c42:	bf e3       	ldi	r27, 0x3F	; 63
    1c44:	8a 83       	std	Y+2, r24	; 0x02
    1c46:	9b 83       	std	Y+3, r25	; 0x03
    1c48:	ac 83       	std	Y+4, r26	; 0x04
    1c4a:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	4a e7       	ldi	r20, 0x7A	; 122
    1c52:	53 e4       	ldi	r21, 0x43	; 67
    1c54:	6a 81       	ldd	r22, Y+2	; 0x02
    1c56:	7b 81       	ldd	r23, Y+3	; 0x03
    1c58:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5c:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	8e 83       	std	Y+6, r24	; 0x06
    1c66:	9f 83       	std	Y+7, r25	; 0x07
    1c68:	a8 87       	std	Y+8, r26	; 0x08
    1c6a:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e8       	ldi	r20, 0x80	; 128
    1c72:	5f e3       	ldi	r21, 0x3F	; 63
    1c74:	6e 81       	ldd	r22, Y+6	; 0x06
    1c76:	7f 81       	ldd	r23, Y+7	; 0x07
    1c78:	88 85       	ldd	r24, Y+8	; 0x08
    1c7a:	99 85       	ldd	r25, Y+9	; 0x09
    1c7c:	0e 94 2c 13 	call	0x2658	; 0x2658 <__cmpsf2>
    1c80:	88 23       	and	r24, r24
    1c82:	2c f4       	brge	.+10     	; 0x1c8e <LCD_movecursor+0xaa>
		__ticks = 1;
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	9b 87       	std	Y+11, r25	; 0x0b
    1c8a:	8a 87       	std	Y+10, r24	; 0x0a
    1c8c:	3f c0       	rjmp	.+126    	; 0x1d0c <LCD_movecursor+0x128>
	else if (__tmp > 65535)
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	3f ef       	ldi	r19, 0xFF	; 255
    1c92:	4f e7       	ldi	r20, 0x7F	; 127
    1c94:	57 e4       	ldi	r21, 0x47	; 71
    1c96:	6e 81       	ldd	r22, Y+6	; 0x06
    1c98:	7f 81       	ldd	r23, Y+7	; 0x07
    1c9a:	88 85       	ldd	r24, Y+8	; 0x08
    1c9c:	99 85       	ldd	r25, Y+9	; 0x09
    1c9e:	0e 94 84 14 	call	0x2908	; 0x2908 <__gesf2>
    1ca2:	18 16       	cp	r1, r24
    1ca4:	4c f5       	brge	.+82     	; 0x1cf8 <LCD_movecursor+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e2       	ldi	r20, 0x20	; 32
    1cac:	51 e4       	ldi	r21, 0x41	; 65
    1cae:	6a 81       	ldd	r22, Y+2	; 0x02
    1cb0:	7b 81       	ldd	r23, Y+3	; 0x03
    1cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb6:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	bc 01       	movw	r22, r24
    1cc0:	cd 01       	movw	r24, r26
    1cc2:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	9b 87       	std	Y+11, r25	; 0x0b
    1ccc:	8a 87       	std	Y+10, r24	; 0x0a
    1cce:	0f c0       	rjmp	.+30     	; 0x1cee <LCD_movecursor+0x10a>
    1cd0:	89 e1       	ldi	r24, 0x19	; 25
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	9d 87       	std	Y+13, r25	; 0x0d
    1cd6:	8c 87       	std	Y+12, r24	; 0x0c
    1cd8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cda:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	f1 f7       	brne	.-4      	; 0x1cdc <LCD_movecursor+0xf8>
    1ce0:	9d 87       	std	Y+13, r25	; 0x0d
    1ce2:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ce6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	9b 87       	std	Y+11, r25	; 0x0b
    1cec:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cee:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cf0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cf2:	89 2b       	or	r24, r25
    1cf4:	69 f7       	brne	.-38     	; 0x1cd0 <LCD_movecursor+0xec>
	_delay_ms(1);
    1cf6:	14 c0       	rjmp	.+40     	; 0x1d20 <LCD_movecursor+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf8:	6e 81       	ldd	r22, Y+6	; 0x06
    1cfa:	7f 81       	ldd	r23, Y+7	; 0x07
    1cfc:	88 85       	ldd	r24, Y+8	; 0x08
    1cfe:	99 85       	ldd	r25, Y+9	; 0x09
    1d00:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	9b 87       	std	Y+11, r25	; 0x0b
    1d0a:	8a 87       	std	Y+10, r24	; 0x0a
    1d0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d10:	9f 87       	std	Y+15, r25	; 0x0f
    1d12:	8e 87       	std	Y+14, r24	; 0x0e
    1d14:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d16:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	f1 f7       	brne	.-4      	; 0x1d18 <LCD_movecursor+0x134>
    1d1c:	9f 87       	std	Y+15, r25	; 0x0f
    1d1e:	8e 87       	std	Y+14, r24	; 0x0e
    1d20:	00 00       	nop
    1d22:	61 96       	adiw	r28, 0x11	; 17
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	f8 94       	cli
    1d28:	de bf       	out	0x3e, r29	; 62
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	cd bf       	out	0x3d, r28	; 61
    1d2e:	df 91       	pop	r29
    1d30:	cf 91       	pop	r28
    1d32:	08 95       	ret

00001d34 <initADC0>:
#include "ADC.h"

void initADC0(void)
{
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
	// Select the required channel
	ADMUX = 0x00;
    1d3c:	87 e2       	ldi	r24, 0x27	; 39
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	fc 01       	movw	r30, r24
    1d42:	10 82       	st	Z, r1
	ADMUX |= (1U << REFS0);
    1d44:	87 e2       	ldi	r24, 0x27	; 39
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	27 e2       	ldi	r18, 0x27	; 39
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	f9 01       	movw	r30, r18
    1d4e:	20 81       	ld	r18, Z
    1d50:	20 64       	ori	r18, 0x40	; 64
    1d52:	fc 01       	movw	r30, r24
    1d54:	20 83       	st	Z, r18
	// Enable ADC, with a clock prescale of 1/128
	ADCSRA = (1U << ADEN) | (1U << ADPS2) | (1U << ADPS1) | (1U << ADPS0);
    1d56:	86 e2       	ldi	r24, 0x26	; 38
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	27 e8       	ldi	r18, 0x87	; 135
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	20 83       	st	Z, r18
}
    1d60:	00 00       	nop
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	08 95       	ret

00001d68 <adc_read>:

u32 adc_read(void)
{
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
	// start conversion
	ADCSRA |= (1U << ADSC);
    1d70:	86 e2       	ldi	r24, 0x26	; 38
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	26 e2       	ldi	r18, 0x26	; 38
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	f9 01       	movw	r30, r18
    1d7a:	20 81       	ld	r18, Z
    1d7c:	20 64       	ori	r18, 0x40	; 64
    1d7e:	fc 01       	movw	r30, r24
    1d80:	20 83       	st	Z, r18
	
	// read from ADC, waiting for conversion to finish
	while(ADCSRA & (1U << ADSC))
    1d82:	00 00       	nop
    1d84:	86 e2       	ldi	r24, 0x26	; 38
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	fc 01       	movw	r30, r24
    1d8a:	80 81       	ld	r24, Z
    1d8c:	88 2f       	mov	r24, r24
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	80 74       	andi	r24, 0x40	; 64
    1d92:	99 27       	eor	r25, r25
    1d94:	89 2b       	or	r24, r25
    1d96:	b1 f7       	brne	.-20     	; 0x1d84 <adc_read+0x1c>
	{
		/* Do nothing */
	}
	
	return ADC;
    1d98:	84 e2       	ldi	r24, 0x24	; 36
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	80 81       	ld	r24, Z
    1da0:	91 81       	ldd	r25, Z+1	; 0x01
    1da2:	cc 01       	movw	r24, r24
    1da4:	a0 e0       	ldi	r26, 0x00	; 0
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
}
    1da8:	bc 01       	movw	r22, r24
    1daa:	cd 01       	movw	r24, r26
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	08 95       	ret

00001db2 <sampleToVolts>:

u8 sampleToVolts(u32 sample)
{
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	00 d0       	rcall	.+0      	; 0x1db8 <sampleToVolts+0x6>
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <sampleToVolts+0x8>
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
    1dbe:	69 83       	std	Y+1, r22	; 0x01
    1dc0:	7a 83       	std	Y+2, r23	; 0x02
    1dc2:	8b 83       	std	Y+3, r24	; 0x03
    1dc4:	9c 83       	std	Y+4, r25	; 0x04
	return sample * (5.0 / 1023.0);
    1dc6:	69 81       	ldd	r22, Y+1	; 0x01
    1dc8:	7a 81       	ldd	r23, Y+2	; 0x02
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dce:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__floatunsisf>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	2a e0       	ldi	r18, 0x0A	; 10
    1dd8:	38 e2       	ldi	r19, 0x28	; 40
    1dda:	40 ea       	ldi	r20, 0xA0	; 160
    1ddc:	5b e3       	ldi	r21, 0x3B	; 59
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	df 91       	pop	r29
    1e00:	cf 91       	pop	r28
    1e02:	08 95       	ret

00001e04 <DIO_vsetPINDir>:
			PORTD |= value;
			break;
		default:
			break;
	}
}
    1e04:	cf 93       	push	r28
    1e06:	df 93       	push	r29
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <DIO_vsetPINDir+0x6>
    1e0a:	1f 92       	push	r1
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	6a 83       	std	Y+2, r22	; 0x02
    1e14:	4b 83       	std	Y+3, r20	; 0x03
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	88 2f       	mov	r24, r24
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	82 34       	cpi	r24, 0x42	; 66
    1e1e:	91 05       	cpc	r25, r1
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <DIO_vsetPINDir+0x20>
    1e22:	3e c0       	rjmp	.+124    	; 0x1ea0 <DIO_vsetPINDir+0x9c>
    1e24:	83 34       	cpi	r24, 0x43	; 67
    1e26:	91 05       	cpc	r25, r1
    1e28:	24 f4       	brge	.+8      	; 0x1e32 <DIO_vsetPINDir+0x2e>
    1e2a:	81 34       	cpi	r24, 0x41	; 65
    1e2c:	91 05       	cpc	r25, r1
    1e2e:	51 f0       	breq	.+20     	; 0x1e44 <DIO_vsetPINDir+0x40>
    1e30:	c1 c0       	rjmp	.+386    	; 0x1fb4 <DIO_vsetPINDir+0x1b0>
    1e32:	83 34       	cpi	r24, 0x43	; 67
    1e34:	91 05       	cpc	r25, r1
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <DIO_vsetPINDir+0x36>
    1e38:	61 c0       	rjmp	.+194    	; 0x1efc <DIO_vsetPINDir+0xf8>
    1e3a:	84 34       	cpi	r24, 0x44	; 68
    1e3c:	91 05       	cpc	r25, r1
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <DIO_vsetPINDir+0x3e>
    1e40:	8b c0       	rjmp	.+278    	; 0x1f58 <DIO_vsetPINDir+0x154>
    1e42:	b8 c0       	rjmp	.+368    	; 0x1fb4 <DIO_vsetPINDir+0x1b0>
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	a9 f4       	brne	.+42     	; 0x1e74 <DIO_vsetPINDir+0x70>
    1e4a:	8a e3       	ldi	r24, 0x3A	; 58
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	2a e3       	ldi	r18, 0x3A	; 58
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	f9 01       	movw	r30, r18
    1e54:	20 81       	ld	r18, Z
    1e56:	62 2f       	mov	r22, r18
    1e58:	2a 81       	ldd	r18, Y+2	; 0x02
    1e5a:	42 2f       	mov	r20, r18
    1e5c:	50 e0       	ldi	r21, 0x00	; 0
    1e5e:	21 e0       	ldi	r18, 0x01	; 1
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <DIO_vsetPINDir+0x64>
    1e64:	22 0f       	add	r18, r18
    1e66:	33 1f       	adc	r19, r19
    1e68:	4a 95       	dec	r20
    1e6a:	e2 f7       	brpl	.-8      	; 0x1e64 <DIO_vsetPINDir+0x60>
    1e6c:	26 2b       	or	r18, r22
    1e6e:	fc 01       	movw	r30, r24
    1e70:	20 83       	st	Z, r18
    1e72:	a0 c0       	rjmp	.+320    	; 0x1fb4 <DIO_vsetPINDir+0x1b0>
    1e74:	8a e3       	ldi	r24, 0x3A	; 58
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	2a e3       	ldi	r18, 0x3A	; 58
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	f9 01       	movw	r30, r18
    1e7e:	20 81       	ld	r18, Z
    1e80:	62 2f       	mov	r22, r18
    1e82:	2a 81       	ldd	r18, Y+2	; 0x02
    1e84:	42 2f       	mov	r20, r18
    1e86:	50 e0       	ldi	r21, 0x00	; 0
    1e88:	21 e0       	ldi	r18, 0x01	; 1
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <DIO_vsetPINDir+0x8e>
    1e8e:	22 0f       	add	r18, r18
    1e90:	33 1f       	adc	r19, r19
    1e92:	4a 95       	dec	r20
    1e94:	e2 f7       	brpl	.-8      	; 0x1e8e <DIO_vsetPINDir+0x8a>
    1e96:	20 95       	com	r18
    1e98:	26 23       	and	r18, r22
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	20 83       	st	Z, r18
    1e9e:	8a c0       	rjmp	.+276    	; 0x1fb4 <DIO_vsetPINDir+0x1b0>
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	81 30       	cpi	r24, 0x01	; 1
    1ea4:	a9 f4       	brne	.+42     	; 0x1ed0 <DIO_vsetPINDir+0xcc>
    1ea6:	87 e3       	ldi	r24, 0x37	; 55
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	27 e3       	ldi	r18, 0x37	; 55
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	f9 01       	movw	r30, r18
    1eb0:	20 81       	ld	r18, Z
    1eb2:	62 2f       	mov	r22, r18
    1eb4:	2a 81       	ldd	r18, Y+2	; 0x02
    1eb6:	42 2f       	mov	r20, r18
    1eb8:	50 e0       	ldi	r21, 0x00	; 0
    1eba:	21 e0       	ldi	r18, 0x01	; 1
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	02 c0       	rjmp	.+4      	; 0x1ec4 <DIO_vsetPINDir+0xc0>
    1ec0:	22 0f       	add	r18, r18
    1ec2:	33 1f       	adc	r19, r19
    1ec4:	4a 95       	dec	r20
    1ec6:	e2 f7       	brpl	.-8      	; 0x1ec0 <DIO_vsetPINDir+0xbc>
    1ec8:	26 2b       	or	r18, r22
    1eca:	fc 01       	movw	r30, r24
    1ecc:	20 83       	st	Z, r18
    1ece:	72 c0       	rjmp	.+228    	; 0x1fb4 <DIO_vsetPINDir+0x1b0>
    1ed0:	87 e3       	ldi	r24, 0x37	; 55
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	27 e3       	ldi	r18, 0x37	; 55
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	f9 01       	movw	r30, r18
    1eda:	20 81       	ld	r18, Z
    1edc:	62 2f       	mov	r22, r18
    1ede:	2a 81       	ldd	r18, Y+2	; 0x02
    1ee0:	42 2f       	mov	r20, r18
    1ee2:	50 e0       	ldi	r21, 0x00	; 0
    1ee4:	21 e0       	ldi	r18, 0x01	; 1
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <DIO_vsetPINDir+0xea>
    1eea:	22 0f       	add	r18, r18
    1eec:	33 1f       	adc	r19, r19
    1eee:	4a 95       	dec	r20
    1ef0:	e2 f7       	brpl	.-8      	; 0x1eea <DIO_vsetPINDir+0xe6>
    1ef2:	20 95       	com	r18
    1ef4:	26 23       	and	r18, r22
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	20 83       	st	Z, r18
    1efa:	5c c0       	rjmp	.+184    	; 0x1fb4 <DIO_vsetPINDir+0x1b0>
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	81 30       	cpi	r24, 0x01	; 1
    1f00:	a9 f4       	brne	.+42     	; 0x1f2c <DIO_vsetPINDir+0x128>
    1f02:	84 e3       	ldi	r24, 0x34	; 52
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	24 e3       	ldi	r18, 0x34	; 52
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	f9 01       	movw	r30, r18
    1f0c:	20 81       	ld	r18, Z
    1f0e:	62 2f       	mov	r22, r18
    1f10:	2a 81       	ldd	r18, Y+2	; 0x02
    1f12:	42 2f       	mov	r20, r18
    1f14:	50 e0       	ldi	r21, 0x00	; 0
    1f16:	21 e0       	ldi	r18, 0x01	; 1
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <DIO_vsetPINDir+0x11c>
    1f1c:	22 0f       	add	r18, r18
    1f1e:	33 1f       	adc	r19, r19
    1f20:	4a 95       	dec	r20
    1f22:	e2 f7       	brpl	.-8      	; 0x1f1c <DIO_vsetPINDir+0x118>
    1f24:	26 2b       	or	r18, r22
    1f26:	fc 01       	movw	r30, r24
    1f28:	20 83       	st	Z, r18
    1f2a:	44 c0       	rjmp	.+136    	; 0x1fb4 <DIO_vsetPINDir+0x1b0>
    1f2c:	84 e3       	ldi	r24, 0x34	; 52
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	24 e3       	ldi	r18, 0x34	; 52
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	f9 01       	movw	r30, r18
    1f36:	20 81       	ld	r18, Z
    1f38:	62 2f       	mov	r22, r18
    1f3a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f3c:	42 2f       	mov	r20, r18
    1f3e:	50 e0       	ldi	r21, 0x00	; 0
    1f40:	21 e0       	ldi	r18, 0x01	; 1
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <DIO_vsetPINDir+0x146>
    1f46:	22 0f       	add	r18, r18
    1f48:	33 1f       	adc	r19, r19
    1f4a:	4a 95       	dec	r20
    1f4c:	e2 f7       	brpl	.-8      	; 0x1f46 <DIO_vsetPINDir+0x142>
    1f4e:	20 95       	com	r18
    1f50:	26 23       	and	r18, r22
    1f52:	fc 01       	movw	r30, r24
    1f54:	20 83       	st	Z, r18
    1f56:	2e c0       	rjmp	.+92     	; 0x1fb4 <DIO_vsetPINDir+0x1b0>
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	a9 f4       	brne	.+42     	; 0x1f88 <DIO_vsetPINDir+0x184>
    1f5e:	81 e3       	ldi	r24, 0x31	; 49
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	21 e3       	ldi	r18, 0x31	; 49
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	f9 01       	movw	r30, r18
    1f68:	20 81       	ld	r18, Z
    1f6a:	62 2f       	mov	r22, r18
    1f6c:	2a 81       	ldd	r18, Y+2	; 0x02
    1f6e:	42 2f       	mov	r20, r18
    1f70:	50 e0       	ldi	r21, 0x00	; 0
    1f72:	21 e0       	ldi	r18, 0x01	; 1
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <DIO_vsetPINDir+0x178>
    1f78:	22 0f       	add	r18, r18
    1f7a:	33 1f       	adc	r19, r19
    1f7c:	4a 95       	dec	r20
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <DIO_vsetPINDir+0x174>
    1f80:	26 2b       	or	r18, r22
    1f82:	fc 01       	movw	r30, r24
    1f84:	20 83       	st	Z, r18
    1f86:	15 c0       	rjmp	.+42     	; 0x1fb2 <DIO_vsetPINDir+0x1ae>
    1f88:	81 e3       	ldi	r24, 0x31	; 49
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	21 e3       	ldi	r18, 0x31	; 49
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	f9 01       	movw	r30, r18
    1f92:	20 81       	ld	r18, Z
    1f94:	62 2f       	mov	r22, r18
    1f96:	2a 81       	ldd	r18, Y+2	; 0x02
    1f98:	42 2f       	mov	r20, r18
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	21 e0       	ldi	r18, 0x01	; 1
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	02 c0       	rjmp	.+4      	; 0x1fa6 <DIO_vsetPINDir+0x1a2>
    1fa2:	22 0f       	add	r18, r18
    1fa4:	33 1f       	adc	r19, r19
    1fa6:	4a 95       	dec	r20
    1fa8:	e2 f7       	brpl	.-8      	; 0x1fa2 <DIO_vsetPINDir+0x19e>
    1faa:	20 95       	com	r18
    1fac:	26 23       	and	r18, r22
    1fae:	fc 01       	movw	r30, r24
    1fb0:	20 83       	st	Z, r18
    1fb2:	00 00       	nop
    1fb4:	00 00       	nop
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	df 91       	pop	r29
    1fbe:	cf 91       	pop	r28
    1fc0:	08 95       	ret

00001fc2 <DIO_write>:
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <DIO_write+0x6>
    1fc8:	1f 92       	push	r1
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	89 83       	std	Y+1, r24	; 0x01
    1fd0:	6a 83       	std	Y+2, r22	; 0x02
    1fd2:	4b 83       	std	Y+3, r20	; 0x03
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	88 2f       	mov	r24, r24
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	82 34       	cpi	r24, 0x42	; 66
    1fdc:	91 05       	cpc	r25, r1
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <DIO_write+0x20>
    1fe0:	3e c0       	rjmp	.+124    	; 0x205e <DIO_write+0x9c>
    1fe2:	83 34       	cpi	r24, 0x43	; 67
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	24 f4       	brge	.+8      	; 0x1ff0 <DIO_write+0x2e>
    1fe8:	81 34       	cpi	r24, 0x41	; 65
    1fea:	91 05       	cpc	r25, r1
    1fec:	51 f0       	breq	.+20     	; 0x2002 <DIO_write+0x40>
    1fee:	c1 c0       	rjmp	.+386    	; 0x2172 <DIO_write+0x1b0>
    1ff0:	83 34       	cpi	r24, 0x43	; 67
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <DIO_write+0x36>
    1ff6:	61 c0       	rjmp	.+194    	; 0x20ba <DIO_write+0xf8>
    1ff8:	84 34       	cpi	r24, 0x44	; 68
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <DIO_write+0x3e>
    1ffe:	8b c0       	rjmp	.+278    	; 0x2116 <DIO_write+0x154>
    2000:	b8 c0       	rjmp	.+368    	; 0x2172 <DIO_write+0x1b0>
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	81 30       	cpi	r24, 0x01	; 1
    2006:	a9 f4       	brne	.+42     	; 0x2032 <DIO_write+0x70>
    2008:	8b e3       	ldi	r24, 0x3B	; 59
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	2b e3       	ldi	r18, 0x3B	; 59
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	f9 01       	movw	r30, r18
    2012:	20 81       	ld	r18, Z
    2014:	62 2f       	mov	r22, r18
    2016:	2a 81       	ldd	r18, Y+2	; 0x02
    2018:	42 2f       	mov	r20, r18
    201a:	50 e0       	ldi	r21, 0x00	; 0
    201c:	21 e0       	ldi	r18, 0x01	; 1
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <DIO_write+0x64>
    2022:	22 0f       	add	r18, r18
    2024:	33 1f       	adc	r19, r19
    2026:	4a 95       	dec	r20
    2028:	e2 f7       	brpl	.-8      	; 0x2022 <DIO_write+0x60>
    202a:	26 2b       	or	r18, r22
    202c:	fc 01       	movw	r30, r24
    202e:	20 83       	st	Z, r18
    2030:	a0 c0       	rjmp	.+320    	; 0x2172 <DIO_write+0x1b0>
    2032:	8b e3       	ldi	r24, 0x3B	; 59
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	2b e3       	ldi	r18, 0x3B	; 59
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	f9 01       	movw	r30, r18
    203c:	20 81       	ld	r18, Z
    203e:	62 2f       	mov	r22, r18
    2040:	2a 81       	ldd	r18, Y+2	; 0x02
    2042:	42 2f       	mov	r20, r18
    2044:	50 e0       	ldi	r21, 0x00	; 0
    2046:	21 e0       	ldi	r18, 0x01	; 1
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <DIO_write+0x8e>
    204c:	22 0f       	add	r18, r18
    204e:	33 1f       	adc	r19, r19
    2050:	4a 95       	dec	r20
    2052:	e2 f7       	brpl	.-8      	; 0x204c <DIO_write+0x8a>
    2054:	20 95       	com	r18
    2056:	26 23       	and	r18, r22
    2058:	fc 01       	movw	r30, r24
    205a:	20 83       	st	Z, r18
    205c:	8a c0       	rjmp	.+276    	; 0x2172 <DIO_write+0x1b0>
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	81 30       	cpi	r24, 0x01	; 1
    2062:	a9 f4       	brne	.+42     	; 0x208e <DIO_write+0xcc>
    2064:	88 e3       	ldi	r24, 0x38	; 56
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	28 e3       	ldi	r18, 0x38	; 56
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	f9 01       	movw	r30, r18
    206e:	20 81       	ld	r18, Z
    2070:	62 2f       	mov	r22, r18
    2072:	2a 81       	ldd	r18, Y+2	; 0x02
    2074:	42 2f       	mov	r20, r18
    2076:	50 e0       	ldi	r21, 0x00	; 0
    2078:	21 e0       	ldi	r18, 0x01	; 1
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <DIO_write+0xc0>
    207e:	22 0f       	add	r18, r18
    2080:	33 1f       	adc	r19, r19
    2082:	4a 95       	dec	r20
    2084:	e2 f7       	brpl	.-8      	; 0x207e <DIO_write+0xbc>
    2086:	26 2b       	or	r18, r22
    2088:	fc 01       	movw	r30, r24
    208a:	20 83       	st	Z, r18
    208c:	72 c0       	rjmp	.+228    	; 0x2172 <DIO_write+0x1b0>
    208e:	88 e3       	ldi	r24, 0x38	; 56
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	28 e3       	ldi	r18, 0x38	; 56
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	f9 01       	movw	r30, r18
    2098:	20 81       	ld	r18, Z
    209a:	62 2f       	mov	r22, r18
    209c:	2a 81       	ldd	r18, Y+2	; 0x02
    209e:	42 2f       	mov	r20, r18
    20a0:	50 e0       	ldi	r21, 0x00	; 0
    20a2:	21 e0       	ldi	r18, 0x01	; 1
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <DIO_write+0xea>
    20a8:	22 0f       	add	r18, r18
    20aa:	33 1f       	adc	r19, r19
    20ac:	4a 95       	dec	r20
    20ae:	e2 f7       	brpl	.-8      	; 0x20a8 <DIO_write+0xe6>
    20b0:	20 95       	com	r18
    20b2:	26 23       	and	r18, r22
    20b4:	fc 01       	movw	r30, r24
    20b6:	20 83       	st	Z, r18
    20b8:	5c c0       	rjmp	.+184    	; 0x2172 <DIO_write+0x1b0>
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	81 30       	cpi	r24, 0x01	; 1
    20be:	a9 f4       	brne	.+42     	; 0x20ea <DIO_write+0x128>
    20c0:	85 e3       	ldi	r24, 0x35	; 53
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	25 e3       	ldi	r18, 0x35	; 53
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	f9 01       	movw	r30, r18
    20ca:	20 81       	ld	r18, Z
    20cc:	62 2f       	mov	r22, r18
    20ce:	2a 81       	ldd	r18, Y+2	; 0x02
    20d0:	42 2f       	mov	r20, r18
    20d2:	50 e0       	ldi	r21, 0x00	; 0
    20d4:	21 e0       	ldi	r18, 0x01	; 1
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <DIO_write+0x11c>
    20da:	22 0f       	add	r18, r18
    20dc:	33 1f       	adc	r19, r19
    20de:	4a 95       	dec	r20
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <DIO_write+0x118>
    20e2:	26 2b       	or	r18, r22
    20e4:	fc 01       	movw	r30, r24
    20e6:	20 83       	st	Z, r18
    20e8:	44 c0       	rjmp	.+136    	; 0x2172 <DIO_write+0x1b0>
    20ea:	85 e3       	ldi	r24, 0x35	; 53
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	25 e3       	ldi	r18, 0x35	; 53
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	f9 01       	movw	r30, r18
    20f4:	20 81       	ld	r18, Z
    20f6:	62 2f       	mov	r22, r18
    20f8:	2a 81       	ldd	r18, Y+2	; 0x02
    20fa:	42 2f       	mov	r20, r18
    20fc:	50 e0       	ldi	r21, 0x00	; 0
    20fe:	21 e0       	ldi	r18, 0x01	; 1
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <DIO_write+0x146>
    2104:	22 0f       	add	r18, r18
    2106:	33 1f       	adc	r19, r19
    2108:	4a 95       	dec	r20
    210a:	e2 f7       	brpl	.-8      	; 0x2104 <DIO_write+0x142>
    210c:	20 95       	com	r18
    210e:	26 23       	and	r18, r22
    2110:	fc 01       	movw	r30, r24
    2112:	20 83       	st	Z, r18
    2114:	2e c0       	rjmp	.+92     	; 0x2172 <DIO_write+0x1b0>
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	81 30       	cpi	r24, 0x01	; 1
    211a:	a9 f4       	brne	.+42     	; 0x2146 <DIO_write+0x184>
    211c:	82 e3       	ldi	r24, 0x32	; 50
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	22 e3       	ldi	r18, 0x32	; 50
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	f9 01       	movw	r30, r18
    2126:	20 81       	ld	r18, Z
    2128:	62 2f       	mov	r22, r18
    212a:	2a 81       	ldd	r18, Y+2	; 0x02
    212c:	42 2f       	mov	r20, r18
    212e:	50 e0       	ldi	r21, 0x00	; 0
    2130:	21 e0       	ldi	r18, 0x01	; 1
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	02 c0       	rjmp	.+4      	; 0x213a <DIO_write+0x178>
    2136:	22 0f       	add	r18, r18
    2138:	33 1f       	adc	r19, r19
    213a:	4a 95       	dec	r20
    213c:	e2 f7       	brpl	.-8      	; 0x2136 <DIO_write+0x174>
    213e:	26 2b       	or	r18, r22
    2140:	fc 01       	movw	r30, r24
    2142:	20 83       	st	Z, r18
    2144:	15 c0       	rjmp	.+42     	; 0x2170 <DIO_write+0x1ae>
    2146:	82 e3       	ldi	r24, 0x32	; 50
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	22 e3       	ldi	r18, 0x32	; 50
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	f9 01       	movw	r30, r18
    2150:	20 81       	ld	r18, Z
    2152:	62 2f       	mov	r22, r18
    2154:	2a 81       	ldd	r18, Y+2	; 0x02
    2156:	42 2f       	mov	r20, r18
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	21 e0       	ldi	r18, 0x01	; 1
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	02 c0       	rjmp	.+4      	; 0x2164 <DIO_write+0x1a2>
    2160:	22 0f       	add	r18, r18
    2162:	33 1f       	adc	r19, r19
    2164:	4a 95       	dec	r20
    2166:	e2 f7       	brpl	.-8      	; 0x2160 <DIO_write+0x19e>
    2168:	20 95       	com	r18
    216a:	26 23       	and	r18, r22
    216c:	fc 01       	movw	r30, r24
    216e:	20 83       	st	Z, r18
    2170:	00 00       	nop
    2172:	00 00       	nop
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	df 91       	pop	r29
    217c:	cf 91       	pop	r28
    217e:	08 95       	ret

00002180 <DIO_set_port_direction>:
    2180:	cf 93       	push	r28
    2182:	df 93       	push	r29
    2184:	00 d0       	rcall	.+0      	; 0x2186 <DIO_set_port_direction+0x6>
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
    218a:	89 83       	std	Y+1, r24	; 0x01
    218c:	6a 83       	std	Y+2, r22	; 0x02
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	88 2f       	mov	r24, r24
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	82 34       	cpi	r24, 0x42	; 66
    2196:	91 05       	cpc	r25, r1
    2198:	a1 f0       	breq	.+40     	; 0x21c2 <DIO_set_port_direction+0x42>
    219a:	83 34       	cpi	r24, 0x43	; 67
    219c:	91 05       	cpc	r25, r1
    219e:	24 f4       	brge	.+8      	; 0x21a8 <DIO_set_port_direction+0x28>
    21a0:	81 34       	cpi	r24, 0x41	; 65
    21a2:	91 05       	cpc	r25, r1
    21a4:	41 f0       	breq	.+16     	; 0x21b6 <DIO_set_port_direction+0x36>
    21a6:	1f c0       	rjmp	.+62     	; 0x21e6 <DIO_set_port_direction+0x66>
    21a8:	83 34       	cpi	r24, 0x43	; 67
    21aa:	91 05       	cpc	r25, r1
    21ac:	81 f0       	breq	.+32     	; 0x21ce <DIO_set_port_direction+0x4e>
    21ae:	84 34       	cpi	r24, 0x44	; 68
    21b0:	91 05       	cpc	r25, r1
    21b2:	99 f0       	breq	.+38     	; 0x21da <DIO_set_port_direction+0x5a>
    21b4:	18 c0       	rjmp	.+48     	; 0x21e6 <DIO_set_port_direction+0x66>
    21b6:	8a e3       	ldi	r24, 0x3A	; 58
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	2a 81       	ldd	r18, Y+2	; 0x02
    21bc:	fc 01       	movw	r30, r24
    21be:	20 83       	st	Z, r18
    21c0:	12 c0       	rjmp	.+36     	; 0x21e6 <DIO_set_port_direction+0x66>
    21c2:	87 e3       	ldi	r24, 0x37	; 55
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	2a 81       	ldd	r18, Y+2	; 0x02
    21c8:	fc 01       	movw	r30, r24
    21ca:	20 83       	st	Z, r18
    21cc:	0c c0       	rjmp	.+24     	; 0x21e6 <DIO_set_port_direction+0x66>
    21ce:	84 e3       	ldi	r24, 0x34	; 52
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	2a 81       	ldd	r18, Y+2	; 0x02
    21d4:	fc 01       	movw	r30, r24
    21d6:	20 83       	st	Z, r18
    21d8:	06 c0       	rjmp	.+12     	; 0x21e6 <DIO_set_port_direction+0x66>
    21da:	81 e3       	ldi	r24, 0x31	; 49
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	2a 81       	ldd	r18, Y+2	; 0x02
    21e0:	fc 01       	movw	r30, r24
    21e2:	20 83       	st	Z, r18
    21e4:	00 00       	nop
    21e6:	00 00       	nop
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	df 91       	pop	r29
    21ee:	cf 91       	pop	r28
    21f0:	08 95       	ret

000021f2 <DIO_write_port>:
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <DIO_write_port+0x6>
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	89 83       	std	Y+1, r24	; 0x01
    21fe:	6a 83       	std	Y+2, r22	; 0x02
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	88 2f       	mov	r24, r24
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	82 34       	cpi	r24, 0x42	; 66
    2208:	91 05       	cpc	r25, r1
    220a:	a1 f0       	breq	.+40     	; 0x2234 <DIO_write_port+0x42>
    220c:	83 34       	cpi	r24, 0x43	; 67
    220e:	91 05       	cpc	r25, r1
    2210:	24 f4       	brge	.+8      	; 0x221a <DIO_write_port+0x28>
    2212:	81 34       	cpi	r24, 0x41	; 65
    2214:	91 05       	cpc	r25, r1
    2216:	41 f0       	breq	.+16     	; 0x2228 <DIO_write_port+0x36>
    2218:	1f c0       	rjmp	.+62     	; 0x2258 <DIO_write_port+0x66>
    221a:	83 34       	cpi	r24, 0x43	; 67
    221c:	91 05       	cpc	r25, r1
    221e:	81 f0       	breq	.+32     	; 0x2240 <DIO_write_port+0x4e>
    2220:	84 34       	cpi	r24, 0x44	; 68
    2222:	91 05       	cpc	r25, r1
    2224:	99 f0       	breq	.+38     	; 0x224c <DIO_write_port+0x5a>
    2226:	18 c0       	rjmp	.+48     	; 0x2258 <DIO_write_port+0x66>
    2228:	8b e3       	ldi	r24, 0x3B	; 59
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	2a 81       	ldd	r18, Y+2	; 0x02
    222e:	fc 01       	movw	r30, r24
    2230:	20 83       	st	Z, r18
    2232:	12 c0       	rjmp	.+36     	; 0x2258 <DIO_write_port+0x66>
    2234:	88 e3       	ldi	r24, 0x38	; 56
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	2a 81       	ldd	r18, Y+2	; 0x02
    223a:	fc 01       	movw	r30, r24
    223c:	20 83       	st	Z, r18
    223e:	0c c0       	rjmp	.+24     	; 0x2258 <DIO_write_port+0x66>
    2240:	85 e3       	ldi	r24, 0x35	; 53
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	2a 81       	ldd	r18, Y+2	; 0x02
    2246:	fc 01       	movw	r30, r24
    2248:	20 83       	st	Z, r18
    224a:	06 c0       	rjmp	.+12     	; 0x2258 <DIO_write_port+0x66>
    224c:	82 e3       	ldi	r24, 0x32	; 50
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	2a 81       	ldd	r18, Y+2	; 0x02
    2252:	fc 01       	movw	r30, r24
    2254:	20 83       	st	Z, r18
    2256:	00 00       	nop
    2258:	00 00       	nop
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	df 91       	pop	r29
    2260:	cf 91       	pop	r28
    2262:	08 95       	ret

00002264 <write_high_nibble>:

void write_high_nibble(u8 portname, u8 value)
{
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
    2268:	00 d0       	rcall	.+0      	; 0x226a <write_high_nibble+0x6>
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
    226e:	89 83       	std	Y+1, r24	; 0x01
    2270:	6a 83       	std	Y+2, r22	; 0x02
	value <<= 4;
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	82 95       	swap	r24
    2276:	80 7f       	andi	r24, 0xF0	; 240
    2278:	8a 83       	std	Y+2, r24	; 0x02
	
	switch(portname)
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	88 2f       	mov	r24, r24
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	82 34       	cpi	r24, 0x42	; 66
    2282:	91 05       	cpc	r25, r1
    2284:	11 f1       	breq	.+68     	; 0x22ca <write_high_nibble+0x66>
    2286:	83 34       	cpi	r24, 0x43	; 67
    2288:	91 05       	cpc	r25, r1
    228a:	24 f4       	brge	.+8      	; 0x2294 <write_high_nibble+0x30>
    228c:	81 34       	cpi	r24, 0x41	; 65
    228e:	91 05       	cpc	r25, r1
    2290:	41 f0       	breq	.+16     	; 0x22a2 <write_high_nibble+0x3e>
		case 'D':
			PORTD &= 0x0f;
			PORTD |= value;
			break;
		default:
			break;
    2292:	57 c0       	rjmp	.+174    	; 0x2342 <write_high_nibble+0xde>

void write_high_nibble(u8 portname, u8 value)
{
	value <<= 4;
	
	switch(portname)
    2294:	83 34       	cpi	r24, 0x43	; 67
    2296:	91 05       	cpc	r25, r1
    2298:	61 f1       	breq	.+88     	; 0x22f2 <write_high_nibble+0x8e>
    229a:	84 34       	cpi	r24, 0x44	; 68
    229c:	91 05       	cpc	r25, r1
    229e:	e9 f1       	breq	.+122    	; 0x231a <write_high_nibble+0xb6>
		case 'D':
			PORTD &= 0x0f;
			PORTD |= value;
			break;
		default:
			break;
    22a0:	50 c0       	rjmp	.+160    	; 0x2342 <write_high_nibble+0xde>
	value <<= 4;
	
	switch(portname)
	{
		case 'A':
			PORTA &= 0x0f;
    22a2:	8b e3       	ldi	r24, 0x3B	; 59
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	2b e3       	ldi	r18, 0x3B	; 59
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	f9 01       	movw	r30, r18
    22ac:	20 81       	ld	r18, Z
    22ae:	2f 70       	andi	r18, 0x0F	; 15
    22b0:	fc 01       	movw	r30, r24
    22b2:	20 83       	st	Z, r18
			PORTA |= value;
    22b4:	8b e3       	ldi	r24, 0x3B	; 59
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	2b e3       	ldi	r18, 0x3B	; 59
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	f9 01       	movw	r30, r18
    22be:	30 81       	ld	r19, Z
    22c0:	2a 81       	ldd	r18, Y+2	; 0x02
    22c2:	23 2b       	or	r18, r19
    22c4:	fc 01       	movw	r30, r24
    22c6:	20 83       	st	Z, r18
			break;
    22c8:	3c c0       	rjmp	.+120    	; 0x2342 <write_high_nibble+0xde>
		case 'B':
			PORTB &= 0x0f;
    22ca:	88 e3       	ldi	r24, 0x38	; 56
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	28 e3       	ldi	r18, 0x38	; 56
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	f9 01       	movw	r30, r18
    22d4:	20 81       	ld	r18, Z
    22d6:	2f 70       	andi	r18, 0x0F	; 15
    22d8:	fc 01       	movw	r30, r24
    22da:	20 83       	st	Z, r18
			PORTB |= value;
    22dc:	88 e3       	ldi	r24, 0x38	; 56
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	28 e3       	ldi	r18, 0x38	; 56
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	f9 01       	movw	r30, r18
    22e6:	30 81       	ld	r19, Z
    22e8:	2a 81       	ldd	r18, Y+2	; 0x02
    22ea:	23 2b       	or	r18, r19
    22ec:	fc 01       	movw	r30, r24
    22ee:	20 83       	st	Z, r18
			break;
    22f0:	28 c0       	rjmp	.+80     	; 0x2342 <write_high_nibble+0xde>
		case 'C':
			PORTC &= 0x0f;
    22f2:	85 e3       	ldi	r24, 0x35	; 53
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	25 e3       	ldi	r18, 0x35	; 53
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	f9 01       	movw	r30, r18
    22fc:	20 81       	ld	r18, Z
    22fe:	2f 70       	andi	r18, 0x0F	; 15
    2300:	fc 01       	movw	r30, r24
    2302:	20 83       	st	Z, r18
			PORTC |= value;
    2304:	85 e3       	ldi	r24, 0x35	; 53
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	25 e3       	ldi	r18, 0x35	; 53
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	f9 01       	movw	r30, r18
    230e:	30 81       	ld	r19, Z
    2310:	2a 81       	ldd	r18, Y+2	; 0x02
    2312:	23 2b       	or	r18, r19
    2314:	fc 01       	movw	r30, r24
    2316:	20 83       	st	Z, r18
			break;
    2318:	14 c0       	rjmp	.+40     	; 0x2342 <write_high_nibble+0xde>
		case 'D':
			PORTD &= 0x0f;
    231a:	82 e3       	ldi	r24, 0x32	; 50
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	22 e3       	ldi	r18, 0x32	; 50
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	f9 01       	movw	r30, r18
    2324:	20 81       	ld	r18, Z
    2326:	2f 70       	andi	r18, 0x0F	; 15
    2328:	fc 01       	movw	r30, r24
    232a:	20 83       	st	Z, r18
			PORTD |= value;
    232c:	82 e3       	ldi	r24, 0x32	; 50
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	22 e3       	ldi	r18, 0x32	; 50
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	f9 01       	movw	r30, r18
    2336:	30 81       	ld	r19, Z
    2338:	2a 81       	ldd	r18, Y+2	; 0x02
    233a:	23 2b       	or	r18, r19
    233c:	fc 01       	movw	r30, r24
    233e:	20 83       	st	Z, r18
			break;
    2340:	00 00       	nop
		default:
			break;
	}
    2342:	00 00       	nop
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	08 95       	ret

0000234e <SPI_masterInit>:
#include "SPI.h"

void SPI_masterInit(void)
{
    234e:	cf 93       	push	r28
    2350:	df 93       	push	r29
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
	/* Enable MOSI, SCK and SS Output */
	DDRB = (1 << MOSI) | (1 << SCK) | (1 << SS);
    2356:	87 e3       	ldi	r24, 0x37	; 55
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	20 eb       	ldi	r18, 0xB0	; 176
    235c:	fc 01       	movw	r30, r24
    235e:	20 83       	st	Z, r18
	
	/* Enable Master Mode */
	SET_BIT(SPCR, MSTR);
    2360:	8d e2       	ldi	r24, 0x2D	; 45
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	2d e2       	ldi	r18, 0x2D	; 45
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	f9 01       	movw	r30, r18
    236a:	20 81       	ld	r18, Z
    236c:	20 61       	ori	r18, 0x10	; 16
    236e:	fc 01       	movw	r30, r24
    2370:	20 83       	st	Z, r18
	/* Set clock to fosc/16*/
	SET_BIT(SPCR, SPR0);
    2372:	8d e2       	ldi	r24, 0x2D	; 45
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	2d e2       	ldi	r18, 0x2D	; 45
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	f9 01       	movw	r30, r18
    237c:	20 81       	ld	r18, Z
    237e:	21 60       	ori	r18, 0x01	; 1
    2380:	fc 01       	movw	r30, r24
    2382:	20 83       	st	Z, r18
	SET_BIT(SPCR, SPR1);
    2384:	8d e2       	ldi	r24, 0x2D	; 45
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	2d e2       	ldi	r18, 0x2D	; 45
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	f9 01       	movw	r30, r18
    238e:	20 81       	ld	r18, Z
    2390:	22 60       	ori	r18, 0x02	; 2
    2392:	fc 01       	movw	r30, r24
    2394:	20 83       	st	Z, r18
	SET_BIT(SPCR, CPHA);
    2396:	8d e2       	ldi	r24, 0x2D	; 45
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	2d e2       	ldi	r18, 0x2D	; 45
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	f9 01       	movw	r30, r18
    23a0:	20 81       	ld	r18, Z
    23a2:	24 60       	ori	r18, 0x04	; 4
    23a4:	fc 01       	movw	r30, r24
    23a6:	20 83       	st	Z, r18
	/* Enable SPI */
	SET_BIT(SPCR, SPE);
    23a8:	8d e2       	ldi	r24, 0x2D	; 45
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	2d e2       	ldi	r18, 0x2D	; 45
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	f9 01       	movw	r30, r18
    23b2:	20 81       	ld	r18, Z
    23b4:	20 64       	ori	r18, 0x40	; 64
    23b6:	fc 01       	movw	r30, r24
    23b8:	20 83       	st	Z, r18
	/* Enable interrupt */
	SET_BIT(SPCR, SPIE);
    23ba:	8d e2       	ldi	r24, 0x2D	; 45
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	2d e2       	ldi	r18, 0x2D	; 45
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	f9 01       	movw	r30, r18
    23c4:	20 81       	ld	r18, Z
    23c6:	20 68       	ori	r18, 0x80	; 128
    23c8:	fc 01       	movw	r30, r24
    23ca:	20 83       	st	Z, r18
}
    23cc:	00 00       	nop
    23ce:	df 91       	pop	r29
    23d0:	cf 91       	pop	r28
    23d2:	08 95       	ret

000023d4 <SPI_masterTransmit>:

void SPI_masterTransmit(c8 data)
{
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	1f 92       	push	r1
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
    23de:	89 83       	std	Y+1, r24	; 0x01
	/* Start the Transmission */
	SPDR = data;
    23e0:	8f e2       	ldi	r24, 0x2F	; 47
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	29 81       	ldd	r18, Y+1	; 0x01
    23e6:	fc 01       	movw	r30, r24
    23e8:	20 83       	st	Z, r18
	
	/* Wait for Completion */
	while(!(SPSR & (1 << SPIF)));
    23ea:	00 00       	nop
    23ec:	8e e2       	ldi	r24, 0x2E	; 46
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	fc 01       	movw	r30, r24
    23f2:	80 81       	ld	r24, Z
    23f4:	88 23       	and	r24, r24
    23f6:	d4 f7       	brge	.-12     	; 0x23ec <SPI_masterTransmit+0x18>
}
    23f8:	00 00       	nop
    23fa:	0f 90       	pop	r0
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	08 95       	ret

00002402 <SPI_masterReceive>:

c8 SPI_masterReceive(void)
{
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
	/* wait for the SPI buffer's full */
	while(!(SPSR & (1 << SPIF)));
    240a:	00 00       	nop
    240c:	8e e2       	ldi	r24, 0x2E	; 46
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	fc 01       	movw	r30, r24
    2412:	80 81       	ld	r24, Z
    2414:	88 23       	and	r24, r24
    2416:	d4 f7       	brge	.-12     	; 0x240c <SPI_masterReceive+0xa>
	/* return SPI buffer */
	return SPDR;
    2418:	8f e2       	ldi	r24, 0x2F	; 47
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	fc 01       	movw	r30, r24
    241e:	80 81       	ld	r24, Z
}
    2420:	df 91       	pop	r29
    2422:	cf 91       	pop	r28
    2424:	08 95       	ret

00002426 <TC72_Init>:

void TC72_Init(void)
{
    2426:	cf 93       	push	r28
    2428:	df 93       	push	r29
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	2e 97       	sbiw	r28, 0x0e	; 14
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(SPI_PORT, SS);
    243a:	88 e3       	ldi	r24, 0x38	; 56
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	28 e3       	ldi	r18, 0x38	; 56
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	f9 01       	movw	r30, r18
    2444:	20 81       	ld	r18, Z
    2446:	20 61       	ori	r18, 0x10	; 16
    2448:	fc 01       	movw	r30, r24
    244a:	20 83       	st	Z, r18
	/* Select control register */
	SPI_masterTransmit(0x80);
    244c:	80 e8       	ldi	r24, 0x80	; 128
    244e:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <SPI_masterTransmit>
	
	/* Select Continuous temperature conversion */
	SPI_masterTransmit(0x40);
    2452:	80 e4       	ldi	r24, 0x40	; 64
    2454:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <SPI_masterTransmit>
	CLR_BIT(SPI_PORT, SS);
    2458:	88 e3       	ldi	r24, 0x38	; 56
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	28 e3       	ldi	r18, 0x38	; 56
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	f9 01       	movw	r30, r18
    2462:	20 81       	ld	r18, Z
    2464:	2f 7e       	andi	r18, 0xEF	; 239
    2466:	fc 01       	movw	r30, r24
    2468:	20 83       	st	Z, r18
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	a6 e1       	ldi	r26, 0x16	; 22
    2470:	b3 e4       	ldi	r27, 0x43	; 67
    2472:	89 83       	std	Y+1, r24	; 0x01
    2474:	9a 83       	std	Y+2, r25	; 0x02
    2476:	ab 83       	std	Y+3, r26	; 0x03
    2478:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	4a e7       	ldi	r20, 0x7A	; 122
    2480:	53 e4       	ldi	r21, 0x43	; 67
    2482:	69 81       	ldd	r22, Y+1	; 0x01
    2484:	7a 81       	ldd	r23, Y+2	; 0x02
    2486:	8b 81       	ldd	r24, Y+3	; 0x03
    2488:	9c 81       	ldd	r25, Y+4	; 0x04
    248a:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	8d 83       	std	Y+5, r24	; 0x05
    2494:	9e 83       	std	Y+6, r25	; 0x06
    2496:	af 83       	std	Y+7, r26	; 0x07
    2498:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e8       	ldi	r20, 0x80	; 128
    24a0:	5f e3       	ldi	r21, 0x3F	; 63
    24a2:	6d 81       	ldd	r22, Y+5	; 0x05
    24a4:	7e 81       	ldd	r23, Y+6	; 0x06
    24a6:	8f 81       	ldd	r24, Y+7	; 0x07
    24a8:	98 85       	ldd	r25, Y+8	; 0x08
    24aa:	0e 94 2c 13 	call	0x2658	; 0x2658 <__cmpsf2>
    24ae:	88 23       	and	r24, r24
    24b0:	2c f4       	brge	.+10     	; 0x24bc <TC72_Init+0x96>
		__ticks = 1;
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	9a 87       	std	Y+10, r25	; 0x0a
    24b8:	89 87       	std	Y+9, r24	; 0x09
    24ba:	3f c0       	rjmp	.+126    	; 0x253a <TC72_Init+0x114>
	else if (__tmp > 65535)
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	3f ef       	ldi	r19, 0xFF	; 255
    24c0:	4f e7       	ldi	r20, 0x7F	; 127
    24c2:	57 e4       	ldi	r21, 0x47	; 71
    24c4:	6d 81       	ldd	r22, Y+5	; 0x05
    24c6:	7e 81       	ldd	r23, Y+6	; 0x06
    24c8:	8f 81       	ldd	r24, Y+7	; 0x07
    24ca:	98 85       	ldd	r25, Y+8	; 0x08
    24cc:	0e 94 84 14 	call	0x2908	; 0x2908 <__gesf2>
    24d0:	18 16       	cp	r1, r24
    24d2:	4c f5       	brge	.+82     	; 0x2526 <TC72_Init+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e2       	ldi	r20, 0x20	; 32
    24da:	51 e4       	ldi	r21, 0x41	; 65
    24dc:	69 81       	ldd	r22, Y+1	; 0x01
    24de:	7a 81       	ldd	r23, Y+2	; 0x02
    24e0:	8b 81       	ldd	r24, Y+3	; 0x03
    24e2:	9c 81       	ldd	r25, Y+4	; 0x04
    24e4:	0e 94 89 14 	call	0x2912	; 0x2912 <__mulsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	bc 01       	movw	r22, r24
    24ee:	cd 01       	movw	r24, r26
    24f0:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	9a 87       	std	Y+10, r25	; 0x0a
    24fa:	89 87       	std	Y+9, r24	; 0x09
    24fc:	0f c0       	rjmp	.+30     	; 0x251c <TC72_Init+0xf6>
    24fe:	89 e1       	ldi	r24, 0x19	; 25
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	9c 87       	std	Y+12, r25	; 0x0c
    2504:	8b 87       	std	Y+11, r24	; 0x0b
    2506:	8b 85       	ldd	r24, Y+11	; 0x0b
    2508:	9c 85       	ldd	r25, Y+12	; 0x0c
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	f1 f7       	brne	.-4      	; 0x250a <TC72_Init+0xe4>
    250e:	9c 87       	std	Y+12, r25	; 0x0c
    2510:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2512:	89 85       	ldd	r24, Y+9	; 0x09
    2514:	9a 85       	ldd	r25, Y+10	; 0x0a
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	9a 87       	std	Y+10, r25	; 0x0a
    251a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251c:	89 85       	ldd	r24, Y+9	; 0x09
    251e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2520:	89 2b       	or	r24, r25
    2522:	69 f7       	brne	.-38     	; 0x24fe <TC72_Init+0xd8>
	
	_delay_ms(150);
    2524:	14 c0       	rjmp	.+40     	; 0x254e <TC72_Init+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2526:	6d 81       	ldd	r22, Y+5	; 0x05
    2528:	7e 81       	ldd	r23, Y+6	; 0x06
    252a:	8f 81       	ldd	r24, Y+7	; 0x07
    252c:	98 85       	ldd	r25, Y+8	; 0x08
    252e:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fixunssfsi>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	9a 87       	std	Y+10, r25	; 0x0a
    2538:	89 87       	std	Y+9, r24	; 0x09
    253a:	89 85       	ldd	r24, Y+9	; 0x09
    253c:	9a 85       	ldd	r25, Y+10	; 0x0a
    253e:	9e 87       	std	Y+14, r25	; 0x0e
    2540:	8d 87       	std	Y+13, r24	; 0x0d
    2542:	8d 85       	ldd	r24, Y+13	; 0x0d
    2544:	9e 85       	ldd	r25, Y+14	; 0x0e
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <TC72_Init+0x120>
    254a:	9e 87       	std	Y+14, r25	; 0x0e
    254c:	8d 87       	std	Y+13, r24	; 0x0d
    254e:	00 00       	nop
    2550:	2e 96       	adiw	r28, 0x0e	; 14
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	f8 94       	cli
    2556:	de bf       	out	0x3e, r29	; 62
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	cd bf       	out	0x3d, r28	; 61
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	08 95       	ret

00002562 <main>:
#include "APPL/app.h"

int main(void)
{
    2562:	cf 93       	push	r28
    2564:	df 93       	push	r29
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
	WDT_OFF();
    256a:	0e 94 be 06 	call	0xd7c	; 0xd7c <WDT_OFF>
	Init();
    256e:	0e 94 49 00 	call	0x92	; 0x92 <Init>
	//Welcome_Screen();

	init_timer_CTC(1, 1);
    2572:	61 e0       	ldi	r22, 0x01	; 1
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	0e 94 4a 06 	call	0xc94	; 0xc94 <init_timer_CTC>
	sei();
    257a:	78 94       	sei
    while (1)
    {
		
		//schedule();
		
    }
    257c:	ff cf       	rjmp	.-2      	; 0x257c <main+0x1a>

0000257e <__subsf3>:
    257e:	50 58       	subi	r21, 0x80	; 128

00002580 <__addsf3>:
    2580:	bb 27       	eor	r27, r27
    2582:	aa 27       	eor	r26, r26
    2584:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__addsf3x>
    2588:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__fp_round>
    258c:	0e 94 3c 14 	call	0x2878	; 0x2878 <__fp_pscA>
    2590:	38 f0       	brcs	.+14     	; 0x25a0 <__addsf3+0x20>
    2592:	0e 94 43 14 	call	0x2886	; 0x2886 <__fp_pscB>
    2596:	20 f0       	brcs	.+8      	; 0x25a0 <__addsf3+0x20>
    2598:	39 f4       	brne	.+14     	; 0x25a8 <__addsf3+0x28>
    259a:	9f 3f       	cpi	r25, 0xFF	; 255
    259c:	19 f4       	brne	.+6      	; 0x25a4 <__addsf3+0x24>
    259e:	26 f4       	brtc	.+8      	; 0x25a8 <__addsf3+0x28>
    25a0:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__fp_nan>
    25a4:	0e f4       	brtc	.+2      	; 0x25a8 <__addsf3+0x28>
    25a6:	e0 95       	com	r30
    25a8:	e7 fb       	bst	r30, 7
    25aa:	0c 94 33 14 	jmp	0x2866	; 0x2866 <__fp_inf>

000025ae <__addsf3x>:
    25ae:	e9 2f       	mov	r30, r25
    25b0:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__fp_split3>
    25b4:	58 f3       	brcs	.-42     	; 0x258c <__addsf3+0xc>
    25b6:	ba 17       	cp	r27, r26
    25b8:	62 07       	cpc	r22, r18
    25ba:	73 07       	cpc	r23, r19
    25bc:	84 07       	cpc	r24, r20
    25be:	95 07       	cpc	r25, r21
    25c0:	20 f0       	brcs	.+8      	; 0x25ca <__addsf3x+0x1c>
    25c2:	79 f4       	brne	.+30     	; 0x25e2 <__addsf3x+0x34>
    25c4:	a6 f5       	brtc	.+104    	; 0x262e <__addsf3x+0x80>
    25c6:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__fp_zero>
    25ca:	0e f4       	brtc	.+2      	; 0x25ce <__addsf3x+0x20>
    25cc:	e0 95       	com	r30
    25ce:	0b 2e       	mov	r0, r27
    25d0:	ba 2f       	mov	r27, r26
    25d2:	a0 2d       	mov	r26, r0
    25d4:	0b 01       	movw	r0, r22
    25d6:	b9 01       	movw	r22, r18
    25d8:	90 01       	movw	r18, r0
    25da:	0c 01       	movw	r0, r24
    25dc:	ca 01       	movw	r24, r20
    25de:	a0 01       	movw	r20, r0
    25e0:	11 24       	eor	r1, r1
    25e2:	ff 27       	eor	r31, r31
    25e4:	59 1b       	sub	r21, r25
    25e6:	99 f0       	breq	.+38     	; 0x260e <__addsf3x+0x60>
    25e8:	59 3f       	cpi	r21, 0xF9	; 249
    25ea:	50 f4       	brcc	.+20     	; 0x2600 <__addsf3x+0x52>
    25ec:	50 3e       	cpi	r21, 0xE0	; 224
    25ee:	68 f1       	brcs	.+90     	; 0x264a <__addsf3x+0x9c>
    25f0:	1a 16       	cp	r1, r26
    25f2:	f0 40       	sbci	r31, 0x00	; 0
    25f4:	a2 2f       	mov	r26, r18
    25f6:	23 2f       	mov	r18, r19
    25f8:	34 2f       	mov	r19, r20
    25fa:	44 27       	eor	r20, r20
    25fc:	58 5f       	subi	r21, 0xF8	; 248
    25fe:	f3 cf       	rjmp	.-26     	; 0x25e6 <__addsf3x+0x38>
    2600:	46 95       	lsr	r20
    2602:	37 95       	ror	r19
    2604:	27 95       	ror	r18
    2606:	a7 95       	ror	r26
    2608:	f0 40       	sbci	r31, 0x00	; 0
    260a:	53 95       	inc	r21
    260c:	c9 f7       	brne	.-14     	; 0x2600 <__addsf3x+0x52>
    260e:	7e f4       	brtc	.+30     	; 0x262e <__addsf3x+0x80>
    2610:	1f 16       	cp	r1, r31
    2612:	ba 0b       	sbc	r27, r26
    2614:	62 0b       	sbc	r22, r18
    2616:	73 0b       	sbc	r23, r19
    2618:	84 0b       	sbc	r24, r20
    261a:	ba f0       	brmi	.+46     	; 0x264a <__addsf3x+0x9c>
    261c:	91 50       	subi	r25, 0x01	; 1
    261e:	a1 f0       	breq	.+40     	; 0x2648 <__addsf3x+0x9a>
    2620:	ff 0f       	add	r31, r31
    2622:	bb 1f       	adc	r27, r27
    2624:	66 1f       	adc	r22, r22
    2626:	77 1f       	adc	r23, r23
    2628:	88 1f       	adc	r24, r24
    262a:	c2 f7       	brpl	.-16     	; 0x261c <__addsf3x+0x6e>
    262c:	0e c0       	rjmp	.+28     	; 0x264a <__addsf3x+0x9c>
    262e:	ba 0f       	add	r27, r26
    2630:	62 1f       	adc	r22, r18
    2632:	73 1f       	adc	r23, r19
    2634:	84 1f       	adc	r24, r20
    2636:	48 f4       	brcc	.+18     	; 0x264a <__addsf3x+0x9c>
    2638:	87 95       	ror	r24
    263a:	77 95       	ror	r23
    263c:	67 95       	ror	r22
    263e:	b7 95       	ror	r27
    2640:	f7 95       	ror	r31
    2642:	9e 3f       	cpi	r25, 0xFE	; 254
    2644:	08 f0       	brcs	.+2      	; 0x2648 <__addsf3x+0x9a>
    2646:	b0 cf       	rjmp	.-160    	; 0x25a8 <__addsf3+0x28>
    2648:	93 95       	inc	r25
    264a:	88 0f       	add	r24, r24
    264c:	08 f0       	brcs	.+2      	; 0x2650 <__addsf3x+0xa2>
    264e:	99 27       	eor	r25, r25
    2650:	ee 0f       	add	r30, r30
    2652:	97 95       	ror	r25
    2654:	87 95       	ror	r24
    2656:	08 95       	ret

00002658 <__cmpsf2>:
    2658:	0e 94 0f 14 	call	0x281e	; 0x281e <__fp_cmp>
    265c:	08 f4       	brcc	.+2      	; 0x2660 <__cmpsf2+0x8>
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	08 95       	ret

00002662 <__divsf3>:
    2662:	0e 94 45 13 	call	0x268a	; 0x268a <__divsf3x>
    2666:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__fp_round>
    266a:	0e 94 43 14 	call	0x2886	; 0x2886 <__fp_pscB>
    266e:	58 f0       	brcs	.+22     	; 0x2686 <__divsf3+0x24>
    2670:	0e 94 3c 14 	call	0x2878	; 0x2878 <__fp_pscA>
    2674:	40 f0       	brcs	.+16     	; 0x2686 <__divsf3+0x24>
    2676:	29 f4       	brne	.+10     	; 0x2682 <__divsf3+0x20>
    2678:	5f 3f       	cpi	r21, 0xFF	; 255
    267a:	29 f0       	breq	.+10     	; 0x2686 <__divsf3+0x24>
    267c:	0c 94 33 14 	jmp	0x2866	; 0x2866 <__fp_inf>
    2680:	51 11       	cpse	r21, r1
    2682:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__fp_szero>
    2686:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__fp_nan>

0000268a <__divsf3x>:
    268a:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__fp_split3>
    268e:	68 f3       	brcs	.-38     	; 0x266a <__divsf3+0x8>

00002690 <__divsf3_pse>:
    2690:	99 23       	and	r25, r25
    2692:	b1 f3       	breq	.-20     	; 0x2680 <__divsf3+0x1e>
    2694:	55 23       	and	r21, r21
    2696:	91 f3       	breq	.-28     	; 0x267c <__divsf3+0x1a>
    2698:	95 1b       	sub	r25, r21
    269a:	55 0b       	sbc	r21, r21
    269c:	bb 27       	eor	r27, r27
    269e:	aa 27       	eor	r26, r26
    26a0:	62 17       	cp	r22, r18
    26a2:	73 07       	cpc	r23, r19
    26a4:	84 07       	cpc	r24, r20
    26a6:	38 f0       	brcs	.+14     	; 0x26b6 <__divsf3_pse+0x26>
    26a8:	9f 5f       	subi	r25, 0xFF	; 255
    26aa:	5f 4f       	sbci	r21, 0xFF	; 255
    26ac:	22 0f       	add	r18, r18
    26ae:	33 1f       	adc	r19, r19
    26b0:	44 1f       	adc	r20, r20
    26b2:	aa 1f       	adc	r26, r26
    26b4:	a9 f3       	breq	.-22     	; 0x26a0 <__divsf3_pse+0x10>
    26b6:	35 d0       	rcall	.+106    	; 0x2722 <__divsf3_pse+0x92>
    26b8:	0e 2e       	mov	r0, r30
    26ba:	3a f0       	brmi	.+14     	; 0x26ca <__divsf3_pse+0x3a>
    26bc:	e0 e8       	ldi	r30, 0x80	; 128
    26be:	32 d0       	rcall	.+100    	; 0x2724 <__divsf3_pse+0x94>
    26c0:	91 50       	subi	r25, 0x01	; 1
    26c2:	50 40       	sbci	r21, 0x00	; 0
    26c4:	e6 95       	lsr	r30
    26c6:	00 1c       	adc	r0, r0
    26c8:	ca f7       	brpl	.-14     	; 0x26bc <__divsf3_pse+0x2c>
    26ca:	2b d0       	rcall	.+86     	; 0x2722 <__divsf3_pse+0x92>
    26cc:	fe 2f       	mov	r31, r30
    26ce:	29 d0       	rcall	.+82     	; 0x2722 <__divsf3_pse+0x92>
    26d0:	66 0f       	add	r22, r22
    26d2:	77 1f       	adc	r23, r23
    26d4:	88 1f       	adc	r24, r24
    26d6:	bb 1f       	adc	r27, r27
    26d8:	26 17       	cp	r18, r22
    26da:	37 07       	cpc	r19, r23
    26dc:	48 07       	cpc	r20, r24
    26de:	ab 07       	cpc	r26, r27
    26e0:	b0 e8       	ldi	r27, 0x80	; 128
    26e2:	09 f0       	breq	.+2      	; 0x26e6 <__divsf3_pse+0x56>
    26e4:	bb 0b       	sbc	r27, r27
    26e6:	80 2d       	mov	r24, r0
    26e8:	bf 01       	movw	r22, r30
    26ea:	ff 27       	eor	r31, r31
    26ec:	93 58       	subi	r25, 0x83	; 131
    26ee:	5f 4f       	sbci	r21, 0xFF	; 255
    26f0:	3a f0       	brmi	.+14     	; 0x2700 <__divsf3_pse+0x70>
    26f2:	9e 3f       	cpi	r25, 0xFE	; 254
    26f4:	51 05       	cpc	r21, r1
    26f6:	78 f0       	brcs	.+30     	; 0x2716 <__divsf3_pse+0x86>
    26f8:	0c 94 33 14 	jmp	0x2866	; 0x2866 <__fp_inf>
    26fc:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__fp_szero>
    2700:	5f 3f       	cpi	r21, 0xFF	; 255
    2702:	e4 f3       	brlt	.-8      	; 0x26fc <__divsf3_pse+0x6c>
    2704:	98 3e       	cpi	r25, 0xE8	; 232
    2706:	d4 f3       	brlt	.-12     	; 0x26fc <__divsf3_pse+0x6c>
    2708:	86 95       	lsr	r24
    270a:	77 95       	ror	r23
    270c:	67 95       	ror	r22
    270e:	b7 95       	ror	r27
    2710:	f7 95       	ror	r31
    2712:	9f 5f       	subi	r25, 0xFF	; 255
    2714:	c9 f7       	brne	.-14     	; 0x2708 <__divsf3_pse+0x78>
    2716:	88 0f       	add	r24, r24
    2718:	91 1d       	adc	r25, r1
    271a:	96 95       	lsr	r25
    271c:	87 95       	ror	r24
    271e:	97 f9       	bld	r25, 7
    2720:	08 95       	ret
    2722:	e1 e0       	ldi	r30, 0x01	; 1
    2724:	66 0f       	add	r22, r22
    2726:	77 1f       	adc	r23, r23
    2728:	88 1f       	adc	r24, r24
    272a:	bb 1f       	adc	r27, r27
    272c:	62 17       	cp	r22, r18
    272e:	73 07       	cpc	r23, r19
    2730:	84 07       	cpc	r24, r20
    2732:	ba 07       	cpc	r27, r26
    2734:	20 f0       	brcs	.+8      	; 0x273e <__divsf3_pse+0xae>
    2736:	62 1b       	sub	r22, r18
    2738:	73 0b       	sbc	r23, r19
    273a:	84 0b       	sbc	r24, r20
    273c:	ba 0b       	sbc	r27, r26
    273e:	ee 1f       	adc	r30, r30
    2740:	88 f7       	brcc	.-30     	; 0x2724 <__divsf3_pse+0x94>
    2742:	e0 95       	com	r30
    2744:	08 95       	ret

00002746 <__fixunssfsi>:
    2746:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__fp_splitA>
    274a:	88 f0       	brcs	.+34     	; 0x276e <__fixunssfsi+0x28>
    274c:	9f 57       	subi	r25, 0x7F	; 127
    274e:	98 f0       	brcs	.+38     	; 0x2776 <__fixunssfsi+0x30>
    2750:	b9 2f       	mov	r27, r25
    2752:	99 27       	eor	r25, r25
    2754:	b7 51       	subi	r27, 0x17	; 23
    2756:	b0 f0       	brcs	.+44     	; 0x2784 <__fixunssfsi+0x3e>
    2758:	e1 f0       	breq	.+56     	; 0x2792 <__fixunssfsi+0x4c>
    275a:	66 0f       	add	r22, r22
    275c:	77 1f       	adc	r23, r23
    275e:	88 1f       	adc	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	1a f0       	brmi	.+6      	; 0x276a <__fixunssfsi+0x24>
    2764:	ba 95       	dec	r27
    2766:	c9 f7       	brne	.-14     	; 0x275a <__fixunssfsi+0x14>
    2768:	14 c0       	rjmp	.+40     	; 0x2792 <__fixunssfsi+0x4c>
    276a:	b1 30       	cpi	r27, 0x01	; 1
    276c:	91 f0       	breq	.+36     	; 0x2792 <__fixunssfsi+0x4c>
    276e:	0e 94 7d 14 	call	0x28fa	; 0x28fa <__fp_zero>
    2772:	b1 e0       	ldi	r27, 0x01	; 1
    2774:	08 95       	ret
    2776:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__fp_zero>
    277a:	67 2f       	mov	r22, r23
    277c:	78 2f       	mov	r23, r24
    277e:	88 27       	eor	r24, r24
    2780:	b8 5f       	subi	r27, 0xF8	; 248
    2782:	39 f0       	breq	.+14     	; 0x2792 <__fixunssfsi+0x4c>
    2784:	b9 3f       	cpi	r27, 0xF9	; 249
    2786:	cc f3       	brlt	.-14     	; 0x277a <__fixunssfsi+0x34>
    2788:	86 95       	lsr	r24
    278a:	77 95       	ror	r23
    278c:	67 95       	ror	r22
    278e:	b3 95       	inc	r27
    2790:	d9 f7       	brne	.-10     	; 0x2788 <__fixunssfsi+0x42>
    2792:	3e f4       	brtc	.+14     	; 0x27a2 <__fixunssfsi+0x5c>
    2794:	90 95       	com	r25
    2796:	80 95       	com	r24
    2798:	70 95       	com	r23
    279a:	61 95       	neg	r22
    279c:	7f 4f       	sbci	r23, 0xFF	; 255
    279e:	8f 4f       	sbci	r24, 0xFF	; 255
    27a0:	9f 4f       	sbci	r25, 0xFF	; 255
    27a2:	08 95       	ret

000027a4 <__floatunsisf>:
    27a4:	e8 94       	clt
    27a6:	09 c0       	rjmp	.+18     	; 0x27ba <__floatsisf+0x12>

000027a8 <__floatsisf>:
    27a8:	97 fb       	bst	r25, 7
    27aa:	3e f4       	brtc	.+14     	; 0x27ba <__floatsisf+0x12>
    27ac:	90 95       	com	r25
    27ae:	80 95       	com	r24
    27b0:	70 95       	com	r23
    27b2:	61 95       	neg	r22
    27b4:	7f 4f       	sbci	r23, 0xFF	; 255
    27b6:	8f 4f       	sbci	r24, 0xFF	; 255
    27b8:	9f 4f       	sbci	r25, 0xFF	; 255
    27ba:	99 23       	and	r25, r25
    27bc:	a9 f0       	breq	.+42     	; 0x27e8 <__floatsisf+0x40>
    27be:	f9 2f       	mov	r31, r25
    27c0:	96 e9       	ldi	r25, 0x96	; 150
    27c2:	bb 27       	eor	r27, r27
    27c4:	93 95       	inc	r25
    27c6:	f6 95       	lsr	r31
    27c8:	87 95       	ror	r24
    27ca:	77 95       	ror	r23
    27cc:	67 95       	ror	r22
    27ce:	b7 95       	ror	r27
    27d0:	f1 11       	cpse	r31, r1
    27d2:	f8 cf       	rjmp	.-16     	; 0x27c4 <__floatsisf+0x1c>
    27d4:	fa f4       	brpl	.+62     	; 0x2814 <__floatsisf+0x6c>
    27d6:	bb 0f       	add	r27, r27
    27d8:	11 f4       	brne	.+4      	; 0x27de <__floatsisf+0x36>
    27da:	60 ff       	sbrs	r22, 0
    27dc:	1b c0       	rjmp	.+54     	; 0x2814 <__floatsisf+0x6c>
    27de:	6f 5f       	subi	r22, 0xFF	; 255
    27e0:	7f 4f       	sbci	r23, 0xFF	; 255
    27e2:	8f 4f       	sbci	r24, 0xFF	; 255
    27e4:	9f 4f       	sbci	r25, 0xFF	; 255
    27e6:	16 c0       	rjmp	.+44     	; 0x2814 <__floatsisf+0x6c>
    27e8:	88 23       	and	r24, r24
    27ea:	11 f0       	breq	.+4      	; 0x27f0 <__floatsisf+0x48>
    27ec:	96 e9       	ldi	r25, 0x96	; 150
    27ee:	11 c0       	rjmp	.+34     	; 0x2812 <__floatsisf+0x6a>
    27f0:	77 23       	and	r23, r23
    27f2:	21 f0       	breq	.+8      	; 0x27fc <__floatsisf+0x54>
    27f4:	9e e8       	ldi	r25, 0x8E	; 142
    27f6:	87 2f       	mov	r24, r23
    27f8:	76 2f       	mov	r23, r22
    27fa:	05 c0       	rjmp	.+10     	; 0x2806 <__floatsisf+0x5e>
    27fc:	66 23       	and	r22, r22
    27fe:	71 f0       	breq	.+28     	; 0x281c <__floatsisf+0x74>
    2800:	96 e8       	ldi	r25, 0x86	; 134
    2802:	86 2f       	mov	r24, r22
    2804:	70 e0       	ldi	r23, 0x00	; 0
    2806:	60 e0       	ldi	r22, 0x00	; 0
    2808:	2a f0       	brmi	.+10     	; 0x2814 <__floatsisf+0x6c>
    280a:	9a 95       	dec	r25
    280c:	66 0f       	add	r22, r22
    280e:	77 1f       	adc	r23, r23
    2810:	88 1f       	adc	r24, r24
    2812:	da f7       	brpl	.-10     	; 0x280a <__floatsisf+0x62>
    2814:	88 0f       	add	r24, r24
    2816:	96 95       	lsr	r25
    2818:	87 95       	ror	r24
    281a:	97 f9       	bld	r25, 7
    281c:	08 95       	ret

0000281e <__fp_cmp>:
    281e:	99 0f       	add	r25, r25
    2820:	00 08       	sbc	r0, r0
    2822:	55 0f       	add	r21, r21
    2824:	aa 0b       	sbc	r26, r26
    2826:	e0 e8       	ldi	r30, 0x80	; 128
    2828:	fe ef       	ldi	r31, 0xFE	; 254
    282a:	16 16       	cp	r1, r22
    282c:	17 06       	cpc	r1, r23
    282e:	e8 07       	cpc	r30, r24
    2830:	f9 07       	cpc	r31, r25
    2832:	c0 f0       	brcs	.+48     	; 0x2864 <__fp_cmp+0x46>
    2834:	12 16       	cp	r1, r18
    2836:	13 06       	cpc	r1, r19
    2838:	e4 07       	cpc	r30, r20
    283a:	f5 07       	cpc	r31, r21
    283c:	98 f0       	brcs	.+38     	; 0x2864 <__fp_cmp+0x46>
    283e:	62 1b       	sub	r22, r18
    2840:	73 0b       	sbc	r23, r19
    2842:	84 0b       	sbc	r24, r20
    2844:	95 0b       	sbc	r25, r21
    2846:	39 f4       	brne	.+14     	; 0x2856 <__fp_cmp+0x38>
    2848:	0a 26       	eor	r0, r26
    284a:	61 f0       	breq	.+24     	; 0x2864 <__fp_cmp+0x46>
    284c:	23 2b       	or	r18, r19
    284e:	24 2b       	or	r18, r20
    2850:	25 2b       	or	r18, r21
    2852:	21 f4       	brne	.+8      	; 0x285c <__fp_cmp+0x3e>
    2854:	08 95       	ret
    2856:	0a 26       	eor	r0, r26
    2858:	09 f4       	brne	.+2      	; 0x285c <__fp_cmp+0x3e>
    285a:	a1 40       	sbci	r26, 0x01	; 1
    285c:	a6 95       	lsr	r26
    285e:	8f ef       	ldi	r24, 0xFF	; 255
    2860:	81 1d       	adc	r24, r1
    2862:	81 1d       	adc	r24, r1
    2864:	08 95       	ret

00002866 <__fp_inf>:
    2866:	97 f9       	bld	r25, 7
    2868:	9f 67       	ori	r25, 0x7F	; 127
    286a:	80 e8       	ldi	r24, 0x80	; 128
    286c:	70 e0       	ldi	r23, 0x00	; 0
    286e:	60 e0       	ldi	r22, 0x00	; 0
    2870:	08 95       	ret

00002872 <__fp_nan>:
    2872:	9f ef       	ldi	r25, 0xFF	; 255
    2874:	80 ec       	ldi	r24, 0xC0	; 192
    2876:	08 95       	ret

00002878 <__fp_pscA>:
    2878:	00 24       	eor	r0, r0
    287a:	0a 94       	dec	r0
    287c:	16 16       	cp	r1, r22
    287e:	17 06       	cpc	r1, r23
    2880:	18 06       	cpc	r1, r24
    2882:	09 06       	cpc	r0, r25
    2884:	08 95       	ret

00002886 <__fp_pscB>:
    2886:	00 24       	eor	r0, r0
    2888:	0a 94       	dec	r0
    288a:	12 16       	cp	r1, r18
    288c:	13 06       	cpc	r1, r19
    288e:	14 06       	cpc	r1, r20
    2890:	05 06       	cpc	r0, r21
    2892:	08 95       	ret

00002894 <__fp_round>:
    2894:	09 2e       	mov	r0, r25
    2896:	03 94       	inc	r0
    2898:	00 0c       	add	r0, r0
    289a:	11 f4       	brne	.+4      	; 0x28a0 <__fp_round+0xc>
    289c:	88 23       	and	r24, r24
    289e:	52 f0       	brmi	.+20     	; 0x28b4 <__fp_round+0x20>
    28a0:	bb 0f       	add	r27, r27
    28a2:	40 f4       	brcc	.+16     	; 0x28b4 <__fp_round+0x20>
    28a4:	bf 2b       	or	r27, r31
    28a6:	11 f4       	brne	.+4      	; 0x28ac <__fp_round+0x18>
    28a8:	60 ff       	sbrs	r22, 0
    28aa:	04 c0       	rjmp	.+8      	; 0x28b4 <__fp_round+0x20>
    28ac:	6f 5f       	subi	r22, 0xFF	; 255
    28ae:	7f 4f       	sbci	r23, 0xFF	; 255
    28b0:	8f 4f       	sbci	r24, 0xFF	; 255
    28b2:	9f 4f       	sbci	r25, 0xFF	; 255
    28b4:	08 95       	ret

000028b6 <__fp_split3>:
    28b6:	57 fd       	sbrc	r21, 7
    28b8:	90 58       	subi	r25, 0x80	; 128
    28ba:	44 0f       	add	r20, r20
    28bc:	55 1f       	adc	r21, r21
    28be:	59 f0       	breq	.+22     	; 0x28d6 <__fp_splitA+0x10>
    28c0:	5f 3f       	cpi	r21, 0xFF	; 255
    28c2:	71 f0       	breq	.+28     	; 0x28e0 <__fp_splitA+0x1a>
    28c4:	47 95       	ror	r20

000028c6 <__fp_splitA>:
    28c6:	88 0f       	add	r24, r24
    28c8:	97 fb       	bst	r25, 7
    28ca:	99 1f       	adc	r25, r25
    28cc:	61 f0       	breq	.+24     	; 0x28e6 <__fp_splitA+0x20>
    28ce:	9f 3f       	cpi	r25, 0xFF	; 255
    28d0:	79 f0       	breq	.+30     	; 0x28f0 <__fp_splitA+0x2a>
    28d2:	87 95       	ror	r24
    28d4:	08 95       	ret
    28d6:	12 16       	cp	r1, r18
    28d8:	13 06       	cpc	r1, r19
    28da:	14 06       	cpc	r1, r20
    28dc:	55 1f       	adc	r21, r21
    28de:	f2 cf       	rjmp	.-28     	; 0x28c4 <__fp_split3+0xe>
    28e0:	46 95       	lsr	r20
    28e2:	f1 df       	rcall	.-30     	; 0x28c6 <__fp_splitA>
    28e4:	08 c0       	rjmp	.+16     	; 0x28f6 <__fp_splitA+0x30>
    28e6:	16 16       	cp	r1, r22
    28e8:	17 06       	cpc	r1, r23
    28ea:	18 06       	cpc	r1, r24
    28ec:	99 1f       	adc	r25, r25
    28ee:	f1 cf       	rjmp	.-30     	; 0x28d2 <__fp_splitA+0xc>
    28f0:	86 95       	lsr	r24
    28f2:	71 05       	cpc	r23, r1
    28f4:	61 05       	cpc	r22, r1
    28f6:	08 94       	sec
    28f8:	08 95       	ret

000028fa <__fp_zero>:
    28fa:	e8 94       	clt

000028fc <__fp_szero>:
    28fc:	bb 27       	eor	r27, r27
    28fe:	66 27       	eor	r22, r22
    2900:	77 27       	eor	r23, r23
    2902:	cb 01       	movw	r24, r22
    2904:	97 f9       	bld	r25, 7
    2906:	08 95       	ret

00002908 <__gesf2>:
    2908:	0e 94 0f 14 	call	0x281e	; 0x281e <__fp_cmp>
    290c:	08 f4       	brcc	.+2      	; 0x2910 <__gesf2+0x8>
    290e:	8f ef       	ldi	r24, 0xFF	; 255
    2910:	08 95       	ret

00002912 <__mulsf3>:
    2912:	0e 94 9c 14 	call	0x2938	; 0x2938 <__mulsf3x>
    2916:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__fp_round>
    291a:	0e 94 3c 14 	call	0x2878	; 0x2878 <__fp_pscA>
    291e:	38 f0       	brcs	.+14     	; 0x292e <__mulsf3+0x1c>
    2920:	0e 94 43 14 	call	0x2886	; 0x2886 <__fp_pscB>
    2924:	20 f0       	brcs	.+8      	; 0x292e <__mulsf3+0x1c>
    2926:	95 23       	and	r25, r21
    2928:	11 f0       	breq	.+4      	; 0x292e <__mulsf3+0x1c>
    292a:	0c 94 33 14 	jmp	0x2866	; 0x2866 <__fp_inf>
    292e:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__fp_nan>
    2932:	11 24       	eor	r1, r1
    2934:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__fp_szero>

00002938 <__mulsf3x>:
    2938:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__fp_split3>
    293c:	70 f3       	brcs	.-36     	; 0x291a <__mulsf3+0x8>

0000293e <__mulsf3_pse>:
    293e:	95 9f       	mul	r25, r21
    2940:	c1 f3       	breq	.-16     	; 0x2932 <__mulsf3+0x20>
    2942:	95 0f       	add	r25, r21
    2944:	50 e0       	ldi	r21, 0x00	; 0
    2946:	55 1f       	adc	r21, r21
    2948:	62 9f       	mul	r22, r18
    294a:	f0 01       	movw	r30, r0
    294c:	72 9f       	mul	r23, r18
    294e:	bb 27       	eor	r27, r27
    2950:	f0 0d       	add	r31, r0
    2952:	b1 1d       	adc	r27, r1
    2954:	63 9f       	mul	r22, r19
    2956:	aa 27       	eor	r26, r26
    2958:	f0 0d       	add	r31, r0
    295a:	b1 1d       	adc	r27, r1
    295c:	aa 1f       	adc	r26, r26
    295e:	64 9f       	mul	r22, r20
    2960:	66 27       	eor	r22, r22
    2962:	b0 0d       	add	r27, r0
    2964:	a1 1d       	adc	r26, r1
    2966:	66 1f       	adc	r22, r22
    2968:	82 9f       	mul	r24, r18
    296a:	22 27       	eor	r18, r18
    296c:	b0 0d       	add	r27, r0
    296e:	a1 1d       	adc	r26, r1
    2970:	62 1f       	adc	r22, r18
    2972:	73 9f       	mul	r23, r19
    2974:	b0 0d       	add	r27, r0
    2976:	a1 1d       	adc	r26, r1
    2978:	62 1f       	adc	r22, r18
    297a:	83 9f       	mul	r24, r19
    297c:	a0 0d       	add	r26, r0
    297e:	61 1d       	adc	r22, r1
    2980:	22 1f       	adc	r18, r18
    2982:	74 9f       	mul	r23, r20
    2984:	33 27       	eor	r19, r19
    2986:	a0 0d       	add	r26, r0
    2988:	61 1d       	adc	r22, r1
    298a:	23 1f       	adc	r18, r19
    298c:	84 9f       	mul	r24, r20
    298e:	60 0d       	add	r22, r0
    2990:	21 1d       	adc	r18, r1
    2992:	82 2f       	mov	r24, r18
    2994:	76 2f       	mov	r23, r22
    2996:	6a 2f       	mov	r22, r26
    2998:	11 24       	eor	r1, r1
    299a:	9f 57       	subi	r25, 0x7F	; 127
    299c:	50 40       	sbci	r21, 0x00	; 0
    299e:	9a f0       	brmi	.+38     	; 0x29c6 <__mulsf3_pse+0x88>
    29a0:	f1 f0       	breq	.+60     	; 0x29de <__mulsf3_pse+0xa0>
    29a2:	88 23       	and	r24, r24
    29a4:	4a f0       	brmi	.+18     	; 0x29b8 <__mulsf3_pse+0x7a>
    29a6:	ee 0f       	add	r30, r30
    29a8:	ff 1f       	adc	r31, r31
    29aa:	bb 1f       	adc	r27, r27
    29ac:	66 1f       	adc	r22, r22
    29ae:	77 1f       	adc	r23, r23
    29b0:	88 1f       	adc	r24, r24
    29b2:	91 50       	subi	r25, 0x01	; 1
    29b4:	50 40       	sbci	r21, 0x00	; 0
    29b6:	a9 f7       	brne	.-22     	; 0x29a2 <__mulsf3_pse+0x64>
    29b8:	9e 3f       	cpi	r25, 0xFE	; 254
    29ba:	51 05       	cpc	r21, r1
    29bc:	80 f0       	brcs	.+32     	; 0x29de <__mulsf3_pse+0xa0>
    29be:	0c 94 33 14 	jmp	0x2866	; 0x2866 <__fp_inf>
    29c2:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__fp_szero>
    29c6:	5f 3f       	cpi	r21, 0xFF	; 255
    29c8:	e4 f3       	brlt	.-8      	; 0x29c2 <__mulsf3_pse+0x84>
    29ca:	98 3e       	cpi	r25, 0xE8	; 232
    29cc:	d4 f3       	brlt	.-12     	; 0x29c2 <__mulsf3_pse+0x84>
    29ce:	86 95       	lsr	r24
    29d0:	77 95       	ror	r23
    29d2:	67 95       	ror	r22
    29d4:	b7 95       	ror	r27
    29d6:	f7 95       	ror	r31
    29d8:	e7 95       	ror	r30
    29da:	9f 5f       	subi	r25, 0xFF	; 255
    29dc:	c1 f7       	brne	.-16     	; 0x29ce <__mulsf3_pse+0x90>
    29de:	fe 2b       	or	r31, r30
    29e0:	88 0f       	add	r24, r24
    29e2:	91 1d       	adc	r25, r1
    29e4:	96 95       	lsr	r25
    29e6:	87 95       	ror	r24
    29e8:	97 f9       	bld	r25, 7
    29ea:	08 95       	ret

000029ec <__umulhisi3>:
    29ec:	a2 9f       	mul	r26, r18
    29ee:	b0 01       	movw	r22, r0
    29f0:	b3 9f       	mul	r27, r19
    29f2:	c0 01       	movw	r24, r0
    29f4:	a3 9f       	mul	r26, r19
    29f6:	70 0d       	add	r23, r0
    29f8:	81 1d       	adc	r24, r1
    29fa:	11 24       	eor	r1, r1
    29fc:	91 1d       	adc	r25, r1
    29fe:	b2 9f       	mul	r27, r18
    2a00:	70 0d       	add	r23, r0
    2a02:	81 1d       	adc	r24, r1
    2a04:	11 24       	eor	r1, r1
    2a06:	91 1d       	adc	r25, r1
    2a08:	08 95       	ret

00002a0a <atoi>:
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	88 27       	eor	r24, r24
    2a0e:	99 27       	eor	r25, r25
    2a10:	e8 94       	clt
    2a12:	21 91       	ld	r18, Z+
    2a14:	20 32       	cpi	r18, 0x20	; 32
    2a16:	e9 f3       	breq	.-6      	; 0x2a12 <atoi+0x8>
    2a18:	29 30       	cpi	r18, 0x09	; 9
    2a1a:	10 f0       	brcs	.+4      	; 0x2a20 <atoi+0x16>
    2a1c:	2e 30       	cpi	r18, 0x0E	; 14
    2a1e:	c8 f3       	brcs	.-14     	; 0x2a12 <atoi+0x8>
    2a20:	2b 32       	cpi	r18, 0x2B	; 43
    2a22:	41 f0       	breq	.+16     	; 0x2a34 <atoi+0x2a>
    2a24:	2d 32       	cpi	r18, 0x2D	; 45
    2a26:	39 f4       	brne	.+14     	; 0x2a36 <atoi+0x2c>
    2a28:	68 94       	set
    2a2a:	04 c0       	rjmp	.+8      	; 0x2a34 <atoi+0x2a>
    2a2c:	0e 94 39 15 	call	0x2a72	; 0x2a72 <__mulhi_const_10>
    2a30:	82 0f       	add	r24, r18
    2a32:	91 1d       	adc	r25, r1
    2a34:	21 91       	ld	r18, Z+
    2a36:	20 53       	subi	r18, 0x30	; 48
    2a38:	2a 30       	cpi	r18, 0x0A	; 10
    2a3a:	c0 f3       	brcs	.-16     	; 0x2a2c <atoi+0x22>
    2a3c:	1e f4       	brtc	.+6      	; 0x2a44 <atoi+0x3a>
    2a3e:	90 95       	com	r25
    2a40:	81 95       	neg	r24
    2a42:	9f 4f       	sbci	r25, 0xFF	; 255
    2a44:	08 95       	ret

00002a46 <itoa>:
    2a46:	45 32       	cpi	r20, 0x25	; 37
    2a48:	51 05       	cpc	r21, r1
    2a4a:	20 f4       	brcc	.+8      	; 0x2a54 <itoa+0xe>
    2a4c:	42 30       	cpi	r20, 0x02	; 2
    2a4e:	10 f0       	brcs	.+4      	; 0x2a54 <itoa+0xe>
    2a50:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <__itoa_ncheck>
    2a54:	fb 01       	movw	r30, r22
    2a56:	10 82       	st	Z, r1
    2a58:	cb 01       	movw	r24, r22
    2a5a:	08 95       	ret

00002a5c <__itoa_ncheck>:
    2a5c:	bb 27       	eor	r27, r27
    2a5e:	4a 30       	cpi	r20, 0x0A	; 10
    2a60:	31 f4       	brne	.+12     	; 0x2a6e <__itoa_ncheck+0x12>
    2a62:	99 23       	and	r25, r25
    2a64:	22 f4       	brpl	.+8      	; 0x2a6e <__itoa_ncheck+0x12>
    2a66:	bd e2       	ldi	r27, 0x2D	; 45
    2a68:	90 95       	com	r25
    2a6a:	81 95       	neg	r24
    2a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6e:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <__utoa_common>

00002a72 <__mulhi_const_10>:
    2a72:	7a e0       	ldi	r23, 0x0A	; 10
    2a74:	97 9f       	mul	r25, r23
    2a76:	90 2d       	mov	r25, r0
    2a78:	87 9f       	mul	r24, r23
    2a7a:	80 2d       	mov	r24, r0
    2a7c:	91 0d       	add	r25, r1
    2a7e:	11 24       	eor	r1, r1
    2a80:	08 95       	ret

00002a82 <__utoa_ncheck>:
    2a82:	bb 27       	eor	r27, r27

00002a84 <__utoa_common>:
    2a84:	fb 01       	movw	r30, r22
    2a86:	55 27       	eor	r21, r21
    2a88:	aa 27       	eor	r26, r26
    2a8a:	88 0f       	add	r24, r24
    2a8c:	99 1f       	adc	r25, r25
    2a8e:	aa 1f       	adc	r26, r26
    2a90:	a4 17       	cp	r26, r20
    2a92:	10 f0       	brcs	.+4      	; 0x2a98 <__utoa_common+0x14>
    2a94:	a4 1b       	sub	r26, r20
    2a96:	83 95       	inc	r24
    2a98:	50 51       	subi	r21, 0x10	; 16
    2a9a:	b9 f7       	brne	.-18     	; 0x2a8a <__utoa_common+0x6>
    2a9c:	a0 5d       	subi	r26, 0xD0	; 208
    2a9e:	aa 33       	cpi	r26, 0x3A	; 58
    2aa0:	08 f0       	brcs	.+2      	; 0x2aa4 <__utoa_common+0x20>
    2aa2:	a9 5d       	subi	r26, 0xD9	; 217
    2aa4:	a1 93       	st	Z+, r26
    2aa6:	00 97       	sbiw	r24, 0x00	; 0
    2aa8:	79 f7       	brne	.-34     	; 0x2a88 <__utoa_common+0x4>
    2aaa:	b1 11       	cpse	r27, r1
    2aac:	b1 93       	st	Z+, r27
    2aae:	11 92       	st	Z+, r1
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <strrev>

00002ab6 <strrev>:
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	fc 01       	movw	r30, r24
    2aba:	67 2f       	mov	r22, r23
    2abc:	71 91       	ld	r23, Z+
    2abe:	77 23       	and	r23, r23
    2ac0:	e1 f7       	brne	.-8      	; 0x2aba <strrev+0x4>
    2ac2:	32 97       	sbiw	r30, 0x02	; 2
    2ac4:	04 c0       	rjmp	.+8      	; 0x2ace <strrev+0x18>
    2ac6:	7c 91       	ld	r23, X
    2ac8:	6d 93       	st	X+, r22
    2aca:	70 83       	st	Z, r23
    2acc:	62 91       	ld	r22, -Z
    2ace:	ae 17       	cp	r26, r30
    2ad0:	bf 07       	cpc	r27, r31
    2ad2:	c8 f3       	brcs	.-14     	; 0x2ac6 <strrev+0x10>
    2ad4:	08 95       	ret

00002ad6 <_exit>:
    2ad6:	f8 94       	cli

00002ad8 <__stop_program>:
    2ad8:	ff cf       	rjmp	.-2      	; 0x2ad8 <__stop_program>
