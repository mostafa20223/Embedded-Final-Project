
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000078c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  0000078c  00000820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080009e  0080009e  0000085e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000085e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b92  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba0  00000000  00000000  000025ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f9b  00000000  00000000  0000318e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  0000412c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f4  00000000  00000000  000043e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000120c  00000000  00000000  000049d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00005be4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 39       	cpi	r26, 0x9E	; 158
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e9       	ldi	r26, 0x9E	; 158
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3a       	cpi	r26, 0xA0	; 160
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7d 03 	call	0x6fa	; 0x6fa <main>
  8a:	0c 94 c4 03 	jmp	0x788	; 0x788 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Init>:

static u8 shift = 0;

void Init(void)
{
	LCD_vInit();
  92:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_vInit>
	keypad_vInit();
  96:	0e 94 28 02 	call	0x450	; 0x450 <keypad_vInit>
	SPI_masterInit();
  9a:	0e 94 94 03 	call	0x728	; 0x728 <SPI_masterInit>
	TC72_Init();
  9e:	0e 94 b1 03 	call	0x762	; 0x762 <TC72_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	82 e5       	ldi	r24, 0x52	; 82
  a6:	97 e0       	ldi	r25, 0x07	; 7
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <Init+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <Init+0x20>
  b2:	00 00       	nop
  b4:	08 95       	ret

000000b6 <Welcome_Screen>:
	_delay_ms(150);
}

void Welcome_Screen(void)
{
	LCD_movecursor(1, 1);
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 41 03 	call	0x682	; 0x682 <LCD_movecursor>
	
	for (shift = 1; shift < 16; ++shift)
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <Welcome_Screen+0x42>
	{
		LCD_clearscreen();
  c6:	0e 94 37 03 	call	0x66e	; 0x66e <LCD_clearscreen>
		LCD_SendStringRowCol(1, shift, "WELCOME");
  ca:	40 e6       	ldi	r20, 0x60	; 96
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	60 91 9e 00 	lds	r22, 0x009E	; 0x80009e <__data_end>
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_SendStringRowCol>
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	81 ee       	ldi	r24, 0xE1	; 225
  dc:	94 e0       	ldi	r25, 0x04	; 4
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <Welcome_Screen+0x28>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <Welcome_Screen+0x32>
  e8:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();
  ea:	0e 94 37 03 	call	0x66e	; 0x66e <LCD_clearscreen>

void Welcome_Screen(void)
{
	LCD_movecursor(1, 1);
	
	for (shift = 1; shift < 16; ++shift)
  ee:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
  f2:	8f 5f       	subi	r24, 0xFF	; 255
  f4:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
  f8:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
  fc:	80 31       	cpi	r24, 0x10	; 16
  fe:	18 f3       	brcs	.-58     	; 0xc6 <Welcome_Screen+0x10>
		LCD_SendStringRowCol(1, shift, "WELCOME");
		_delay_ms(100);
		LCD_clearscreen();
	}

	for (shift = 16; shift > 0; --shift)
 100:	80 e1       	ldi	r24, 0x10	; 16
 102:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
 106:	19 c0       	rjmp	.+50     	; 0x13a <Welcome_Screen+0x84>
	{
		LCD_clearscreen();
 108:	0e 94 37 03 	call	0x66e	; 0x66e <LCD_clearscreen>
		LCD_SendStringRowCol(1, shift, "WELCOME");
 10c:	40 e6       	ldi	r20, 0x60	; 96
 10e:	50 e0       	ldi	r21, 0x00	; 0
 110:	60 91 9e 00 	lds	r22, 0x009E	; 0x80009e <__data_end>
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_SendStringRowCol>
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	81 ee       	ldi	r24, 0xE1	; 225
 11e:	94 e0       	ldi	r25, 0x04	; 4
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <Welcome_Screen+0x6a>
 128:	00 c0       	rjmp	.+0      	; 0x12a <Welcome_Screen+0x74>
 12a:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();
 12c:	0e 94 37 03 	call	0x66e	; 0x66e <LCD_clearscreen>
		LCD_SendStringRowCol(1, shift, "WELCOME");
		_delay_ms(100);
		LCD_clearscreen();
	}

	for (shift = 16; shift > 0; --shift)
 130:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
 134:	81 50       	subi	r24, 0x01	; 1
 136:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
 13a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
 13e:	81 11       	cpse	r24, r1
 140:	e3 cf       	rjmp	.-58     	; 0x108 <Welcome_Screen+0x52>
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	84 e3       	ldi	r24, 0x34	; 52
 146:	9c e0       	ldi	r25, 0x0C	; 12
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <Welcome_Screen+0x92>
 150:	00 c0       	rjmp	.+0      	; 0x152 <Welcome_Screen+0x9c>
 152:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();
	}
	
	_delay_ms(250);
	LCD_clearscreen();
 154:	0e 94 37 03 	call	0x66e	; 0x66e <LCD_clearscreen>
 158:	08 95       	ret

0000015a <IDLE_Screen>:
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	89 ef       	ldi	r24, 0xF9	; 249
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <IDLE_Screen+0x6>
 168:	00 c0       	rjmp	.+0      	; 0x16a <IDLE_Screen+0x10>
 16a:	00 00       	nop
}

void IDLE_Screen(void)
{
	_delay_ms(20);
	LCD_SendStringRowCol(1, 1, "SET:25");
 16c:	48 e6       	ldi	r20, 0x68	; 104
 16e:	50 e0       	ldi	r21, 0x00	; 0
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_SendStringRowCol>
	LCD_SendStringRowCol(1, 11, "CRT:");
 178:	4f e6       	ldi	r20, 0x6F	; 111
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	6b e0       	ldi	r22, 0x0B	; 11
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_SendStringRowCol>
	LCD_SendStringRowCol(2, 1, "STATE:STANDBY");
 184:	44 e7       	ldi	r20, 0x74	; 116
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_SendStringRowCol>
 190:	08 95       	ret

00000192 <UsrGetVal>:
}

u8 UsrGetVal(void)
{
 192:	cf 93       	push	r28
	u8 keypadPress = getKey();
 194:	0e 94 70 02 	call	0x4e0	; 0x4e0 <getKey>
 198:	c8 2f       	mov	r28, r24
	
	if (keypadPress == '#')
 19a:	83 32       	cpi	r24, 0x23	; 35
 19c:	51 f4       	brne	.+20     	; 0x1b2 <UsrGetVal+0x20>
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	89 ef       	ldi	r24, 0xF9	; 249
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <UsrGetVal+0x12>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <UsrGetVal+0x1c>
 1ae:	00 00       	nop
 1b0:	0b c0       	rjmp	.+22     	; 0x1c8 <UsrGetVal+0x36>
	{
		_delay_ms(20);
	}
	else
	{
		LCD_vSend_char(keypadPress);
 1b2:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_vSend_char>
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	89 ef       	ldi	r24, 0xF9	; 249
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <UsrGetVal+0x2a>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <UsrGetVal+0x34>
 1c6:	00 00       	nop
		_delay_ms(20);		
	}
	
	return keypadPress;
}
 1c8:	8c 2f       	mov	r24, r28
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <Start_Communication>:

void Start_Communication(void)
{
 1ce:	cf 93       	push	r28
	c8 msb = 0;
	c8 lsb = 0;
	c8 TempVal;

	//DIO_vsetPINDir(SPI_PORT, 4, 1);
	PORTB |= (1 << 4);
 1d0:	88 b3       	in	r24, 0x18	; 24
 1d2:	80 61       	ori	r24, 0x10	; 16
 1d4:	88 bb       	out	0x18, r24	; 24
		
	// Read the MSB
	SPI_masterTransmit(0x02);
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	0e 94 a9 03 	call	0x752	; 0x752 <SPI_masterTransmit>
	// Issue one more clock frame to force data out
	SPI_masterTransmit(0x00);
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 a9 03 	call	0x752	; 0x752 <SPI_masterTransmit>
		
	//DIO_vsetPINDir(SPI_PORT, 4, 0);
	PORTB &= ~(1 << 4);
 1e2:	88 b3       	in	r24, 0x18	; 24
 1e4:	8f 7e       	andi	r24, 0xEF	; 239
 1e6:	88 bb       	out	0x18, r24	; 24
 1e8:	8f e9       	ldi	r24, 0x9F	; 159
 1ea:	9f e0       	ldi	r25, 0x0F	; 15
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <Start_Communication+0x1e>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <Start_Communication+0x24>
 1f2:	00 00       	nop
	_delay_ms(1);
		
	msb = SPI_masterReceive();
 1f4:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_masterReceive>
	msb <<= 1;
 1f8:	c8 2f       	mov	r28, r24
 1fa:	cc 0f       	add	r28, r28
	//DIO_vsetPINDir(SPI_PORT, 4, 1);
	PORTB |= (1 << 4);
 1fc:	88 b3       	in	r24, 0x18	; 24
 1fe:	80 61       	ori	r24, 0x10	; 16
 200:	88 bb       	out	0x18, r24	; 24
		
	// Read The LSB
	SPI_masterTransmit(0x01);
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	0e 94 a9 03 	call	0x752	; 0x752 <SPI_masterTransmit>
	// Issue one more clock frame to force data out
	SPI_masterTransmit(0x00);
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 a9 03 	call	0x752	; 0x752 <SPI_masterTransmit>
		
	//DIO_vsetPINDir(SPI_PORT, 4, 0);
	PORTB &= ~(1 << 4);
 20e:	88 b3       	in	r24, 0x18	; 24
 210:	8f 7e       	andi	r24, 0xEF	; 239
 212:	88 bb       	out	0x18, r24	; 24
 214:	8f e9       	ldi	r24, 0x9F	; 159
 216:	9f e0       	ldi	r25, 0x0F	; 15
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <Start_Communication+0x4a>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <Start_Communication+0x50>
 21e:	00 00       	nop
	_delay_ms(1);
		
	lsb = SPI_masterReceive();
 220:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_masterReceive>
	lsb >>= 7;
 224:	88 1f       	adc	r24, r24
 226:	88 27       	eor	r24, r24
 228:	88 1f       	adc	r24, r24
	//PORTD = lsb;

	TempVal = (msb | lsb);
 22a:	c8 2b       	or	r28, r24
		
	//LCD_movecursor(1, 15);
	//LCD_vSend_char('4');
	//LCD_movecursor(1, 16);
	//LCD_vSend_char('3');
	LCD_movecursor(1, 15);
 22c:	6f e0       	ldi	r22, 0x0F	; 15
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 41 03 	call	0x682	; 0x682 <LCD_movecursor>
	LCD_vSend_char(TempVal);
 234:	8c 2f       	mov	r24, r28
 236:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_vSend_char>
}
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <DIO_vsetPINDir>:
			PORTC &= 0xf0;
			PORTC |= value;
			break;
		case 'D':
			PORTD &= 0xf0;
			PORTD |= value;
 23e:	82 34       	cpi	r24, 0x42	; 66
 240:	19 f1       	breq	.+70     	; 0x288 <DIO_vsetPINDir+0x4a>
 242:	18 f4       	brcc	.+6      	; 0x24a <DIO_vsetPINDir+0xc>
 244:	81 34       	cpi	r24, 0x41	; 65
 246:	39 f0       	breq	.+14     	; 0x256 <DIO_vsetPINDir+0x18>
 248:	08 95       	ret
 24a:	83 34       	cpi	r24, 0x43	; 67
 24c:	b1 f1       	breq	.+108    	; 0x2ba <DIO_vsetPINDir+0x7c>
 24e:	84 34       	cpi	r24, 0x44	; 68
 250:	09 f4       	brne	.+2      	; 0x254 <DIO_vsetPINDir+0x16>
 252:	4c c0       	rjmp	.+152    	; 0x2ec <DIO_vsetPINDir+0xae>
 254:	08 95       	ret
 256:	41 30       	cpi	r20, 0x01	; 1
 258:	59 f4       	brne	.+22     	; 0x270 <DIO_vsetPINDir+0x32>
 25a:	2a b3       	in	r18, 0x1a	; 26
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_vsetPINDir+0x28>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_vsetPINDir+0x24>
 26a:	82 2b       	or	r24, r18
 26c:	8a bb       	out	0x1a, r24	; 26
 26e:	08 95       	ret
 270:	2a b3       	in	r18, 0x1a	; 26
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_vsetPINDir+0x3e>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_vsetPINDir+0x3a>
 280:	80 95       	com	r24
 282:	82 23       	and	r24, r18
 284:	8a bb       	out	0x1a, r24	; 26
 286:	08 95       	ret
 288:	41 30       	cpi	r20, 0x01	; 1
 28a:	59 f4       	brne	.+22     	; 0x2a2 <DIO_vsetPINDir+0x64>
 28c:	27 b3       	in	r18, 0x17	; 23
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_vsetPINDir+0x5a>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_vsetPINDir+0x56>
 29c:	82 2b       	or	r24, r18
 29e:	87 bb       	out	0x17, r24	; 23
 2a0:	08 95       	ret
 2a2:	27 b3       	in	r18, 0x17	; 23
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_vsetPINDir+0x70>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_vsetPINDir+0x6c>
 2b2:	80 95       	com	r24
 2b4:	82 23       	and	r24, r18
 2b6:	87 bb       	out	0x17, r24	; 23
 2b8:	08 95       	ret
 2ba:	41 30       	cpi	r20, 0x01	; 1
 2bc:	59 f4       	brne	.+22     	; 0x2d4 <DIO_vsetPINDir+0x96>
 2be:	24 b3       	in	r18, 0x14	; 20
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_vsetPINDir+0x8c>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	6a 95       	dec	r22
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_vsetPINDir+0x88>
 2ce:	82 2b       	or	r24, r18
 2d0:	84 bb       	out	0x14, r24	; 20
 2d2:	08 95       	ret
 2d4:	24 b3       	in	r18, 0x14	; 20
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_vsetPINDir+0xa2>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	6a 95       	dec	r22
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_vsetPINDir+0x9e>
 2e4:	80 95       	com	r24
 2e6:	82 23       	and	r24, r18
 2e8:	84 bb       	out	0x14, r24	; 20
 2ea:	08 95       	ret
 2ec:	41 30       	cpi	r20, 0x01	; 1
 2ee:	59 f4       	brne	.+22     	; 0x306 <DIO_vsetPINDir+0xc8>
 2f0:	21 b3       	in	r18, 0x11	; 17
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_vsetPINDir+0xbe>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_vsetPINDir+0xba>
 300:	82 2b       	or	r24, r18
 302:	81 bb       	out	0x11, r24	; 17
 304:	08 95       	ret
 306:	21 b3       	in	r18, 0x11	; 17
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_vsetPINDir+0xd4>
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_vsetPINDir+0xd0>
 316:	80 95       	com	r24
 318:	82 23       	and	r24, r18
 31a:	81 bb       	out	0x11, r24	; 17
 31c:	08 95       	ret

0000031e <DIO_write>:
 31e:	82 34       	cpi	r24, 0x42	; 66
 320:	19 f1       	breq	.+70     	; 0x368 <DIO_write+0x4a>
 322:	18 f4       	brcc	.+6      	; 0x32a <DIO_write+0xc>
 324:	81 34       	cpi	r24, 0x41	; 65
 326:	39 f0       	breq	.+14     	; 0x336 <DIO_write+0x18>
 328:	08 95       	ret
 32a:	83 34       	cpi	r24, 0x43	; 67
 32c:	b1 f1       	breq	.+108    	; 0x39a <DIO_write+0x7c>
 32e:	84 34       	cpi	r24, 0x44	; 68
 330:	09 f4       	brne	.+2      	; 0x334 <DIO_write+0x16>
 332:	4c c0       	rjmp	.+152    	; 0x3cc <DIO_write+0xae>
 334:	08 95       	ret
 336:	41 30       	cpi	r20, 0x01	; 1
 338:	59 f4       	brne	.+22     	; 0x350 <DIO_write+0x32>
 33a:	2b b3       	in	r18, 0x1b	; 27
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_write+0x28>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_write+0x24>
 34a:	82 2b       	or	r24, r18
 34c:	8b bb       	out	0x1b, r24	; 27
 34e:	08 95       	ret
 350:	2b b3       	in	r18, 0x1b	; 27
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_write+0x3e>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_write+0x3a>
 360:	80 95       	com	r24
 362:	82 23       	and	r24, r18
 364:	8b bb       	out	0x1b, r24	; 27
 366:	08 95       	ret
 368:	41 30       	cpi	r20, 0x01	; 1
 36a:	59 f4       	brne	.+22     	; 0x382 <DIO_write+0x64>
 36c:	28 b3       	in	r18, 0x18	; 24
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_write+0x5a>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	6a 95       	dec	r22
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_write+0x56>
 37c:	82 2b       	or	r24, r18
 37e:	88 bb       	out	0x18, r24	; 24
 380:	08 95       	ret
 382:	28 b3       	in	r18, 0x18	; 24
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_write+0x70>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_write+0x6c>
 392:	80 95       	com	r24
 394:	82 23       	and	r24, r18
 396:	88 bb       	out	0x18, r24	; 24
 398:	08 95       	ret
 39a:	41 30       	cpi	r20, 0x01	; 1
 39c:	59 f4       	brne	.+22     	; 0x3b4 <DIO_write+0x96>
 39e:	25 b3       	in	r18, 0x15	; 21
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_write+0x8c>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	6a 95       	dec	r22
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_write+0x88>
 3ae:	82 2b       	or	r24, r18
 3b0:	85 bb       	out	0x15, r24	; 21
 3b2:	08 95       	ret
 3b4:	25 b3       	in	r18, 0x15	; 21
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_write+0xa2>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_write+0x9e>
 3c4:	80 95       	com	r24
 3c6:	82 23       	and	r24, r18
 3c8:	85 bb       	out	0x15, r24	; 21
 3ca:	08 95       	ret
 3cc:	41 30       	cpi	r20, 0x01	; 1
 3ce:	59 f4       	brne	.+22     	; 0x3e6 <DIO_write+0xc8>
 3d0:	22 b3       	in	r18, 0x12	; 18
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_write+0xbe>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	6a 95       	dec	r22
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_write+0xba>
 3e0:	82 2b       	or	r24, r18
 3e2:	82 bb       	out	0x12, r24	; 18
 3e4:	08 95       	ret
 3e6:	22 b3       	in	r18, 0x12	; 18
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_write+0xd4>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	6a 95       	dec	r22
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_write+0xd0>
 3f6:	80 95       	com	r24
 3f8:	82 23       	and	r24, r18
 3fa:	82 bb       	out	0x12, r24	; 18
 3fc:	08 95       	ret

000003fe <write_high_nibble>:
	}
}

void write_high_nibble(u8 portname, u8 value)
{
	value <<= 4;
 3fe:	62 95       	swap	r22
 400:	60 7f       	andi	r22, 0xF0	; 240
	
	switch(portname)
 402:	82 34       	cpi	r24, 0x42	; 66
 404:	81 f0       	breq	.+32     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 406:	18 f4       	brcc	.+6      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 408:	81 34       	cpi	r24, 0x41	; 65
 40a:	31 f0       	breq	.+12     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 40c:	08 95       	ret
 40e:	83 34       	cpi	r24, 0x43	; 67
 410:	89 f0       	breq	.+34     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 412:	84 34       	cpi	r24, 0x44	; 68
 414:	b1 f0       	breq	.+44     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 416:	08 95       	ret
	{
		case 'A':
			PORTA &= 0x0f;
 418:	8b b3       	in	r24, 0x1b	; 27
 41a:	8f 70       	andi	r24, 0x0F	; 15
 41c:	8b bb       	out	0x1b, r24	; 27
			PORTA |= value;
 41e:	8b b3       	in	r24, 0x1b	; 27
 420:	68 2b       	or	r22, r24
 422:	6b bb       	out	0x1b, r22	; 27
			break;
 424:	08 95       	ret
		case 'B':
			PORTB &= 0x0f;
 426:	88 b3       	in	r24, 0x18	; 24
 428:	8f 70       	andi	r24, 0x0F	; 15
 42a:	88 bb       	out	0x18, r24	; 24
			PORTB |= value;
 42c:	88 b3       	in	r24, 0x18	; 24
 42e:	68 2b       	or	r22, r24
 430:	68 bb       	out	0x18, r22	; 24
			break;
 432:	08 95       	ret
		case 'C':
			PORTC &= 0x0f;
 434:	85 b3       	in	r24, 0x15	; 21
 436:	8f 70       	andi	r24, 0x0F	; 15
 438:	85 bb       	out	0x15, r24	; 21
			PORTC |= value;
 43a:	85 b3       	in	r24, 0x15	; 21
 43c:	68 2b       	or	r22, r24
 43e:	65 bb       	out	0x15, r22	; 21
			break;
 440:	08 95       	ret
		case 'D':
			PORTD &= 0x0f;
 442:	82 b3       	in	r24, 0x12	; 18
 444:	8f 70       	andi	r24, 0x0F	; 15
 446:	82 bb       	out	0x12, r24	; 18
			PORTD |= value;
 448:	82 b3       	in	r24, 0x12	; 18
 44a:	68 2b       	or	r22, r24
 44c:	62 bb       	out	0x12, r22	; 18
 44e:	08 95       	ret

00000450 <keypad_vInit>:
	{'*', '0', '#'}
};

void keypad_vInit(void)
{
	DDRC = 0x0f;
 450:	8f e0       	ldi	r24, 0x0F	; 15
 452:	84 bb       	out	0x14, r24	; 20
	CLR_BIT(SFIOR, PUD);
 454:	80 b7       	in	r24, 0x30	; 48
 456:	8b 7f       	andi	r24, 0xFB	; 251
 458:	80 bf       	out	0x30, r24	; 48
	PORTC = 0xff;
 45a:	8f ef       	ldi	r24, 0xFF	; 255
 45c:	85 bb       	out	0x15, r24	; 21
 45e:	08 95       	ret

00000460 <Keypad_u8Scan>:
u8 Keypad_u8Scan(void)
{
	u8 row = 0;
	u8 column = 0;
	u8 scan = 0;
	u8 buttonPressed = 0;
 460:	80 e0       	ldi	r24, 0x00	; 0

	for(row = 0; row < N_Row; ++row)
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	3a c0       	rjmp	.+116    	; 0x4da <Keypad_u8Scan+0x7a>
	{
		PORTC |= 0x0f;
 466:	95 b3       	in	r25, 0x15	; 21
 468:	9f 60       	ori	r25, 0x0F	; 15
 46a:	95 bb       	out	0x15, r25	; 21
		CLR_BIT(PORTC, row);
 46c:	95 b3       	in	r25, 0x15	; 21
 46e:	a7 2f       	mov	r26, r23
 470:	b0 e0       	ldi	r27, 0x00	; 0
 472:	21 e0       	ldi	r18, 0x01	; 1
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	07 2e       	mov	r0, r23
 478:	02 c0       	rjmp	.+4      	; 0x47e <Keypad_u8Scan+0x1e>
 47a:	22 0f       	add	r18, r18
 47c:	33 1f       	adc	r19, r19
 47e:	0a 94       	dec	r0
 480:	e2 f7       	brpl	.-8      	; 0x47a <Keypad_u8Scan+0x1a>
 482:	20 95       	com	r18
 484:	29 23       	and	r18, r25
 486:	25 bb       	out	0x15, r18	; 21
		for(column = 4; column < (N_Row + N_Col); ++column)
 488:	94 e0       	ldi	r25, 0x04	; 4
 48a:	24 c0       	rjmp	.+72     	; 0x4d4 <Keypad_u8Scan+0x74>
		{
			scan = READ_BIT(PINC, column);
 48c:	63 b3       	in	r22, 0x13	; 19
 48e:	e9 2f       	mov	r30, r25
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	a9 01       	movw	r20, r18
 498:	09 2e       	mov	r0, r25
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <Keypad_u8Scan+0x40>
 49c:	44 0f       	add	r20, r20
 49e:	55 1f       	adc	r21, r21
 4a0:	0a 94       	dec	r0
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <Keypad_u8Scan+0x3c>
 4a4:	26 2f       	mov	r18, r22
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	24 23       	and	r18, r20
 4aa:	35 23       	and	r19, r21
 4ac:	09 2e       	mov	r0, r25
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <Keypad_u8Scan+0x54>
 4b0:	35 95       	asr	r19
 4b2:	27 95       	ror	r18
 4b4:	0a 94       	dec	r0
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <Keypad_u8Scan+0x50>
			if(scan == 0)
 4b8:	21 11       	cpse	r18, r1
 4ba:	0b c0       	rjmp	.+22     	; 0x4d2 <Keypad_u8Scan+0x72>
			{
				buttonPressed = kp[row][column - 4];
 4bc:	34 97       	sbiw	r30, 0x04	; 4
 4be:	9d 01       	movw	r18, r26
 4c0:	22 0f       	add	r18, r18
 4c2:	33 1f       	adc	r19, r19
 4c4:	2a 0f       	add	r18, r26
 4c6:	3b 1f       	adc	r19, r27
 4c8:	2e 57       	subi	r18, 0x7E	; 126
 4ca:	3f 4f       	sbci	r19, 0xFF	; 255
 4cc:	e2 0f       	add	r30, r18
 4ce:	f3 1f       	adc	r31, r19
 4d0:	80 81       	ld	r24, Z

	for(row = 0; row < N_Row; ++row)
	{
		PORTC |= 0x0f;
		CLR_BIT(PORTC, row);
		for(column = 4; column < (N_Row + N_Col); ++column)
 4d2:	9f 5f       	subi	r25, 0xFF	; 255
 4d4:	97 30       	cpi	r25, 0x07	; 7
 4d6:	d0 f2       	brcs	.-76     	; 0x48c <Keypad_u8Scan+0x2c>
	u8 row = 0;
	u8 column = 0;
	u8 scan = 0;
	u8 buttonPressed = 0;

	for(row = 0; row < N_Row; ++row)
 4d8:	7f 5f       	subi	r23, 0xFF	; 255
 4da:	74 30       	cpi	r23, 0x04	; 4
 4dc:	20 f2       	brcs	.-120    	; 0x466 <Keypad_u8Scan+0x6>
			}
		}
	}
	
	return buttonPressed;
}
 4de:	08 95       	ret

000004e0 <getKey>:
u8 getKey(void)
{
	u8 key = 0;

	/* Wait for key release if pressed on entry */
	while(Keypad_u8Scan() != 0)
 4e0:	06 c0       	rjmp	.+12     	; 0x4ee <getKey+0xe>
 4e2:	83 ec       	ldi	r24, 0xC3	; 195
 4e4:	99 e0       	ldi	r25, 0x09	; 9
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <getKey+0x6>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <getKey+0xc>
 4ec:	00 00       	nop
 4ee:	0e 94 30 02 	call	0x460	; 0x460 <Keypad_u8Scan>
 4f2:	81 11       	cpse	r24, r1
 4f4:	f6 cf       	rjmp	.-20     	; 0x4e2 <getKey+0x2>
	}

	/* Wait for new key press */
	do
	{
		key = Keypad_u8Scan();
 4f6:	0e 94 30 02 	call	0x460	; 0x460 <Keypad_u8Scan>

	} while(key == 0);
 4fa:	88 23       	and	r24, r24
 4fc:	e1 f3       	breq	.-8      	; 0x4f6 <getKey+0x16>

	return key;
 4fe:	08 95       	ret

00000500 <send_falling_edge>:

    for(counter = 0; data[counter] != '\0'; ++counter)
    {
	    LCD_vSend_char(data[counter]);
    }
}
 500:	41 e0       	ldi	r20, 0x01	; 1
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	81 e4       	ldi	r24, 0x41	; 65
 506:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_write>
 50a:	83 ef       	ldi	r24, 0xF3	; 243
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	f1 f7       	brne	.-4      	; 0x50e <send_falling_edge+0xe>
 512:	00 c0       	rjmp	.+0      	; 0x514 <send_falling_edge+0x14>
 514:	00 00       	nop
 516:	40 e0       	ldi	r20, 0x00	; 0
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	81 e4       	ldi	r24, 0x41	; 65
 51c:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_write>
 520:	83 ef       	ldi	r24, 0xF3	; 243
 522:	91 e0       	ldi	r25, 0x01	; 1
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	f1 f7       	brne	.-4      	; 0x524 <send_falling_edge+0x24>
 528:	00 c0       	rjmp	.+0      	; 0x52a <send_falling_edge+0x2a>
 52a:	00 00       	nop
 52c:	08 95       	ret

0000052e <LCD_vSend_cmd>:
 52e:	cf 93       	push	r28
 530:	c8 2f       	mov	r28, r24
 532:	68 2f       	mov	r22, r24
 534:	62 95       	swap	r22
 536:	6f 70       	andi	r22, 0x0F	; 15
 538:	84 e4       	ldi	r24, 0x44	; 68
 53a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <write_high_nibble>
 53e:	40 e0       	ldi	r20, 0x00	; 0
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	81 e4       	ldi	r24, 0x41	; 65
 544:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_write>
 548:	0e 94 80 02 	call	0x500	; 0x500 <send_falling_edge>
 54c:	6c 2f       	mov	r22, r28
 54e:	84 e4       	ldi	r24, 0x44	; 68
 550:	0e 94 ff 01 	call	0x3fe	; 0x3fe <write_high_nibble>
 554:	40 e0       	ldi	r20, 0x00	; 0
 556:	61 e0       	ldi	r22, 0x01	; 1
 558:	81 e4       	ldi	r24, 0x41	; 65
 55a:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_write>
 55e:	0e 94 80 02 	call	0x500	; 0x500 <send_falling_edge>
 562:	89 ef       	ldi	r24, 0xF9	; 249
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	01 97       	sbiw	r24, 0x01	; 1
 568:	f1 f7       	brne	.-4      	; 0x566 <LCD_vSend_cmd+0x38>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <LCD_vSend_cmd+0x3e>
 56c:	00 00       	nop
 56e:	cf 91       	pop	r28
 570:	08 95       	ret

00000572 <LCD_vInit>:
 572:	87 e8       	ldi	r24, 0x87	; 135
 574:	93 e1       	ldi	r25, 0x13	; 19
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	f1 f7       	brne	.-4      	; 0x576 <LCD_vInit+0x4>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <LCD_vInit+0xa>
 57c:	00 00       	nop
 57e:	41 e0       	ldi	r20, 0x01	; 1
 580:	64 e0       	ldi	r22, 0x04	; 4
 582:	84 e4       	ldi	r24, 0x44	; 68
 584:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_vsetPINDir>
 588:	41 e0       	ldi	r20, 0x01	; 1
 58a:	65 e0       	ldi	r22, 0x05	; 5
 58c:	84 e4       	ldi	r24, 0x44	; 68
 58e:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_vsetPINDir>
 592:	41 e0       	ldi	r20, 0x01	; 1
 594:	66 e0       	ldi	r22, 0x06	; 6
 596:	84 e4       	ldi	r24, 0x44	; 68
 598:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_vsetPINDir>
 59c:	41 e0       	ldi	r20, 0x01	; 1
 59e:	67 e0       	ldi	r22, 0x07	; 7
 5a0:	84 e4       	ldi	r24, 0x44	; 68
 5a2:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_vsetPINDir>
 5a6:	41 e0       	ldi	r20, 0x01	; 1
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	81 e4       	ldi	r24, 0x41	; 65
 5ac:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_vsetPINDir>
 5b0:	41 e0       	ldi	r20, 0x01	; 1
 5b2:	62 e0       	ldi	r22, 0x02	; 2
 5b4:	81 e4       	ldi	r24, 0x41	; 65
 5b6:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_vsetPINDir>
 5ba:	41 e0       	ldi	r20, 0x01	; 1
 5bc:	61 e0       	ldi	r22, 0x01	; 1
 5be:	81 e4       	ldi	r24, 0x41	; 65
 5c0:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_vsetPINDir>
 5c4:	40 e0       	ldi	r20, 0x00	; 0
 5c6:	62 e0       	ldi	r22, 0x02	; 2
 5c8:	81 e4       	ldi	r24, 0x41	; 65
 5ca:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_write>
 5ce:	82 e0       	ldi	r24, 0x02	; 2
 5d0:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_vSend_cmd>
 5d4:	83 ec       	ldi	r24, 0xC3	; 195
 5d6:	99 e0       	ldi	r25, 0x09	; 9
 5d8:	01 97       	sbiw	r24, 0x01	; 1
 5da:	f1 f7       	brne	.-4      	; 0x5d8 <LCD_vInit+0x66>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <LCD_vInit+0x6c>
 5de:	00 00       	nop
 5e0:	88 e2       	ldi	r24, 0x28	; 40
 5e2:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_vSend_cmd>
 5e6:	89 ef       	ldi	r24, 0xF9	; 249
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	01 97       	sbiw	r24, 0x01	; 1
 5ec:	f1 f7       	brne	.-4      	; 0x5ea <LCD_vInit+0x78>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <LCD_vInit+0x7e>
 5f0:	00 00       	nop
 5f2:	8e e0       	ldi	r24, 0x0E	; 14
 5f4:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_vSend_cmd>
 5f8:	89 ef       	ldi	r24, 0xF9	; 249
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	01 97       	sbiw	r24, 0x01	; 1
 5fe:	f1 f7       	brne	.-4      	; 0x5fc <LCD_vInit+0x8a>
 600:	00 c0       	rjmp	.+0      	; 0x602 <LCD_vInit+0x90>
 602:	00 00       	nop
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_vSend_cmd>
 60a:	83 ec       	ldi	r24, 0xC3	; 195
 60c:	99 e0       	ldi	r25, 0x09	; 9
 60e:	01 97       	sbiw	r24, 0x01	; 1
 610:	f1 f7       	brne	.-4      	; 0x60e <LCD_vInit+0x9c>
 612:	00 c0       	rjmp	.+0      	; 0x614 <LCD_vInit+0xa2>
 614:	00 00       	nop
 616:	86 e0       	ldi	r24, 0x06	; 6
 618:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_vSend_cmd>
 61c:	89 ef       	ldi	r24, 0xF9	; 249
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	01 97       	sbiw	r24, 0x01	; 1
 622:	f1 f7       	brne	.-4      	; 0x620 <LCD_vInit+0xae>
 624:	00 c0       	rjmp	.+0      	; 0x626 <LCD_vInit+0xb4>
 626:	00 00       	nop
 628:	08 95       	ret

0000062a <LCD_vSend_char>:
 62a:	cf 93       	push	r28
 62c:	c8 2f       	mov	r28, r24
 62e:	68 2f       	mov	r22, r24
 630:	62 95       	swap	r22
 632:	6f 70       	andi	r22, 0x0F	; 15
 634:	84 e4       	ldi	r24, 0x44	; 68
 636:	0e 94 ff 01 	call	0x3fe	; 0x3fe <write_high_nibble>
 63a:	41 e0       	ldi	r20, 0x01	; 1
 63c:	61 e0       	ldi	r22, 0x01	; 1
 63e:	81 e4       	ldi	r24, 0x41	; 65
 640:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_write>
 644:	0e 94 80 02 	call	0x500	; 0x500 <send_falling_edge>
 648:	6c 2f       	mov	r22, r28
 64a:	84 e4       	ldi	r24, 0x44	; 68
 64c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <write_high_nibble>
 650:	41 e0       	ldi	r20, 0x01	; 1
 652:	61 e0       	ldi	r22, 0x01	; 1
 654:	81 e4       	ldi	r24, 0x41	; 65
 656:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_write>
 65a:	0e 94 80 02 	call	0x500	; 0x500 <send_falling_edge>
 65e:	89 ef       	ldi	r24, 0xF9	; 249
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	01 97       	sbiw	r24, 0x01	; 1
 664:	f1 f7       	brne	.-4      	; 0x662 <LCD_vSend_char+0x38>
 666:	00 c0       	rjmp	.+0      	; 0x668 <LCD_vSend_char+0x3e>
 668:	00 00       	nop
 66a:	cf 91       	pop	r28
 66c:	08 95       	ret

0000066e <LCD_clearscreen>:

void LCD_clearscreen(void)
{
	LCD_vSend_cmd(CLR_SCREEN);
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_vSend_cmd>
 674:	83 ec       	ldi	r24, 0xC3	; 195
 676:	99 e0       	ldi	r25, 0x09	; 9
 678:	01 97       	sbiw	r24, 0x01	; 1
 67a:	f1 f7       	brne	.-4      	; 0x678 <LCD_clearscreen+0xa>
 67c:	00 c0       	rjmp	.+0      	; 0x67e <LCD_clearscreen+0x10>
 67e:	00 00       	nop
 680:	08 95       	ret

00000682 <LCD_movecursor>:

void LCD_movecursor(c8 row, c8 coloumn)
{
	char data = 0;
	
	if (row > 2 || row < 1 || coloumn > 16 || coloumn < 1)
 682:	9f ef       	ldi	r25, 0xFF	; 255
 684:	98 0f       	add	r25, r24
 686:	92 30       	cpi	r25, 0x02	; 2
 688:	70 f4       	brcc	.+28     	; 0x6a6 <LCD_movecursor+0x24>
 68a:	61 31       	cpi	r22, 0x11	; 17
 68c:	70 f4       	brcc	.+28     	; 0x6aa <LCD_movecursor+0x28>
 68e:	66 23       	and	r22, r22
 690:	71 f0       	breq	.+28     	; 0x6ae <LCD_movecursor+0x2c>
	{
		data = 0x80;
	}
	else if (row == 1)
 692:	81 30       	cpi	r24, 0x01	; 1
 694:	19 f4       	brne	.+6      	; 0x69c <LCD_movecursor+0x1a>
	{
		data = 0x80 + coloumn - 1;
 696:	8f e7       	ldi	r24, 0x7F	; 127
 698:	86 0f       	add	r24, r22
 69a:	0c c0       	rjmp	.+24     	; 0x6b4 <LCD_movecursor+0x32>
	}
	else if (row == 2)
 69c:	82 30       	cpi	r24, 0x02	; 2
 69e:	49 f4       	brne	.+18     	; 0x6b2 <LCD_movecursor+0x30>
	{
		data = 0xc0 + coloumn - 1;
 6a0:	8f eb       	ldi	r24, 0xBF	; 191
 6a2:	86 0f       	add	r24, r22
 6a4:	07 c0       	rjmp	.+14     	; 0x6b4 <LCD_movecursor+0x32>
{
	char data = 0;
	
	if (row > 2 || row < 1 || coloumn > 16 || coloumn < 1)
	{
		data = 0x80;
 6a6:	80 e8       	ldi	r24, 0x80	; 128
 6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <LCD_movecursor+0x32>
 6aa:	80 e8       	ldi	r24, 0x80	; 128
 6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <LCD_movecursor+0x32>
 6ae:	80 e8       	ldi	r24, 0x80	; 128
 6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <LCD_movecursor+0x32>
	_delay_ms(10);
}

void LCD_movecursor(c8 row, c8 coloumn)
{
	char data = 0;
 6b2:	80 e0       	ldi	r24, 0x00	; 0
	else if (row == 2)
	{
		data = 0xc0 + coloumn - 1;
	}
	
	LCD_vSend_cmd(data);
 6b4:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_vSend_cmd>
 6b8:	89 ef       	ldi	r24, 0xF9	; 249
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	01 97       	sbiw	r24, 0x01	; 1
 6be:	f1 f7       	brne	.-4      	; 0x6bc <LCD_movecursor+0x3a>
 6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <LCD_movecursor+0x40>
 6c2:	00 00       	nop
 6c4:	08 95       	ret

000006c6 <LCD_SendStringRowCol>:
	_delay_ms(1);
}

void LCD_SendStringRowCol(u8 row, u8 col, c8 * data)
{
 6c6:	cf 93       	push	r28
 6c8:	df 93       	push	r29
 6ca:	ea 01       	movw	r28, r20
	LCD_movecursor(row, col);
 6cc:	0e 94 41 03 	call	0x682	; 0x682 <LCD_movecursor>
    for(counter = 0; data[counter] != '\0'; ++counter)
 6d0:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <counter>
 6d4:	07 c0       	rjmp	.+14     	; 0x6e4 <LCD_SendStringRowCol+0x1e>
    {
	    LCD_vSend_char(data[counter]);
 6d6:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_vSend_char>
}

void LCD_SendStringRowCol(u8 row, u8 col, c8 * data)
{
	LCD_movecursor(row, col);
    for(counter = 0; data[counter] != '\0'; ++counter)
 6da:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <counter>
 6de:	8f 5f       	subi	r24, 0xFF	; 255
 6e0:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <counter>
 6e4:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <counter>
 6e8:	fe 01       	movw	r30, r28
 6ea:	e8 0f       	add	r30, r24
 6ec:	f1 1d       	adc	r31, r1
 6ee:	80 81       	ld	r24, Z
 6f0:	81 11       	cpse	r24, r1
 6f2:	f1 cf       	rjmp	.-30     	; 0x6d6 <LCD_SendStringRowCol+0x10>
    {
	    LCD_vSend_char(data[counter]);
    }
}
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	08 95       	ret

000006fa <main>:
#include "app.h"

int main(void)
{
	Init();
 6fa:	0e 94 49 00 	call	0x92	; 0x92 <Init>
	Welcome_Screen();
 6fe:	0e 94 5b 00 	call	0xb6	; 0xb6 <Welcome_Screen>
	IDLE_Screen();
 702:	0e 94 ad 00 	call	0x15a	; 0x15a <IDLE_Screen>
		//LCD_vSend_char('A');
		//T0delay();
		//LCD_vSend_char('B');
		//T0delay();
		
	    u8 val = UsrGetVal();
 706:	0e 94 c9 00 	call	0x192	; 0x192 <UsrGetVal>
	    
	    if (val == '#')
 70a:	83 32       	cpi	r24, 0x23	; 35
 70c:	e1 f7       	brne	.-8      	; 0x706 <main+0xc>
	    {
			LCD_SendStringRowCol(2, 1, "STATE:OPERATION");
 70e:	4e e8       	ldi	r20, 0x8E	; 142
 710:	50 e0       	ldi	r21, 0x00	; 0
 712:	61 e0       	ldi	r22, 0x01	; 1
 714:	82 e0       	ldi	r24, 0x02	; 2
 716:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_SendStringRowCol>
			LCD_movecursor(1, 5);
 71a:	65 e0       	ldi	r22, 0x05	; 5
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	0e 94 41 03 	call	0x682	; 0x682 <LCD_movecursor>
			//u8 value = UsrGetVal();
			Start_Communication();
 722:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Start_Communication>
 726:	ef cf       	rjmp	.-34     	; 0x706 <main+0xc>

00000728 <SPI_masterInit>:
	//for (counter = 0; counter < SPI_NPINs; ++counter)
	//{
	//DIO_vsetPINDir(SPI_PORT, SPI_PINs[counter], 0xff);
	//}
	
	DDRB = (1 << MOSI) | (1 << SCK) | (1 << SS);
 728:	80 eb       	ldi	r24, 0xB0	; 176
 72a:	87 bb       	out	0x17, r24	; 23
	
	/* Enable Master Mode */
	SET_BIT(SPCR, MSTR);
 72c:	8d b1       	in	r24, 0x0d	; 13
 72e:	80 61       	ori	r24, 0x10	; 16
 730:	8d b9       	out	0x0d, r24	; 13
	/* Set clock to fosc/16*/
	SET_BIT(SPCR, SPR0);
 732:	8d b1       	in	r24, 0x0d	; 13
 734:	81 60       	ori	r24, 0x01	; 1
 736:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(SPCR, SPR1);
 738:	8d b1       	in	r24, 0x0d	; 13
 73a:	82 60       	ori	r24, 0x02	; 2
 73c:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(SPCR, CPHA);
 73e:	8d b1       	in	r24, 0x0d	; 13
 740:	84 60       	ori	r24, 0x04	; 4
 742:	8d b9       	out	0x0d, r24	; 13
	/* Enable SPI */
	SET_BIT(SPCR, SPE);
 744:	8d b1       	in	r24, 0x0d	; 13
 746:	80 64       	ori	r24, 0x40	; 64
 748:	8d b9       	out	0x0d, r24	; 13
	/* Enable interrupt */
	SET_BIT(SPCR, SPIE);
 74a:	8d b1       	in	r24, 0x0d	; 13
 74c:	80 68       	ori	r24, 0x80	; 128
 74e:	8d b9       	out	0x0d, r24	; 13
 750:	08 95       	ret

00000752 <SPI_masterTransmit>:
}

void SPI_masterTransmit(char data)
{
	/* Start the Transmission */
	SPDR = data;
 752:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for Completion */
	while(!(SPSR & (1 << SPIF)));
 754:	77 9b       	sbis	0x0e, 7	; 14
 756:	fe cf       	rjmp	.-4      	; 0x754 <SPI_masterTransmit+0x2>
}
 758:	08 95       	ret

0000075a <SPI_masterReceive>:

char SPI_masterReceive(void)
{
	/* wait for the SPI buffer's full */
	while(!(SPSR & (1 << SPIF)));
 75a:	77 9b       	sbis	0x0e, 7	; 14
 75c:	fe cf       	rjmp	.-4      	; 0x75a <SPI_masterReceive>
	/* return SPI buffer */
	return SPDR;
 75e:	8f b1       	in	r24, 0x0f	; 15
}
 760:	08 95       	ret

00000762 <TC72_Init>:

void TC72_Init(void)
{
	SET_BIT(PORTB, 4);
 762:	88 b3       	in	r24, 0x18	; 24
 764:	80 61       	ori	r24, 0x10	; 16
 766:	88 bb       	out	0x18, r24	; 24
	/* Select control register */
	SPI_masterTransmit(0x80);
 768:	80 e8       	ldi	r24, 0x80	; 128
 76a:	0e 94 a9 03 	call	0x752	; 0x752 <SPI_masterTransmit>
	
	/* Select Continuous temperature conversion */
	SPI_masterTransmit(0x40);
 76e:	80 e4       	ldi	r24, 0x40	; 64
 770:	0e 94 a9 03 	call	0x752	; 0x752 <SPI_masterTransmit>
	CLR_BIT(PORTB, 4);
 774:	88 b3       	in	r24, 0x18	; 24
 776:	8f 7e       	andi	r24, 0xEF	; 239
 778:	88 bb       	out	0x18, r24	; 24
 77a:	8b e7       	ldi	r24, 0x7B	; 123
 77c:	92 e9       	ldi	r25, 0x92	; 146
 77e:	01 97       	sbiw	r24, 0x01	; 1
 780:	f1 f7       	brne	.-4      	; 0x77e <TC72_Init+0x1c>
 782:	00 c0       	rjmp	.+0      	; 0x784 <TC72_Init+0x22>
 784:	00 00       	nop
 786:	08 95       	ret

00000788 <_exit>:
 788:	f8 94       	cli

0000078a <__stop_program>:
 78a:	ff cf       	rjmp	.-2      	; 0x78a <__stop_program>
