
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000067c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  000006f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000720  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd6  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ef  00000000  00000000  00001442  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000064c  00000000  00000000  00001c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00002280  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000516  00000000  00000000  0000249c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000243  00000000  00000000  000029b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00002bf5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  8a:	0c 94 3c 03 	jmp	0x678	; 0x678 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
//#include "Interrupts.h"
//#include "Interrupt_names.h"
//#include "INT_R.h"

ISR(INT0_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
	//PORTA= 0xFF;
	//*((u8 *)(0x3B)) = ~(*((u8 *)(0x3B)));
	//for(u8 i = 0; i < 255; ++i){ ; }
	
}
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <main>:

int main(void)
{
    /* Replace with your application code */
	init_timer_CTC(1, 1);
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	0e 94 62 01 	call	0x2c4	; 0x2c4 <init_timer_CTC>
	(SREG) |= (1 << 7);
  ae:	8f b7       	in	r24, 0x3f	; 63
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	8f bf       	out	0x3f, r24	; 63
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0xe>

000000b6 <setCountMinutes>:
	;
}

// TODO implement this
void drivePWM()
{
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <countMinutes>
  bc:	08 95       	ret

000000be <setCheckTemp>:
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <checkTemp>
  c4:	08 95       	ret

000000c6 <setVoltModule>:
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <voltModule>
  cc:	08 95       	ret

000000ce <setOverHeating>:
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  d4:	08 95       	ret

000000d6 <clearCountMinutes>:
  d6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <countMinutes>
  da:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <minute_counter+0x1>
  de:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <minute_counter>
  e2:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <minutes_elapsed>
  e6:	08 95       	ret

000000e8 <clearCheckTemp>:
  e8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <checkTemp>
  ec:	08 95       	ret

000000ee <clearVoltModule>:
  ee:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <voltModule>
  f2:	08 95       	ret

000000f4 <clearOverHeating>:
  f4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  f8:	08 95       	ret

000000fa <schedule>:

static int index = 0;

void schedule()
{
	ms_elapsed += 1;
  fa:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <ms_elapsed>
  fe:	50 91 68 00 	lds	r21, 0x0068	; 0x800068 <ms_elapsed+0x1>
 102:	4f 5f       	subi	r20, 0xFF	; 255
 104:	5f 4f       	sbci	r21, 0xFF	; 255
 106:	50 93 68 00 	sts	0x0068, r21	; 0x800068 <ms_elapsed+0x1>
 10a:	40 93 67 00 	sts	0x0067, r20	; 0x800067 <ms_elapsed>

	if (ms_elapsed % 50)
 10e:	9a 01       	movw	r18, r20
 110:	36 95       	lsr	r19
 112:	27 95       	ror	r18
 114:	ab e7       	ldi	r26, 0x7B	; 123
 116:	b4 e1       	ldi	r27, 0x14	; 20
 118:	0e 94 2d 03 	call	0x65a	; 0x65a <__umulhisi3>
 11c:	96 95       	lsr	r25
 11e:	87 95       	ror	r24
 120:	62 e3       	ldi	r22, 0x32	; 50
 122:	68 9f       	mul	r22, r24
 124:	90 01       	movw	r18, r0
 126:	69 9f       	mul	r22, r25
 128:	30 0d       	add	r19, r0
 12a:	11 24       	eor	r1, r1
 12c:	42 17       	cp	r20, r18
 12e:	53 07       	cpc	r21, r19
 130:	11 f0       	breq	.+4      	; 0x136 <schedule+0x3c>
	{
		setState();
 132:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <setState>
			drivePWM();
		}

	}

	if (minutes_elapsed % 3)
 136:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <minutes_elapsed>
 13a:	8b ea       	ldi	r24, 0xAB	; 171
 13c:	98 9f       	mul	r25, r24
 13e:	81 2d       	mov	r24, r1
 140:	11 24       	eor	r1, r1
 142:	86 95       	lsr	r24
 144:	28 2f       	mov	r18, r24
 146:	22 0f       	add	r18, r18
 148:	82 0f       	add	r24, r18
 14a:	98 17       	cp	r25, r24
 14c:	29 f0       	breq	.+10     	; 0x158 <schedule+0x5e>
	{
		if (overHeating)
 14e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 152:	81 11       	cpse	r24, r1
		{
			setErrorFlag();
 154:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setErrorFlag>
		}
	}

	// ______________________

	if (countMinutes)
 158:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <countMinutes>
 15c:	88 23       	and	r24, r24
 15e:	49 f0       	breq	.+18     	; 0x172 <schedule+0x78>
	{
		minute_counter += 1;
 160:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <minute_counter>
 164:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <minute_counter+0x1>
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <minute_counter+0x1>
 16e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <minute_counter>
	}
	if (minute_counter >= 60000)
 172:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <minute_counter>
 176:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <minute_counter+0x1>
 17a:	80 36       	cpi	r24, 0x60	; 96
 17c:	9a 4e       	sbci	r25, 0xEA	; 234
 17e:	48 f0       	brcs	.+18     	; 0x192 <schedule+0x98>
	{
		minute_counter = 0;
 180:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <minute_counter+0x1>
 184:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <minute_counter>
		minutes_elapsed += 1;
 188:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <minutes_elapsed>
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <minutes_elapsed>
 192:	08 95       	ret

00000194 <__vector_4>:

// ______________________


ISR(TIMER2_COMP_vect)
{
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	2f 93       	push	r18
 1a0:	3f 93       	push	r19
 1a2:	4f 93       	push	r20
 1a4:	5f 93       	push	r21
 1a6:	6f 93       	push	r22
 1a8:	7f 93       	push	r23
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	af 93       	push	r26
 1b0:	bf 93       	push	r27
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
	schedule();
 1b6:	0e 94 7d 00 	call	0xfa	; 0xfa <schedule>
}
 1ba:	ff 91       	pop	r31
 1bc:	ef 91       	pop	r30
 1be:	bf 91       	pop	r27
 1c0:	af 91       	pop	r26
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	7f 91       	pop	r23
 1c8:	6f 91       	pop	r22
 1ca:	5f 91       	pop	r21
 1cc:	4f 91       	pop	r20
 1ce:	3f 91       	pop	r19
 1d0:	2f 91       	pop	r18
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <setErrorFlag>:
	errorFlag = 1;
}

void clearErrorFlag()
{
	errorFlag = 0;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <errorFlag>
 1e2:	08 95       	ret

000001e4 <getCurrentTemp>:

// TODO
int getCurrentTemp()
{
	;
}
 1e4:	08 95       	ret

000001e6 <getSetTemp>:
int getSetTemp()
{
	;
}
 1e6:	08 95       	ret

000001e8 <setState>:

void setState()
{
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
	switch (curState)
 1ee:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <curState>
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	69 f0       	breq	.+26     	; 0x210 <setState+0x28>
 1f6:	38 f0       	brcs	.+14     	; 0x206 <setState+0x1e>
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	09 f4       	brne	.+2      	; 0x1fe <setState+0x16>
 1fc:	56 c0       	rjmp	.+172    	; 0x2aa <setState+0xc2>
 1fe:	83 30       	cpi	r24, 0x03	; 3
 200:	09 f4       	brne	.+2      	; 0x204 <setState+0x1c>
 202:	58 c0       	rjmp	.+176    	; 0x2b4 <setState+0xcc>
 204:	5b c0       	rjmp	.+182    	; 0x2bc <setState+0xd4>
	{
		case STANDBY:
		{
			clearVoltModule();
 206:	0e 94 77 00 	call	0xee	; 0xee <clearVoltModule>
			clearCheckTemp();
 20a:	0e 94 74 00 	call	0xe8	; 0xe8 <clearCheckTemp>
 20e:	56 c0       	rjmp	.+172    	; 0x2bc <setState+0xd4>
			break;
		}

		case OPERATION:
		{
			setCheckTemp();
 210:	0e 94 5f 00 	call	0xbe	; 0xbe <setCheckTemp>
			setVoltModule();
 214:	0e 94 63 00 	call	0xc6	; 0xc6 <setVoltModule>

			u8 currentTemp = getCurrentTemp();
 218:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <getCurrentTemp>
 21c:	8c 01       	movw	r16, r24
 21e:	c8 2f       	mov	r28, r24
			u8 setTemp = getSetTemp();
 220:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <getSetTemp>
 224:	28 2f       	mov	r18, r24
			if ((currentTemp > setTemp) && ((currentTemp - setTemp) <= 5))
 226:	80 17       	cp	r24, r16
 228:	78 f4       	brcc	.+30     	; 0x248 <setState+0x60>
 22a:	a8 01       	movw	r20, r16
 22c:	55 27       	eor	r21, r21
 22e:	48 1b       	sub	r20, r24
 230:	51 09       	sbc	r21, r1
 232:	46 30       	cpi	r20, 0x06	; 6
 234:	51 05       	cpc	r21, r1
 236:	44 f4       	brge	.+16     	; 0x248 <setState+0x60>
			{
				curState = NORMAL;
 238:	82 e0       	ldi	r24, 0x02	; 2
 23a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <curState>
				clearCountMinutes();
 23e:	0e 94 6b 00 	call	0xd6	; 0xd6 <clearCountMinutes>
				clearOverHeating();
 242:	0e 94 7a 00 	call	0xf4	; 0xf4 <clearOverHeating>
 246:	29 c0       	rjmp	.+82     	; 0x29a <setState+0xb2>
			}
			else if ((currentTemp < setTemp) && ((setTemp - currentTemp) <= 5))
 248:	c2 17       	cp	r28, r18
 24a:	78 f4       	brcc	.+30     	; 0x26a <setState+0x82>
 24c:	ac 01       	movw	r20, r24
 24e:	55 27       	eor	r21, r21
 250:	40 1b       	sub	r20, r16
 252:	51 09       	sbc	r21, r1
 254:	46 30       	cpi	r20, 0x06	; 6
 256:	51 05       	cpc	r21, r1
 258:	44 f4       	brge	.+16     	; 0x26a <setState+0x82>
			{
				curState = NORMAL;
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <curState>
				clearCountMinutes();
 260:	0e 94 6b 00 	call	0xd6	; 0xd6 <clearCountMinutes>
				clearOverHeating();
 264:	0e 94 7a 00 	call	0xf4	; 0xf4 <clearOverHeating>
 268:	18 c0       	rjmp	.+48     	; 0x29a <setState+0xb2>
			}
			else if((currentTemp > setTemp) && ((currentTemp - setTemp) > 10))
 26a:	2c 17       	cp	r18, r28
 26c:	58 f4       	brcc	.+22     	; 0x284 <setState+0x9c>
 26e:	a8 01       	movw	r20, r16
 270:	55 27       	eor	r21, r21
 272:	48 1b       	sub	r20, r24
 274:	51 09       	sbc	r21, r1
 276:	4b 30       	cpi	r20, 0x0B	; 11
 278:	51 05       	cpc	r21, r1
 27a:	24 f0       	brlt	.+8      	; 0x284 <setState+0x9c>
			{
				curState = ERROR;
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <curState>
 282:	0b c0       	rjmp	.+22     	; 0x29a <setState+0xb2>
			}
			else if ((setTemp > currentTemp) && ((setTemp - currentTemp) > 5))
 284:	c2 17       	cp	r28, r18
 286:	48 f4       	brcc	.+18     	; 0x29a <setState+0xb2>
 288:	99 27       	eor	r25, r25
 28a:	80 1b       	sub	r24, r16
 28c:	91 09       	sbc	r25, r1
 28e:	06 97       	sbiw	r24, 0x06	; 6
 290:	24 f0       	brlt	.+8      	; 0x29a <setState+0xb2>
			{
				setCountMinutes();
 292:	0e 94 5b 00 	call	0xb6	; 0xb6 <setCountMinutes>
				setOverHeating();
 296:	0e 94 67 00 	call	0xce	; 0xce <setOverHeating>

			if (hash_pressed == 1)
			{
				curState = STANDBY;
			}
			if(errorFlag)
 29a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <errorFlag>
 29e:	88 23       	and	r24, r24
 2a0:	69 f0       	breq	.+26     	; 0x2bc <setState+0xd4>
			{
				curState = ERROR;
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <curState>
 2a8:	09 c0       	rjmp	.+18     	; 0x2bc <setState+0xd4>
			break;
		}

		case NORMAL:
		{
			setCheckTemp();
 2aa:	0e 94 5f 00 	call	0xbe	; 0xbe <setCheckTemp>
			clearVoltModule();
 2ae:	0e 94 77 00 	call	0xee	; 0xee <clearVoltModule>
			break;
 2b2:	04 c0       	rjmp	.+8      	; 0x2bc <setState+0xd4>
		}

		case ERROR:
		{
			clearCheckTemp();
 2b4:	0e 94 74 00 	call	0xe8	; 0xe8 <clearCheckTemp>
			clearVoltModule();
 2b8:	0e 94 77 00 	call	0xee	; 0xee <clearVoltModule>
			break;
		}
		default:
		break;
	}
 2bc:	cf 91       	pop	r28
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	08 95       	ret

000002c4 <init_timer_CTC>:
volatile u8 * const TCCRs[] = {TCCR0, TCCR2};
volatile u8 * const TCNTs[] = {TCNT0, TCNT2};
*/

void init_timer_CTC(u8 id, u8 TimerValue)
{
 2c4:	cf 93       	push	r28
 2c6:	c8 2f       	mov	r28, r24
	// TimerValue is the time value in milli seconds
	if (id >= NUM_TIMERS) { setErrorFlag(); return; }
 2c8:	82 30       	cpi	r24, 0x02	; 2
 2ca:	18 f0       	brcs	.+6      	; 0x2d2 <init_timer_CTC+0xe>
 2cc:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setErrorFlag>
 2d0:	2b c0       	rjmp	.+86     	; 0x328 <init_timer_CTC+0x64>
	u16 counts = (TimerValue * (0.001 * (F_CPU / PRESCALAR))) - 1;
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 34 02 	call	0x468	; 0x468 <__floatsisf>
 2dc:	21 e0       	ldi	r18, 0x01	; 1
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	4a e7       	ldi	r20, 0x7A	; 122
 2e2:	51 e4       	ldi	r21, 0x41	; 65
 2e4:	0e 94 c0 02 	call	0x580	; 0x580 <__mulsf3>
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	40 e8       	ldi	r20, 0x80	; 128
 2ee:	5f e3       	ldi	r21, 0x3F	; 63
 2f0:	0e 94 96 01 	call	0x32c	; 0x32c <__subsf3>
 2f4:	0e 94 03 02 	call	0x406	; 0x406 <__fixunssfsi>
	
	if (counts > 255)
 2f8:	6f 3f       	cpi	r22, 0xFF	; 255
 2fa:	71 05       	cpc	r23, r1
 2fc:	21 f0       	breq	.+8      	; 0x306 <init_timer_CTC+0x42>
 2fe:	18 f0       	brcs	.+6      	; 0x306 <init_timer_CTC+0x42>
	{
		setErrorFlag();
 300:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setErrorFlag>
		return;
 304:	11 c0       	rjmp	.+34     	; 0x328 <init_timer_CTC+0x64>
	}
	if (id == 0)
 306:	c1 11       	cpse	r28, r1
 308:	07 c0       	rjmp	.+14     	; 0x318 <init_timer_CTC+0x54>
	{
		OCR0 = (u8) counts;
 30a:	6c bf       	out	0x3c, r22	; 60
		TCCR0 = 0b0001101;
 30c:	8d e0       	ldi	r24, 0x0D	; 13
 30e:	83 bf       	out	0x33, r24	; 51
		TIMSK |= (1 << OCIE0);
 310:	89 b7       	in	r24, 0x39	; 57
 312:	82 60       	ori	r24, 0x02	; 2
 314:	89 bf       	out	0x39, r24	; 57
 316:	08 c0       	rjmp	.+16     	; 0x328 <init_timer_CTC+0x64>
	}else if (id == 1)
 318:	c1 30       	cpi	r28, 0x01	; 1
 31a:	31 f4       	brne	.+12     	; 0x328 <init_timer_CTC+0x64>
	{
		OCR2 = (u8) counts;
 31c:	63 bd       	out	0x23, r22	; 35
		TCCR2 = 0b0001101;
 31e:	8d e0       	ldi	r24, 0x0D	; 13
 320:	85 bd       	out	0x25, r24	; 37
		TIMSK |= (1 << OCIE2);
 322:	89 b7       	in	r24, 0x39	; 57
 324:	80 68       	ori	r24, 0x80	; 128
 326:	89 bf       	out	0x39, r24	; 57
	*((u8 *)(OCRs[id])) = (u8) counts;
	// CTC mode with 1024 prescalar
	*((u8 *)(TCCRs[id])) = 0b0001101;
	*((u8 *)(TIMSK)) |= (1 << OCIEs[id]);
	*/
}
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <__subsf3>:
 32c:	50 58       	subi	r21, 0x80	; 128

0000032e <__addsf3>:
 32e:	bb 27       	eor	r27, r27
 330:	aa 27       	eor	r26, r26
 332:	0e 94 ae 01 	call	0x35c	; 0x35c <__addsf3x>
 336:	0c 94 86 02 	jmp	0x50c	; 0x50c <__fp_round>
 33a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__fp_pscA>
 33e:	38 f0       	brcs	.+14     	; 0x34e <__addsf3+0x20>
 340:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__fp_pscB>
 344:	20 f0       	brcs	.+8      	; 0x34e <__addsf3+0x20>
 346:	39 f4       	brne	.+14     	; 0x356 <__addsf3+0x28>
 348:	9f 3f       	cpi	r25, 0xFF	; 255
 34a:	19 f4       	brne	.+6      	; 0x352 <__addsf3+0x24>
 34c:	26 f4       	brtc	.+8      	; 0x356 <__addsf3+0x28>
 34e:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__fp_nan>
 352:	0e f4       	brtc	.+2      	; 0x356 <__addsf3+0x28>
 354:	e0 95       	com	r30
 356:	e7 fb       	bst	r30, 7
 358:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__fp_inf>

0000035c <__addsf3x>:
 35c:	e9 2f       	mov	r30, r25
 35e:	0e 94 97 02 	call	0x52e	; 0x52e <__fp_split3>
 362:	58 f3       	brcs	.-42     	; 0x33a <__addsf3+0xc>
 364:	ba 17       	cp	r27, r26
 366:	62 07       	cpc	r22, r18
 368:	73 07       	cpc	r23, r19
 36a:	84 07       	cpc	r24, r20
 36c:	95 07       	cpc	r25, r21
 36e:	20 f0       	brcs	.+8      	; 0x378 <__addsf3x+0x1c>
 370:	79 f4       	brne	.+30     	; 0x390 <__addsf3x+0x34>
 372:	a6 f5       	brtc	.+104    	; 0x3dc <__addsf3x+0x80>
 374:	0c 94 b9 02 	jmp	0x572	; 0x572 <__fp_zero>
 378:	0e f4       	brtc	.+2      	; 0x37c <__addsf3x+0x20>
 37a:	e0 95       	com	r30
 37c:	0b 2e       	mov	r0, r27
 37e:	ba 2f       	mov	r27, r26
 380:	a0 2d       	mov	r26, r0
 382:	0b 01       	movw	r0, r22
 384:	b9 01       	movw	r22, r18
 386:	90 01       	movw	r18, r0
 388:	0c 01       	movw	r0, r24
 38a:	ca 01       	movw	r24, r20
 38c:	a0 01       	movw	r20, r0
 38e:	11 24       	eor	r1, r1
 390:	ff 27       	eor	r31, r31
 392:	59 1b       	sub	r21, r25
 394:	99 f0       	breq	.+38     	; 0x3bc <__addsf3x+0x60>
 396:	59 3f       	cpi	r21, 0xF9	; 249
 398:	50 f4       	brcc	.+20     	; 0x3ae <__addsf3x+0x52>
 39a:	50 3e       	cpi	r21, 0xE0	; 224
 39c:	68 f1       	brcs	.+90     	; 0x3f8 <__addsf3x+0x9c>
 39e:	1a 16       	cp	r1, r26
 3a0:	f0 40       	sbci	r31, 0x00	; 0
 3a2:	a2 2f       	mov	r26, r18
 3a4:	23 2f       	mov	r18, r19
 3a6:	34 2f       	mov	r19, r20
 3a8:	44 27       	eor	r20, r20
 3aa:	58 5f       	subi	r21, 0xF8	; 248
 3ac:	f3 cf       	rjmp	.-26     	; 0x394 <__addsf3x+0x38>
 3ae:	46 95       	lsr	r20
 3b0:	37 95       	ror	r19
 3b2:	27 95       	ror	r18
 3b4:	a7 95       	ror	r26
 3b6:	f0 40       	sbci	r31, 0x00	; 0
 3b8:	53 95       	inc	r21
 3ba:	c9 f7       	brne	.-14     	; 0x3ae <__addsf3x+0x52>
 3bc:	7e f4       	brtc	.+30     	; 0x3dc <__addsf3x+0x80>
 3be:	1f 16       	cp	r1, r31
 3c0:	ba 0b       	sbc	r27, r26
 3c2:	62 0b       	sbc	r22, r18
 3c4:	73 0b       	sbc	r23, r19
 3c6:	84 0b       	sbc	r24, r20
 3c8:	ba f0       	brmi	.+46     	; 0x3f8 <__addsf3x+0x9c>
 3ca:	91 50       	subi	r25, 0x01	; 1
 3cc:	a1 f0       	breq	.+40     	; 0x3f6 <__addsf3x+0x9a>
 3ce:	ff 0f       	add	r31, r31
 3d0:	bb 1f       	adc	r27, r27
 3d2:	66 1f       	adc	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	88 1f       	adc	r24, r24
 3d8:	c2 f7       	brpl	.-16     	; 0x3ca <__addsf3x+0x6e>
 3da:	0e c0       	rjmp	.+28     	; 0x3f8 <__addsf3x+0x9c>
 3dc:	ba 0f       	add	r27, r26
 3de:	62 1f       	adc	r22, r18
 3e0:	73 1f       	adc	r23, r19
 3e2:	84 1f       	adc	r24, r20
 3e4:	48 f4       	brcc	.+18     	; 0x3f8 <__addsf3x+0x9c>
 3e6:	87 95       	ror	r24
 3e8:	77 95       	ror	r23
 3ea:	67 95       	ror	r22
 3ec:	b7 95       	ror	r27
 3ee:	f7 95       	ror	r31
 3f0:	9e 3f       	cpi	r25, 0xFE	; 254
 3f2:	08 f0       	brcs	.+2      	; 0x3f6 <__addsf3x+0x9a>
 3f4:	b0 cf       	rjmp	.-160    	; 0x356 <__addsf3+0x28>
 3f6:	93 95       	inc	r25
 3f8:	88 0f       	add	r24, r24
 3fa:	08 f0       	brcs	.+2      	; 0x3fe <__addsf3x+0xa2>
 3fc:	99 27       	eor	r25, r25
 3fe:	ee 0f       	add	r30, r30
 400:	97 95       	ror	r25
 402:	87 95       	ror	r24
 404:	08 95       	ret

00000406 <__fixunssfsi>:
 406:	0e 94 9f 02 	call	0x53e	; 0x53e <__fp_splitA>
 40a:	88 f0       	brcs	.+34     	; 0x42e <__fixunssfsi+0x28>
 40c:	9f 57       	subi	r25, 0x7F	; 127
 40e:	98 f0       	brcs	.+38     	; 0x436 <__fixunssfsi+0x30>
 410:	b9 2f       	mov	r27, r25
 412:	99 27       	eor	r25, r25
 414:	b7 51       	subi	r27, 0x17	; 23
 416:	b0 f0       	brcs	.+44     	; 0x444 <__fixunssfsi+0x3e>
 418:	e1 f0       	breq	.+56     	; 0x452 <__fixunssfsi+0x4c>
 41a:	66 0f       	add	r22, r22
 41c:	77 1f       	adc	r23, r23
 41e:	88 1f       	adc	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	1a f0       	brmi	.+6      	; 0x42a <__fixunssfsi+0x24>
 424:	ba 95       	dec	r27
 426:	c9 f7       	brne	.-14     	; 0x41a <__fixunssfsi+0x14>
 428:	14 c0       	rjmp	.+40     	; 0x452 <__fixunssfsi+0x4c>
 42a:	b1 30       	cpi	r27, 0x01	; 1
 42c:	91 f0       	breq	.+36     	; 0x452 <__fixunssfsi+0x4c>
 42e:	0e 94 b9 02 	call	0x572	; 0x572 <__fp_zero>
 432:	b1 e0       	ldi	r27, 0x01	; 1
 434:	08 95       	ret
 436:	0c 94 b9 02 	jmp	0x572	; 0x572 <__fp_zero>
 43a:	67 2f       	mov	r22, r23
 43c:	78 2f       	mov	r23, r24
 43e:	88 27       	eor	r24, r24
 440:	b8 5f       	subi	r27, 0xF8	; 248
 442:	39 f0       	breq	.+14     	; 0x452 <__fixunssfsi+0x4c>
 444:	b9 3f       	cpi	r27, 0xF9	; 249
 446:	cc f3       	brlt	.-14     	; 0x43a <__fixunssfsi+0x34>
 448:	86 95       	lsr	r24
 44a:	77 95       	ror	r23
 44c:	67 95       	ror	r22
 44e:	b3 95       	inc	r27
 450:	d9 f7       	brne	.-10     	; 0x448 <__fixunssfsi+0x42>
 452:	3e f4       	brtc	.+14     	; 0x462 <__fixunssfsi+0x5c>
 454:	90 95       	com	r25
 456:	80 95       	com	r24
 458:	70 95       	com	r23
 45a:	61 95       	neg	r22
 45c:	7f 4f       	sbci	r23, 0xFF	; 255
 45e:	8f 4f       	sbci	r24, 0xFF	; 255
 460:	9f 4f       	sbci	r25, 0xFF	; 255
 462:	08 95       	ret

00000464 <__floatunsisf>:
 464:	e8 94       	clt
 466:	09 c0       	rjmp	.+18     	; 0x47a <__floatsisf+0x12>

00000468 <__floatsisf>:
 468:	97 fb       	bst	r25, 7
 46a:	3e f4       	brtc	.+14     	; 0x47a <__floatsisf+0x12>
 46c:	90 95       	com	r25
 46e:	80 95       	com	r24
 470:	70 95       	com	r23
 472:	61 95       	neg	r22
 474:	7f 4f       	sbci	r23, 0xFF	; 255
 476:	8f 4f       	sbci	r24, 0xFF	; 255
 478:	9f 4f       	sbci	r25, 0xFF	; 255
 47a:	99 23       	and	r25, r25
 47c:	a9 f0       	breq	.+42     	; 0x4a8 <__floatsisf+0x40>
 47e:	f9 2f       	mov	r31, r25
 480:	96 e9       	ldi	r25, 0x96	; 150
 482:	bb 27       	eor	r27, r27
 484:	93 95       	inc	r25
 486:	f6 95       	lsr	r31
 488:	87 95       	ror	r24
 48a:	77 95       	ror	r23
 48c:	67 95       	ror	r22
 48e:	b7 95       	ror	r27
 490:	f1 11       	cpse	r31, r1
 492:	f8 cf       	rjmp	.-16     	; 0x484 <__floatsisf+0x1c>
 494:	fa f4       	brpl	.+62     	; 0x4d4 <__floatsisf+0x6c>
 496:	bb 0f       	add	r27, r27
 498:	11 f4       	brne	.+4      	; 0x49e <__floatsisf+0x36>
 49a:	60 ff       	sbrs	r22, 0
 49c:	1b c0       	rjmp	.+54     	; 0x4d4 <__floatsisf+0x6c>
 49e:	6f 5f       	subi	r22, 0xFF	; 255
 4a0:	7f 4f       	sbci	r23, 0xFF	; 255
 4a2:	8f 4f       	sbci	r24, 0xFF	; 255
 4a4:	9f 4f       	sbci	r25, 0xFF	; 255
 4a6:	16 c0       	rjmp	.+44     	; 0x4d4 <__floatsisf+0x6c>
 4a8:	88 23       	and	r24, r24
 4aa:	11 f0       	breq	.+4      	; 0x4b0 <__floatsisf+0x48>
 4ac:	96 e9       	ldi	r25, 0x96	; 150
 4ae:	11 c0       	rjmp	.+34     	; 0x4d2 <__floatsisf+0x6a>
 4b0:	77 23       	and	r23, r23
 4b2:	21 f0       	breq	.+8      	; 0x4bc <__floatsisf+0x54>
 4b4:	9e e8       	ldi	r25, 0x8E	; 142
 4b6:	87 2f       	mov	r24, r23
 4b8:	76 2f       	mov	r23, r22
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <__floatsisf+0x5e>
 4bc:	66 23       	and	r22, r22
 4be:	71 f0       	breq	.+28     	; 0x4dc <__floatsisf+0x74>
 4c0:	96 e8       	ldi	r25, 0x86	; 134
 4c2:	86 2f       	mov	r24, r22
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	2a f0       	brmi	.+10     	; 0x4d4 <__floatsisf+0x6c>
 4ca:	9a 95       	dec	r25
 4cc:	66 0f       	add	r22, r22
 4ce:	77 1f       	adc	r23, r23
 4d0:	88 1f       	adc	r24, r24
 4d2:	da f7       	brpl	.-10     	; 0x4ca <__floatsisf+0x62>
 4d4:	88 0f       	add	r24, r24
 4d6:	96 95       	lsr	r25
 4d8:	87 95       	ror	r24
 4da:	97 f9       	bld	r25, 7
 4dc:	08 95       	ret

000004de <__fp_inf>:
 4de:	97 f9       	bld	r25, 7
 4e0:	9f 67       	ori	r25, 0x7F	; 127
 4e2:	80 e8       	ldi	r24, 0x80	; 128
 4e4:	70 e0       	ldi	r23, 0x00	; 0
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	08 95       	ret

000004ea <__fp_nan>:
 4ea:	9f ef       	ldi	r25, 0xFF	; 255
 4ec:	80 ec       	ldi	r24, 0xC0	; 192
 4ee:	08 95       	ret

000004f0 <__fp_pscA>:
 4f0:	00 24       	eor	r0, r0
 4f2:	0a 94       	dec	r0
 4f4:	16 16       	cp	r1, r22
 4f6:	17 06       	cpc	r1, r23
 4f8:	18 06       	cpc	r1, r24
 4fa:	09 06       	cpc	r0, r25
 4fc:	08 95       	ret

000004fe <__fp_pscB>:
 4fe:	00 24       	eor	r0, r0
 500:	0a 94       	dec	r0
 502:	12 16       	cp	r1, r18
 504:	13 06       	cpc	r1, r19
 506:	14 06       	cpc	r1, r20
 508:	05 06       	cpc	r0, r21
 50a:	08 95       	ret

0000050c <__fp_round>:
 50c:	09 2e       	mov	r0, r25
 50e:	03 94       	inc	r0
 510:	00 0c       	add	r0, r0
 512:	11 f4       	brne	.+4      	; 0x518 <__fp_round+0xc>
 514:	88 23       	and	r24, r24
 516:	52 f0       	brmi	.+20     	; 0x52c <__fp_round+0x20>
 518:	bb 0f       	add	r27, r27
 51a:	40 f4       	brcc	.+16     	; 0x52c <__fp_round+0x20>
 51c:	bf 2b       	or	r27, r31
 51e:	11 f4       	brne	.+4      	; 0x524 <__fp_round+0x18>
 520:	60 ff       	sbrs	r22, 0
 522:	04 c0       	rjmp	.+8      	; 0x52c <__fp_round+0x20>
 524:	6f 5f       	subi	r22, 0xFF	; 255
 526:	7f 4f       	sbci	r23, 0xFF	; 255
 528:	8f 4f       	sbci	r24, 0xFF	; 255
 52a:	9f 4f       	sbci	r25, 0xFF	; 255
 52c:	08 95       	ret

0000052e <__fp_split3>:
 52e:	57 fd       	sbrc	r21, 7
 530:	90 58       	subi	r25, 0x80	; 128
 532:	44 0f       	add	r20, r20
 534:	55 1f       	adc	r21, r21
 536:	59 f0       	breq	.+22     	; 0x54e <__fp_splitA+0x10>
 538:	5f 3f       	cpi	r21, 0xFF	; 255
 53a:	71 f0       	breq	.+28     	; 0x558 <__fp_splitA+0x1a>
 53c:	47 95       	ror	r20

0000053e <__fp_splitA>:
 53e:	88 0f       	add	r24, r24
 540:	97 fb       	bst	r25, 7
 542:	99 1f       	adc	r25, r25
 544:	61 f0       	breq	.+24     	; 0x55e <__fp_splitA+0x20>
 546:	9f 3f       	cpi	r25, 0xFF	; 255
 548:	79 f0       	breq	.+30     	; 0x568 <__fp_splitA+0x2a>
 54a:	87 95       	ror	r24
 54c:	08 95       	ret
 54e:	12 16       	cp	r1, r18
 550:	13 06       	cpc	r1, r19
 552:	14 06       	cpc	r1, r20
 554:	55 1f       	adc	r21, r21
 556:	f2 cf       	rjmp	.-28     	; 0x53c <__fp_split3+0xe>
 558:	46 95       	lsr	r20
 55a:	f1 df       	rcall	.-30     	; 0x53e <__fp_splitA>
 55c:	08 c0       	rjmp	.+16     	; 0x56e <__fp_splitA+0x30>
 55e:	16 16       	cp	r1, r22
 560:	17 06       	cpc	r1, r23
 562:	18 06       	cpc	r1, r24
 564:	99 1f       	adc	r25, r25
 566:	f1 cf       	rjmp	.-30     	; 0x54a <__fp_splitA+0xc>
 568:	86 95       	lsr	r24
 56a:	71 05       	cpc	r23, r1
 56c:	61 05       	cpc	r22, r1
 56e:	08 94       	sec
 570:	08 95       	ret

00000572 <__fp_zero>:
 572:	e8 94       	clt

00000574 <__fp_szero>:
 574:	bb 27       	eor	r27, r27
 576:	66 27       	eor	r22, r22
 578:	77 27       	eor	r23, r23
 57a:	cb 01       	movw	r24, r22
 57c:	97 f9       	bld	r25, 7
 57e:	08 95       	ret

00000580 <__mulsf3>:
 580:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__mulsf3x>
 584:	0c 94 86 02 	jmp	0x50c	; 0x50c <__fp_round>
 588:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__fp_pscA>
 58c:	38 f0       	brcs	.+14     	; 0x59c <__mulsf3+0x1c>
 58e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__fp_pscB>
 592:	20 f0       	brcs	.+8      	; 0x59c <__mulsf3+0x1c>
 594:	95 23       	and	r25, r21
 596:	11 f0       	breq	.+4      	; 0x59c <__mulsf3+0x1c>
 598:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__fp_inf>
 59c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__fp_nan>
 5a0:	11 24       	eor	r1, r1
 5a2:	0c 94 ba 02 	jmp	0x574	; 0x574 <__fp_szero>

000005a6 <__mulsf3x>:
 5a6:	0e 94 97 02 	call	0x52e	; 0x52e <__fp_split3>
 5aa:	70 f3       	brcs	.-36     	; 0x588 <__mulsf3+0x8>

000005ac <__mulsf3_pse>:
 5ac:	95 9f       	mul	r25, r21
 5ae:	c1 f3       	breq	.-16     	; 0x5a0 <__mulsf3+0x20>
 5b0:	95 0f       	add	r25, r21
 5b2:	50 e0       	ldi	r21, 0x00	; 0
 5b4:	55 1f       	adc	r21, r21
 5b6:	62 9f       	mul	r22, r18
 5b8:	f0 01       	movw	r30, r0
 5ba:	72 9f       	mul	r23, r18
 5bc:	bb 27       	eor	r27, r27
 5be:	f0 0d       	add	r31, r0
 5c0:	b1 1d       	adc	r27, r1
 5c2:	63 9f       	mul	r22, r19
 5c4:	aa 27       	eor	r26, r26
 5c6:	f0 0d       	add	r31, r0
 5c8:	b1 1d       	adc	r27, r1
 5ca:	aa 1f       	adc	r26, r26
 5cc:	64 9f       	mul	r22, r20
 5ce:	66 27       	eor	r22, r22
 5d0:	b0 0d       	add	r27, r0
 5d2:	a1 1d       	adc	r26, r1
 5d4:	66 1f       	adc	r22, r22
 5d6:	82 9f       	mul	r24, r18
 5d8:	22 27       	eor	r18, r18
 5da:	b0 0d       	add	r27, r0
 5dc:	a1 1d       	adc	r26, r1
 5de:	62 1f       	adc	r22, r18
 5e0:	73 9f       	mul	r23, r19
 5e2:	b0 0d       	add	r27, r0
 5e4:	a1 1d       	adc	r26, r1
 5e6:	62 1f       	adc	r22, r18
 5e8:	83 9f       	mul	r24, r19
 5ea:	a0 0d       	add	r26, r0
 5ec:	61 1d       	adc	r22, r1
 5ee:	22 1f       	adc	r18, r18
 5f0:	74 9f       	mul	r23, r20
 5f2:	33 27       	eor	r19, r19
 5f4:	a0 0d       	add	r26, r0
 5f6:	61 1d       	adc	r22, r1
 5f8:	23 1f       	adc	r18, r19
 5fa:	84 9f       	mul	r24, r20
 5fc:	60 0d       	add	r22, r0
 5fe:	21 1d       	adc	r18, r1
 600:	82 2f       	mov	r24, r18
 602:	76 2f       	mov	r23, r22
 604:	6a 2f       	mov	r22, r26
 606:	11 24       	eor	r1, r1
 608:	9f 57       	subi	r25, 0x7F	; 127
 60a:	50 40       	sbci	r21, 0x00	; 0
 60c:	9a f0       	brmi	.+38     	; 0x634 <__mulsf3_pse+0x88>
 60e:	f1 f0       	breq	.+60     	; 0x64c <__mulsf3_pse+0xa0>
 610:	88 23       	and	r24, r24
 612:	4a f0       	brmi	.+18     	; 0x626 <__mulsf3_pse+0x7a>
 614:	ee 0f       	add	r30, r30
 616:	ff 1f       	adc	r31, r31
 618:	bb 1f       	adc	r27, r27
 61a:	66 1f       	adc	r22, r22
 61c:	77 1f       	adc	r23, r23
 61e:	88 1f       	adc	r24, r24
 620:	91 50       	subi	r25, 0x01	; 1
 622:	50 40       	sbci	r21, 0x00	; 0
 624:	a9 f7       	brne	.-22     	; 0x610 <__mulsf3_pse+0x64>
 626:	9e 3f       	cpi	r25, 0xFE	; 254
 628:	51 05       	cpc	r21, r1
 62a:	80 f0       	brcs	.+32     	; 0x64c <__mulsf3_pse+0xa0>
 62c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__fp_inf>
 630:	0c 94 ba 02 	jmp	0x574	; 0x574 <__fp_szero>
 634:	5f 3f       	cpi	r21, 0xFF	; 255
 636:	e4 f3       	brlt	.-8      	; 0x630 <__mulsf3_pse+0x84>
 638:	98 3e       	cpi	r25, 0xE8	; 232
 63a:	d4 f3       	brlt	.-12     	; 0x630 <__mulsf3_pse+0x84>
 63c:	86 95       	lsr	r24
 63e:	77 95       	ror	r23
 640:	67 95       	ror	r22
 642:	b7 95       	ror	r27
 644:	f7 95       	ror	r31
 646:	e7 95       	ror	r30
 648:	9f 5f       	subi	r25, 0xFF	; 255
 64a:	c1 f7       	brne	.-16     	; 0x63c <__mulsf3_pse+0x90>
 64c:	fe 2b       	or	r31, r30
 64e:	88 0f       	add	r24, r24
 650:	91 1d       	adc	r25, r1
 652:	96 95       	lsr	r25
 654:	87 95       	ror	r24
 656:	97 f9       	bld	r25, 7
 658:	08 95       	ret

0000065a <__umulhisi3>:
 65a:	a2 9f       	mul	r26, r18
 65c:	b0 01       	movw	r22, r0
 65e:	b3 9f       	mul	r27, r19
 660:	c0 01       	movw	r24, r0
 662:	a3 9f       	mul	r26, r19
 664:	70 0d       	add	r23, r0
 666:	81 1d       	adc	r24, r1
 668:	11 24       	eor	r1, r1
 66a:	91 1d       	adc	r25, r1
 66c:	b2 9f       	mul	r27, r18
 66e:	70 0d       	add	r23, r0
 670:	81 1d       	adc	r24, r1
 672:	11 24       	eor	r1, r1
 674:	91 1d       	adc	r25, r1
 676:	08 95       	ret

00000678 <_exit>:
 678:	f8 94       	cli

0000067a <__stop_program>:
 67a:	ff cf       	rjmp	.-2      	; 0x67a <__stop_program>
